/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package vista;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.MouseMotionListener;
import java.util.LinkedList;
import javax.swing.JOptionPane;
import modelo.Arbol;
import modelo.AristaGrafoMapa;
import modelo.Calle;
import modelo.Edificio;
import modelo.NodoGrafoMapa;
import modelo.PuntosLimiteCuadricula;

/**
 *
 * @author SAMAEL
 */
public class PanelCrearMapa extends javax.swing.JPanel implements MouseMotionListener, MouseListener, KeyListener {

    int x = 20;
    int y = 10;
    Calle calle;
    Arbol arbol;
    Edificio edificio;
    PuntosLimiteCuadricula[][] matrizPuntosLimitesCuadriculaMapa = new PuntosLimiteCuadricula[20][10];
    String[][] matrizLetrasElementosInternosCuadriculaMapa = new String[20][10];
    //Matriz para agregar los Id de cada calle de la cuadricula
    int[][] matrizCuadriculaMapaIdCalles = new int[20][10];
    int[][] matrizCuadriculaMapaIdArboles = new int[20][10];
    int[][] matrizCuadriculaMapaIdEdificios = new int[20][10];
    private FrameCrearMapa frame;
    int contadorDeCalles = 0;
    int contadorDeEdificios = 0;
    int contadorDeArboles = 0;
    int contadorDeNodos = 0;
    String orientacion = "";
    boolean esPrimeraCalle = true;

    /**
     * Creates new form PanelCrearMapa
     */
    public PanelCrearMapa() {
        initComponents();

        addKeyListener(this);
        setFocusable(true);
        setFocusTraversalKeysEnabled(false);
        addMouseListener(this);
        addMouseMotionListener(this);

        for (int i = 0; i < 20; i++) {
            for (int j = 0; j < 10; j++) {
                matrizPuntosLimitesCuadriculaMapa[i][j] = new PuntosLimiteCuadricula();
                matrizLetrasElementosInternosCuadriculaMapa[i][j] = "";
                matrizCuadriculaMapaIdCalles[i][j] = -1;
                matrizCuadriculaMapaIdArboles[i][j] = -1;
                matrizCuadriculaMapaIdEdificios[i][j] = -1;
            }
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setMaximumSize(new java.awt.Dimension(1120, 560));
        setMinimumSize(new java.awt.Dimension(1120, 560));
        setPreferredSize(new java.awt.Dimension(1120, 560));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1120, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 560, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g); //To change body of generated methods, choose Tools | Templates.
        ///aca se grafica las lineas horizontales para la cuadricula
        for (int i = 0; i <= x; i++) {
            g.drawLine((i * 56), 0, (i * 56), 560);
        }
        g.drawLine(1119, 0, 1119, 560);

        ///aca se grafica las lineas  verticales para la cuadricula.
        for (int i = 0; i <= y; i++) {
            g.drawLine(0, (i * 56), 1120, (i * 56));
        }
        g.drawLine(0, 559, 1120, 559);

        //llenar matriz 
        for (int i = 1; i <= x; i++) {
            for (int j = 1; j <= y; j++) {
                matrizPuntosLimitesCuadriculaMapa[i - 1][j - 1].setX1(((i - 1) * 56));
                matrizPuntosLimitesCuadriculaMapa[i - 1][j - 1].setX2((i * 56) - 3);
                matrizPuntosLimitesCuadriculaMapa[i - 1][j - 1].setY1(((j - 1) * 56));
                matrizPuntosLimitesCuadriculaMapa[i - 1][j - 1].setY2((j * 56) - 3);
            }
        }

        if (calle != null) {
            g.drawImage(calle.getImagen().getImage(), calle.getX(), calle.getY(), calle.getAncho(), calle.getAlto(), this);
            g.setColor(Color.white);
            g.drawRect(calle.getX(), calle.getY(), calle.getAncho(), calle.getAlto());
        }
        if (arbol != null) {
            g.drawImage(arbol.getImagen().getImage(), arbol.getX(), arbol.getY(), arbol.getAncho(), arbol.getAlto(), this);
            g.setColor(Color.white);
            g.drawRect(arbol.getX(), arbol.getY(), arbol.getAncho(), arbol.getAlto());
        }
        if (edificio != null) {
            g.drawImage(edificio.getImagen().getImage(), edificio.getX(), edificio.getY(), edificio.getAncho(), edificio.getAlto(), this);
            g.setColor(Color.white);
            g.drawRect(edificio.getX(), edificio.getY(), edificio.getAncho(), edificio.getAlto());
        }

        /// solo para las calles pero luego se modifica para los edificios tomando la matriz de elementos (String) 
        //y graficando toca que crear una matriz de edificios y los arboles si normal 
        for (int i = 0; i < 10; i++) {
            for (int j = 0; j < 20; j++) {
                //System.out.println("matriz " + matrizLetrasElementosInternosCuadriculaMapa[j][i] +" calle id "+matrizCuadriculaMapaIdCalles[j][i]);
                if (!"".equals(matrizLetrasElementosInternosCuadriculaMapa[j][i])) {
                    if (matrizCuadriculaMapaIdCalles[j][i] != -1) {
                        //System.out.println("calle"+frame.getCalles().get(matrizCuadriculaMapaIdCalles[j][i]).getId());
                        g.drawImage(frame.getCalles().get(matrizCuadriculaMapaIdCalles[j][i]).getImagen().getImage(), frame.getCalles().get(matrizCuadriculaMapaIdCalles[j][i]).getX(), frame.getCalles().get(matrizCuadriculaMapaIdCalles[j][i]).getY(), frame.getCalles().get(matrizCuadriculaMapaIdCalles[j][i]).getAncho(), frame.getCalles().get(matrizCuadriculaMapaIdCalles[j][i]).getAlto(), this);
                        for (int k = 0; k < frame.getCalles().get(matrizCuadriculaMapaIdCalles[j][i]).getListaDeNodosEnCalle().size(); k++) {
                            g.drawOval(frame.getCalles().get(matrizCuadriculaMapaIdCalles[j][i]).getListaDeNodosEnCalle().get(k).getX(), frame.getCalles().get(matrizCuadriculaMapaIdCalles[j][i]).getListaDeNodosEnCalle().get(k).getY(), frame.getCalles().get(matrizCuadriculaMapaIdCalles[j][i]).getListaDeNodosEnCalle().get(k).getAncho(), frame.getCalles().get(matrizCuadriculaMapaIdCalles[j][i]).getListaDeNodosEnCalle().get(k).getAlto());
                        }
                        for (int k = 0; k < frame.getAristasGrafoMapa().size(); k++) {
                            g.drawLine(frame.getAristasGrafoMapa().get(k).getNodoA().getX(), frame.getAristasGrafoMapa().get(k).getNodoA().getY(), frame.getAristasGrafoMapa().get(k).getNodoB().getX(), frame.getAristasGrafoMapa().get(k).getNodoB().getY());
                        }
                    }
                    if (matrizCuadriculaMapaIdArboles[j][i] != -1) {
                        g.drawImage(frame.getArboles().get(matrizCuadriculaMapaIdArboles[j][i]).getImagen().getImage(), frame.getArboles().get(matrizCuadriculaMapaIdArboles[j][i]).getX(), frame.getArboles().get(matrizCuadriculaMapaIdArboles[j][i]).getY(), frame.getArboles().get(matrizCuadriculaMapaIdArboles[j][i]).getAncho(), frame.getArboles().get(matrizCuadriculaMapaIdArboles[j][i]).getAlto(), this);
                    }

                    if (matrizCuadriculaMapaIdEdificios[j][i] != -1) {
                        g.drawImage(frame.getEdificios().get(matrizCuadriculaMapaIdEdificios[j][i]).getImagen().getImage(), frame.getEdificios().get(matrizCuadriculaMapaIdEdificios[j][i]).getX(), frame.getEdificios().get(matrizCuadriculaMapaIdEdificios[j][i]).getY(), frame.getEdificios().get(matrizCuadriculaMapaIdEdificios[j][i]).getAncho(), frame.getEdificios().get(matrizCuadriculaMapaIdEdificios[j][i]).getAlto(), this);
                    }

                }
            }
        }

        repaint();

    }

    public void recibirFrameCrearMapa(FrameCrearMapa frameRecibido) {
        this.frame = frameRecibido;
    }

    public void recibirTodasLasMatricezYdemasCuandoCarga(String[][] matrizElementos, int[][] idCalles, int[][] idArboles, int[][] idEdificios, int contadorCalles, int contadorEdificios, int contadorArboles, int contadorNodos) {
        this.matrizLetrasElementosInternosCuadriculaMapa = matrizElementos;
        this.matrizCuadriculaMapaIdCalles = idCalles;
        this.matrizCuadriculaMapaIdArboles = idArboles;
        this.matrizCuadriculaMapaIdEdificios = idEdificios;
        this.contadorDeCalles = contadorCalles;
        this.contadorDeEdificios = contadorEdificios;
        this.contadorDeArboles = contadorArboles;
        this.contadorDeNodos = contadorNodos;
        this.esPrimeraCalle = false;
    }

    @Override
    public void mouseDragged(MouseEvent e) {
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.

    }

    @Override
    public void mouseMoved(MouseEvent e) {
        // throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
        if (calle != null) {
            calle.setX(e.getX() - 23);
            calle.setY(e.getY() - 23);
            repaint();
        }
        if (arbol != null) {
            arbol.setX(e.getX() - 23);
            arbol.setY(e.getY() - 23);
            repaint();
        }
        if (edificio != null) {
            edificio.setX(e.getX() - 23);
            edificio.setY(e.getY() - 23);
            repaint();
        }

    }

    @Override
    public void mouseClicked(MouseEvent e) {
        // throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.

        int x = (int) e.getPoint().getX();
        int y = (int) e.getPoint().getY();

        int[] cuadroSeleccionado = new int[2];
        cuadroSeleccionado = retornarPosicionCuadriculaSeleccionada(x, y);
        System.out.println("cuadro seleccionado: "+cuadroSeleccionado[0]);
        System.out.println("cuadro seleccionado: "+cuadroSeleccionado[1]);
        if (cuadroSeleccionado != null) {

            //caundo dan click encima de una imagen, verifica si lo quiere eliminar
            if (calle == null && edificio == null && arbol == null && !"".equals(matrizLetrasElementosInternosCuadriculaMapa[cuadroSeleccionado[0]][cuadroSeleccionado[1]])) {
                ///menu para mover o eliminar elemento seleccionado 
                FormularioParaCorregirElementosEnElPanel formulario = new FormularioParaCorregirElementosEnElPanel();
                formulario.recibirPanel(this, cuadroSeleccionado[0], cuadroSeleccionado[1], this.frame.getCalles().get(matrizCuadriculaMapaIdCalles[cuadroSeleccionado[0]][cuadroSeleccionado[1]]).getSentido());
                formulario.setVisible(true);
            }

            //metodo opara agregar una calle
            if (calle != null && matrizLetrasElementosInternosCuadriculaMapa[cuadroSeleccionado[0]][cuadroSeleccionado[1]].equals("")) {
                FormularioParaLaTomaDeDatosSegunSamaelCardonaClavijo formularioTomaDeDatos = new FormularioParaLaTomaDeDatosSegunSamaelCardonaClavijo();

                if ("horizontal".equals(this.orientacion)) {
                    formularioTomaDeDatos.recibirPanel(this, cuadroSeleccionado[0], cuadroSeleccionado[1]);
                    formularioTomaDeDatos.setVisible(true);
                }
                if ("vertical".equals(this.orientacion)) {

                    formularioTomaDeDatos.getComboSentido().removeAllItems();
                    formularioTomaDeDatos.getComboSentido().addItem("Arriba");
                    formularioTomaDeDatos.getComboSentido().addItem("Abajo");
                    formularioTomaDeDatos.getComboSentido().addItem("Doble sentido");

                    formularioTomaDeDatos.recibirPanel(this, cuadroSeleccionado[0], cuadroSeleccionado[1]);
                    formularioTomaDeDatos.setVisible(true);
                }
                if ("interseccionCruzada".equals(this.orientacion)) {
                    formularioTomaDeDatos.getComboSentido().removeAllItems();
                    formularioTomaDeDatos.getComboSentido().addItem("Doble sentido");
                    formularioTomaDeDatos.recibirPanel(this, cuadroSeleccionado[0], cuadroSeleccionado[1]);
                    formularioTomaDeDatos.getComboTipo().removeAllItems();
                    formularioTomaDeDatos.getComboTipo().addItem("Urbana");
                    formularioTomaDeDatos.getjButton1().doClick();

                }
                if ("interseccionArribaDerecha".equals(this.orientacion) || "interseccionAbajoDerecha".equals(this.orientacion) || "interseccionArribaIzquierda".equals(this.orientacion) || "interseccionAbajoIzquierda".equals(this.orientacion)) {
                    formularioTomaDeDatos.recibirPanel(this, cuadroSeleccionado[0], cuadroSeleccionado[1]);
                    formularioTomaDeDatos.setVisible(true);
                }

            }

            ///metodo para agrear un arbol
            if (arbol != null && matrizLetrasElementosInternosCuadriculaMapa[cuadroSeleccionado[0]][cuadroSeleccionado[1]].equals("")) {

                this.crearArbol(cuadroSeleccionado[0], cuadroSeleccionado[1]);
                arbol = null;

            }

            ///// metodo para agregar eficios
            if (edificio != null && matrizLetrasElementosInternosCuadriculaMapa[cuadroSeleccionado[0]][cuadroSeleccionado[1]].equals("")) {
                crearEdificio(cuadroSeleccionado[0], cuadroSeleccionado[1]);
                edificio = null;
            }
            //aca la validacion de click 
            ///cuando colocan una calle encima de otra saca una alerta.
            if ((edificio != null && !"".equals(matrizLetrasElementosInternosCuadriculaMapa[cuadroSeleccionado[0]][cuadroSeleccionado[1]]))
                    || (calle != null && !"".equals(matrizLetrasElementosInternosCuadriculaMapa[cuadroSeleccionado[0]][cuadroSeleccionado[1]]))
                    || (arbol != null && !"".equals(matrizLetrasElementosInternosCuadriculaMapa[cuadroSeleccionado[0]][cuadroSeleccionado[1]]))) {
                JOptionPane.showMessageDialog(null, "verifique posicion", "WARNING_MESSAGE", JOptionPane.WARNING_MESSAGE);
            }
        }

        if (frame != null) {

            frame.getjRadioButton1().setSelected(false);
            frame.getjRadioButton10().setSelected(false);
            frame.getjRadioButton11().setSelected(false);
            frame.getjRadioButton12().setSelected(false);
            frame.getjRadioButton13().setSelected(false);
            frame.getjRadioButton14().setSelected(false);
            frame.getjRadioButton15().setSelected(false);
            frame.getjRadioButton16().setSelected(false);
            frame.getjRadioButton9().setSelected(false);
            frame.getjRadioButton8().setSelected(false);
            frame.getjRadioButton7().setSelected(false);
            frame.getjRadioButton6().setSelected(false);
            frame.getjRadioButton5().setSelected(false);
            frame.getjRadioButton4().setSelected(false);
            frame.getjRadioButton3().setSelected(false);
            frame.getjRadioButton2().setSelected(false);
        }
    }

    @Override
    public void mousePressed(MouseEvent me) {
        //  throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void mouseReleased(MouseEvent me) {
        // throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void mouseEntered(MouseEvent e) {
        // throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
        if (calle != null) {
            calle.setX(e.getX());
            calle.setY(e.getY());
            repaint();
        }

    }

    @Override
    public void mouseExited(MouseEvent me) {
        // throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void keyTyped(KeyEvent ke) {
        //  throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void keyPressed(KeyEvent ke) {
        //   throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void keyReleased(KeyEvent ke) {
        //  throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    public int[] retornarPosicionCuadriculaSeleccionada(int x, int y) {

        boolean encontroX = false;
        boolean encontroY = false;
        int i = 0;
        int j = 0;
        int[] datosXY = new int[2];

        //para encontrar limites en x 
        while (i < 20 && encontroX == false) {
            if (matrizPuntosLimitesCuadriculaMapa[i][j].getX1() <= x && matrizPuntosLimitesCuadriculaMapa[i][j].getX2() >= x) {
                encontroX = true;
                datosXY[0] = i;
            }
            i++;
        }

        //para encontrar limites en y despues de haber encontrado x
        if (encontroX == true) {
            while (j < 10 && encontroY == false) {
                if (matrizPuntosLimitesCuadriculaMapa[datosXY[0]][j].getY1() <= y && matrizPuntosLimitesCuadriculaMapa[datosXY[0]][j].getY2() >= y) {
                    encontroY = true;
                    datosXY[1] = j;
                }
                j++;
            }
        } else {
            System.out.println("verifique posiciones seleccionadas");
        }
        if (encontroY == true) {
            return datosXY;
        }
        return null;
    }

    public void recibirDatosFormularioYmodificarCalle(int x, int y, String tipo, String sentido) {
        calle.setSentido(sentido);
        calle.setTipo(tipo);
        calle.setX((int) matrizPuntosLimitesCuadriculaMapa[x][y].getX1());
        calle.setY((int) matrizPuntosLimitesCuadriculaMapa[x][y].getY1());

        if (!calle.getSentido().equals("") || !calle.getTipo().equals("")) {
            NodoGrafoMapa nodo;
            if (esPrimeraCalle == true) {
                if ("horizontal".equals(this.orientacion)) {
                    if ("Urbana".equals(calle.getTipo())) {
                        calle.setVelocidad(60);
                        if ("Derecha".equals(calle.getSentido())) {
                            calle.setId(contadorDeCalles);
                            matrizLetrasElementosInternosCuadriculaMapa[x][y] = "r";
                            matrizCuadriculaMapaIdCalles[x][y] = calle.getId();
                            frame.agregarCalleALaLista(calle);
                            contadorDeCalles++;
                            nodo = new NodoGrafoMapa(contadorDeNodos, calle.getId(), calle.getX() + 13, calle.getY() + 36, 5, 5, true, matrizLetrasElementosInternosCuadriculaMapa[x][y]);
                            frame.agregarNodoALista(nodo);
                            contadorDeNodos++;

                        }
                        if ("Izquierda".equals(calle.getSentido())) {
                            calle.setId(contadorDeCalles);
                            matrizLetrasElementosInternosCuadriculaMapa[x][y] = "l";
                            matrizCuadriculaMapaIdCalles[x][y] = calle.getId();
                            frame.agregarCalleALaLista(calle);
                            contadorDeCalles++;
                            nodo = new NodoGrafoMapa(contadorDeNodos, calle.getId(), calle.getX() + 13, calle.getY() + 13, 5, 5, true, matrizLetrasElementosInternosCuadriculaMapa[x][y]);
                            frame.agregarNodoALista(nodo);
                            contadorDeNodos++;

                        }
                        if ("Doble sentido".equals(calle.getSentido())) {
                            calle.setId(contadorDeCalles);
                            matrizLetrasElementosInternosCuadriculaMapa[x][y] = "h";
                            matrizCuadriculaMapaIdCalles[x][y] = calle.getId();
                            frame.agregarCalleALaLista(calle);
                            contadorDeCalles++;
                            nodo = new NodoGrafoMapa(contadorDeNodos, calle.getId(), calle.getX() + 13, calle.getY() + 13, 5, 5, true, matrizLetrasElementosInternosCuadriculaMapa[x][y]);
                            frame.agregarNodoALista(nodo);
                            contadorDeNodos++;
                            nodo = new NodoGrafoMapa(contadorDeNodos, calle.getId(), calle.getX() + 13, calle.getY() + 36, 5, 5, true, matrizLetrasElementosInternosCuadriculaMapa[x][y]);
                            frame.agregarNodoALista(nodo);
                            contadorDeNodos++;

                        }
                    }

                    if ("Carretera".equals(calle.getTipo())) {
                        calle.setVelocidad(100);
                        if ("Derecha".equals(calle.getSentido())) {
                            calle.setId(contadorDeCalles);
                            matrizLetrasElementosInternosCuadriculaMapa[x][y] = "R";
                            matrizCuadriculaMapaIdCalles[x][y] = calle.getId();
                            frame.agregarCalleALaLista(calle);
                            contadorDeCalles++;
                            nodo = new NodoGrafoMapa(contadorDeNodos, calle.getId(), calle.getX() + 13, calle.getY() + 36, 5, 5, true, matrizLetrasElementosInternosCuadriculaMapa[x][y]);
                            frame.agregarNodoALista(nodo);
                            contadorDeNodos++;
                        }
                        if ("Izquierda".equals(calle.getSentido())) {
                            calle.setId(contadorDeCalles);
                            matrizLetrasElementosInternosCuadriculaMapa[x][y] = "L";
                            matrizCuadriculaMapaIdCalles[x][y] = calle.getId();
                            frame.agregarCalleALaLista(calle);
                            contadorDeCalles++;
                            nodo = new NodoGrafoMapa(contadorDeNodos, calle.getId(), calle.getX() + 13, calle.getY() + 13, 5, 5, true, matrizLetrasElementosInternosCuadriculaMapa[x][y]);
                            frame.agregarNodoALista(nodo);
                            contadorDeNodos++;
                        }
                        if ("Doble sentido".equals(calle.getSentido())) {
                            calle.setId(contadorDeCalles);
                            matrizLetrasElementosInternosCuadriculaMapa[x][y] = "H";
                            matrizCuadriculaMapaIdCalles[x][y] = calle.getId();
                            frame.agregarCalleALaLista(calle);
                            contadorDeCalles++;
                            nodo = new NodoGrafoMapa(contadorDeNodos, calle.getId(), calle.getX() + 13, calle.getY() + 13, 5, 5, true, matrizLetrasElementosInternosCuadriculaMapa[x][y]);
                            frame.agregarNodoALista(nodo);
                            contadorDeNodos++;
                            nodo = new NodoGrafoMapa(contadorDeNodos, calle.getId(), calle.getX() + 13, calle.getY() + 36, 5, 5, true, matrizLetrasElementosInternosCuadriculaMapa[x][y]);
                            frame.agregarNodoALista(nodo);
                            contadorDeNodos++;
                        }
                    }

                }

                if ("vertical".equals(this.orientacion)) {
                    if ("Urbana".equals(calle.getTipo())) {
                        calle.setVelocidad(60);
                        if ("Arriba".equals(calle.getSentido())) {
                            calle.setId(contadorDeCalles);
                            matrizLetrasElementosInternosCuadriculaMapa[x][y] = "t";
                            matrizCuadriculaMapaIdCalles[x][y] = calle.getId();
                            frame.agregarCalleALaLista(calle);
                            contadorDeCalles++;
                            nodo = new NodoGrafoMapa(contadorDeNodos, calle.getId(), calle.getX() + 36, calle.getY() + 13, 5, 5, true, matrizLetrasElementosInternosCuadriculaMapa[x][y]);
                            frame.agregarNodoALista(nodo);
                            contadorDeNodos++;
                        }
                        if ("Abajo".equals(calle.getSentido())) {
                            calle.setId(contadorDeCalles);
                            matrizLetrasElementosInternosCuadriculaMapa[x][y] = "d";
                            matrizCuadriculaMapaIdCalles[x][y] = calle.getId();
                            frame.agregarCalleALaLista(calle);
                            contadorDeCalles++;
                            nodo = new NodoGrafoMapa(contadorDeNodos, calle.getId(), calle.getX() + 13, calle.getY() + 13, 5, 5, true, matrizLetrasElementosInternosCuadriculaMapa[x][y]);
                            frame.agregarNodoALista(nodo);
                            contadorDeNodos++;
                        }
                        if ("Doble sentido".equals(calle.getSentido())) {
                            calle.setId(contadorDeCalles);
                            matrizLetrasElementosInternosCuadriculaMapa[x][y] = "v";
                            matrizCuadriculaMapaIdCalles[x][y] = calle.getId();
                            frame.agregarCalleALaLista(calle);
                            contadorDeCalles++;
                            nodo = new NodoGrafoMapa(contadorDeNodos, calle.getId(), calle.getX() + 36, calle.getY() + 13, 5, 5, true, matrizLetrasElementosInternosCuadriculaMapa[x][y]);
                            frame.agregarNodoALista(nodo);
                            contadorDeNodos++;
                            nodo = new NodoGrafoMapa(contadorDeNodos, calle.getId(), calle.getX() + 13, calle.getY() + 13, 5, 5, true, matrizLetrasElementosInternosCuadriculaMapa[x][y]);
                            frame.agregarNodoALista(nodo);
                            contadorDeNodos++;
                        }
                    }

                    if ("Carretera".equals(calle.getTipo())) {
                        calle.setVelocidad(100);
                        if ("Arriba".equals(calle.getSentido())) {
                            calle.setId(contadorDeCalles);
                            matrizLetrasElementosInternosCuadriculaMapa[x][y] = "T";
                            matrizCuadriculaMapaIdCalles[x][y] = calle.getId();
                            frame.agregarCalleALaLista(calle);
                            contadorDeCalles++;
                            nodo = new NodoGrafoMapa(contadorDeNodos, calle.getId(), calle.getX() + 36, calle.getY() + 13, 5, 5, true, matrizLetrasElementosInternosCuadriculaMapa[x][y]);
                            frame.agregarNodoALista(nodo);
                            contadorDeNodos++;
                        }
                        if ("Abajo".equals(calle.getSentido())) {
                            calle.setId(contadorDeCalles);
                            matrizLetrasElementosInternosCuadriculaMapa[x][y] = "D";
                            matrizCuadriculaMapaIdCalles[x][y] = calle.getId();
                            frame.agregarCalleALaLista(calle);
                            contadorDeCalles++;
                            nodo = new NodoGrafoMapa(contadorDeNodos, calle.getId(), calle.getX() + 13, calle.getY() + 13, 5, 5, true, matrizLetrasElementosInternosCuadriculaMapa[x][y]);
                            frame.agregarNodoALista(nodo);
                            contadorDeNodos++;
                        }
                        if ("Doble sentido".equals(calle.getSentido())) {
                            calle.setId(contadorDeCalles);
                            matrizLetrasElementosInternosCuadriculaMapa[x][y] = "V";
                            matrizCuadriculaMapaIdCalles[x][y] = calle.getId();
                            frame.agregarCalleALaLista(calle);
                            contadorDeCalles++;
                            nodo = new NodoGrafoMapa(contadorDeNodos, calle.getId(), calle.getX() + 36, calle.getY() + 13, 5, 5, true, matrizLetrasElementosInternosCuadriculaMapa[x][y]);
                            frame.agregarNodoALista(nodo);
                            contadorDeNodos++;
                            nodo = new NodoGrafoMapa(contadorDeNodos, calle.getId(), calle.getX() + 13, calle.getY() + 13, 5, 5, true, matrizLetrasElementosInternosCuadriculaMapa[x][y]);
                            frame.agregarNodoALista(nodo);
                            contadorDeNodos++;
                        }
                    }

                }
                if ("interseccionArribaDerecha".equals(this.orientacion)) {
                    if ("Urbana".equals(calle.getTipo())) {
                        calle.setVelocidad(60);
                        if ("Derecha".equals(calle.getSentido())) {
                            calle.setId(contadorDeCalles);
                            matrizLetrasElementosInternosCuadriculaMapa[x][y] = "xURR";
                            matrizCuadriculaMapaIdCalles[x][y] = calle.getId();
                            frame.agregarCalleALaLista(calle);
                            contadorDeCalles++;
                            nodo = new NodoGrafoMapa(contadorDeNodos, calle.getId(), calle.getX() + 13, calle.getY() + 36, 5, 5, true, matrizLetrasElementosInternosCuadriculaMapa[x][y]);
                            frame.agregarNodoALista(nodo);
                            contadorDeNodos++;
                        }
                        if ("Izquierda".equals(calle.getSentido())) {
                            calle.setId(contadorDeCalles);
                            matrizLetrasElementosInternosCuadriculaMapa[x][y] = "xURL";
                            matrizCuadriculaMapaIdCalles[x][y] = calle.getId();
                            frame.agregarCalleALaLista(calle);
                            contadorDeCalles++;
                            nodo = new NodoGrafoMapa(contadorDeNodos, calle.getId(), calle.getX() + 36, calle.getY() + 13, 5, 5, true, matrizLetrasElementosInternosCuadriculaMapa[x][y]);
                            frame.agregarNodoALista(nodo);
                            contadorDeNodos++;
                        }
                        if ("Doble sentido".equals(calle.getSentido())) {
                            calle.setId(contadorDeCalles);
                            matrizLetrasElementosInternosCuadriculaMapa[x][y] = "xUR";
                            matrizCuadriculaMapaIdCalles[x][y] = calle.getId();
                            frame.agregarCalleALaLista(calle);
                            contadorDeCalles++;
                            nodo = new NodoGrafoMapa(contadorDeNodos, calle.getId(), calle.getX() + 36, calle.getY() + 13, 5, 5, true, matrizLetrasElementosInternosCuadriculaMapa[x][y]);
                            frame.agregarNodoALista(nodo);
                            contadorDeNodos++;
                            nodo = new NodoGrafoMapa(contadorDeNodos, calle.getId(), calle.getX() + 13, calle.getY() + 36, 5, 5, true, matrizLetrasElementosInternosCuadriculaMapa[x][y]);
                            frame.agregarNodoALista(nodo);
                            contadorDeNodos++;
                        }
                    }
                    if ("Carretera".equals(calle.getTipo())) {
                        calle.setVelocidad(100);
                        if ("Derecha".equals(calle.getSentido())) {
                            calle.setId(contadorDeCalles);
                            matrizLetrasElementosInternosCuadriculaMapa[x][y] = "XURR";
                            matrizCuadriculaMapaIdCalles[x][y] = calle.getId();
                            frame.agregarCalleALaLista(calle);
                            contadorDeCalles++;
                            nodo = new NodoGrafoMapa(contadorDeNodos, calle.getId(), calle.getX() + 13, calle.getY() + 36, 5, 5, true, matrizLetrasElementosInternosCuadriculaMapa[x][y]);
                            frame.agregarNodoALista(nodo);
                            contadorDeNodos++;
                        }
                        if ("Izquierda".equals(calle.getSentido())) {
                            calle.setId(contadorDeCalles);
                            matrizLetrasElementosInternosCuadriculaMapa[x][y] = "XURL";
                            matrizCuadriculaMapaIdCalles[x][y] = calle.getId();
                            frame.agregarCalleALaLista(calle);
                            contadorDeCalles++;
                            nodo = new NodoGrafoMapa(contadorDeNodos, calle.getId(), calle.getX() + 36, calle.getY() + 13, 5, 5, true, matrizLetrasElementosInternosCuadriculaMapa[x][y]);
                            frame.agregarNodoALista(nodo);
                            contadorDeNodos++;
                        }
                        if ("Doble sentido".equals(calle.getSentido())) {
                            calle.setId(contadorDeCalles);
                            matrizLetrasElementosInternosCuadriculaMapa[x][y] = "XUR";
                            matrizCuadriculaMapaIdCalles[x][y] = calle.getId();
                            frame.agregarCalleALaLista(calle);
                            contadorDeCalles++;
                            nodo = new NodoGrafoMapa(contadorDeNodos, calle.getId(), calle.getX() + 36, calle.getY() + 13, 5, 5, true, matrizLetrasElementosInternosCuadriculaMapa[x][y]);
                            frame.agregarNodoALista(nodo);
                            contadorDeNodos++;
                            nodo = new NodoGrafoMapa(contadorDeNodos, calle.getId(), calle.getX() + 13, calle.getY() + 36, 5, 5, true, matrizLetrasElementosInternosCuadriculaMapa[x][y]);
                            frame.agregarNodoALista(nodo);
                            contadorDeNodos++;
                        }
                    }
                }
                if ("interseccionAbajoDerecha".equals(this.orientacion)) {
                    if ("Urbana".equals(calle.getTipo())) {
                        calle.setVelocidad(60);
                        if ("Derecha".equals(calle.getSentido())) {
                            calle.setId(contadorDeCalles);
                            matrizLetrasElementosInternosCuadriculaMapa[x][y] = "xDRR";
                            matrizCuadriculaMapaIdCalles[x][y] = calle.getId();
                            frame.agregarCalleALaLista(calle);
                            contadorDeCalles++;
                            nodo = new NodoGrafoMapa(contadorDeNodos, calle.getId(), calle.getX() + 36, calle.getY() + 36, 5, 5, true, matrizLetrasElementosInternosCuadriculaMapa[x][y]);
                            frame.agregarNodoALista(nodo);
                            contadorDeNodos++;
                        }
                        if ("Izquierda".equals(calle.getSentido())) {
                            calle.setId(contadorDeCalles);
                            matrizLetrasElementosInternosCuadriculaMapa[x][y] = "xDRL";
                            matrizCuadriculaMapaIdCalles[x][y] = calle.getId();
                            frame.agregarCalleALaLista(calle);
                            contadorDeCalles++;
                            nodo = new NodoGrafoMapa(contadorDeNodos, calle.getId(), calle.getX() + 13, calle.getY() + 13, 5, 5, true, matrizLetrasElementosInternosCuadriculaMapa[x][y]);
                            frame.agregarNodoALista(nodo);
                            contadorDeNodos++;
                        }
                        if ("Doble sentido".equals(calle.getSentido())) {
                            calle.setId(contadorDeCalles);
                            matrizLetrasElementosInternosCuadriculaMapa[x][y] = "xDR";
                            matrizCuadriculaMapaIdCalles[x][y] = calle.getId();
                            frame.agregarCalleALaLista(calle);
                            contadorDeCalles++;
                            nodo = new NodoGrafoMapa(contadorDeNodos, calle.getId(), calle.getX() + 13, calle.getY() + 13, 5, 5, true, matrizLetrasElementosInternosCuadriculaMapa[x][y]);
                            frame.agregarNodoALista(nodo);
                            contadorDeNodos++;
                            nodo = new NodoGrafoMapa(contadorDeNodos, calle.getId(), calle.getX() + 36, calle.getY() + 36, 5, 5, true, matrizLetrasElementosInternosCuadriculaMapa[x][y]);
                            frame.agregarNodoALista(nodo);
                            contadorDeNodos++;
                        }
                    }
                    if ("Carretera".equals(calle.getTipo())) {
                        calle.setVelocidad(100);
                        if ("Derecha".equals(calle.getSentido())) {
                            calle.setId(contadorDeCalles);
                            matrizLetrasElementosInternosCuadriculaMapa[x][y] = "XDRR";
                            matrizCuadriculaMapaIdCalles[x][y] = calle.getId();
                            frame.agregarCalleALaLista(calle);
                            contadorDeCalles++;
                            nodo = new NodoGrafoMapa(contadorDeNodos, calle.getId(), calle.getX() + 36, calle.getY() + 36, 5, 5, true, matrizLetrasElementosInternosCuadriculaMapa[x][y]);
                            frame.agregarNodoALista(nodo);
                            contadorDeNodos++;
                        }
                        if ("Izquierda".equals(calle.getSentido())) {
                            calle.setId(contadorDeCalles);
                            matrizLetrasElementosInternosCuadriculaMapa[x][y] = "XDRL";
                            matrizCuadriculaMapaIdCalles[x][y] = calle.getId();
                            frame.agregarCalleALaLista(calle);
                            contadorDeCalles++;
                            nodo = new NodoGrafoMapa(contadorDeNodos, calle.getId(), calle.getX() + 13, calle.getY() + 13, 5, 5, true, matrizLetrasElementosInternosCuadriculaMapa[x][y]);
                            frame.agregarNodoALista(nodo);
                            contadorDeNodos++;
                        }
                        if ("Doble sentido".equals(calle.getSentido())) {
                            calle.setId(contadorDeCalles);
                            matrizLetrasElementosInternosCuadriculaMapa[x][y] = "XDR";
                            matrizCuadriculaMapaIdCalles[x][y] = calle.getId();
                            frame.agregarCalleALaLista(calle);
                            contadorDeCalles++;
                            nodo = new NodoGrafoMapa(contadorDeNodos, calle.getId(), calle.getX() + 13, calle.getY() + 13, 5, 5, true, matrizLetrasElementosInternosCuadriculaMapa[x][y]);
                            frame.agregarNodoALista(nodo);
                            contadorDeNodos++;
                            nodo = new NodoGrafoMapa(contadorDeNodos, calle.getId(), calle.getX() + 36, calle.getY() + 36, 5, 5, true, matrizLetrasElementosInternosCuadriculaMapa[x][y]);
                            frame.agregarNodoALista(nodo);
                            contadorDeNodos++;
                        }
                    }
                }
                if ("interseccionArribaIzquierda".equals(this.orientacion)) {
                    if ("Urbana".equals(calle.getTipo())) {
                        calle.setVelocidad(60);
                        if ("Derecha".equals(calle.getSentido())) {
                            calle.setId(contadorDeCalles);
                            matrizLetrasElementosInternosCuadriculaMapa[x][y] = "xULR";
                            matrizCuadriculaMapaIdCalles[x][y] = calle.getId();
                            frame.agregarCalleALaLista(calle);
                            contadorDeCalles++;
                            nodo = new NodoGrafoMapa(contadorDeNodos, calle.getId(), calle.getX() + 36, calle.getY() + 36, 5, 5, true, matrizLetrasElementosInternosCuadriculaMapa[x][y]);
                            frame.agregarNodoALista(nodo);
                            contadorDeNodos++;

                        }
                        if ("Izquierda".equals(calle.getSentido())) {
                            calle.setId(contadorDeCalles);
                            matrizLetrasElementosInternosCuadriculaMapa[x][y] = "xULL";
                            matrizCuadriculaMapaIdCalles[x][y] = calle.getId();
                            frame.agregarCalleALaLista(calle);
                            contadorDeCalles++;
                            nodo = new NodoGrafoMapa(contadorDeNodos, calle.getId(), calle.getX() + 13, calle.getY() + 13, 5, 5, true, matrizLetrasElementosInternosCuadriculaMapa[x][y]);
                            frame.agregarNodoALista(nodo);
                            contadorDeNodos++;
                        }
                        if ("Doble sentido".equals(calle.getSentido())) {
                            calle.setId(contadorDeCalles);
                            matrizLetrasElementosInternosCuadriculaMapa[x][y] = "xUL";
                            matrizCuadriculaMapaIdCalles[x][y] = calle.getId();
                            frame.agregarCalleALaLista(calle);
                            contadorDeCalles++;
                            nodo = new NodoGrafoMapa(contadorDeNodos, calle.getId(), calle.getX() + 13, calle.getY() + 13, 5, 5, true, matrizLetrasElementosInternosCuadriculaMapa[x][y]);
                            frame.agregarNodoALista(nodo);
                            contadorDeNodos++;
                            nodo = new NodoGrafoMapa(contadorDeNodos, calle.getId(), calle.getX() + 36, calle.getY() + 36, 5, 5, true, matrizLetrasElementosInternosCuadriculaMapa[x][y]);
                            frame.agregarNodoALista(nodo);
                            contadorDeNodos++;
                        }
                    }
                    if ("Carretera".equals(calle.getTipo())) {
                        calle.setVelocidad(100);
                        if ("Derecha".equals(calle.getSentido())) {
                            calle.setId(contadorDeCalles);
                            matrizLetrasElementosInternosCuadriculaMapa[x][y] = "XULR";
                            matrizCuadriculaMapaIdCalles[x][y] = calle.getId();
                            frame.agregarCalleALaLista(calle);
                            contadorDeCalles++;
                            nodo = new NodoGrafoMapa(contadorDeNodos, calle.getId(), calle.getX() + 36, calle.getY() + 36, 5, 5, true, matrizLetrasElementosInternosCuadriculaMapa[x][y]);
                            frame.agregarNodoALista(nodo);
                            contadorDeNodos++;
                        }
                        if ("Izquierda".equals(calle.getSentido())) {
                            calle.setId(contadorDeCalles);
                            matrizLetrasElementosInternosCuadriculaMapa[x][y] = "XULL";
                            matrizCuadriculaMapaIdCalles[x][y] = calle.getId();
                            frame.agregarCalleALaLista(calle);
                            contadorDeCalles++;
                            nodo = new NodoGrafoMapa(contadorDeNodos, calle.getId(), calle.getX() + 13, calle.getY() + 13, 5, 5, true, matrizLetrasElementosInternosCuadriculaMapa[x][y]);
                            frame.agregarNodoALista(nodo);
                            contadorDeNodos++;
                        }
                        if ("Doble sentido".equals(calle.getSentido())) {
                            calle.setId(contadorDeCalles);
                            matrizLetrasElementosInternosCuadriculaMapa[x][y] = "XUL";
                            matrizCuadriculaMapaIdCalles[x][y] = calle.getId();
                            frame.agregarCalleALaLista(calle);
                            contadorDeCalles++;
                            nodo = new NodoGrafoMapa(contadorDeNodos, calle.getId(), calle.getX() + 13, calle.getY() + 13, 5, 5, true, matrizLetrasElementosInternosCuadriculaMapa[x][y]);
                            frame.agregarNodoALista(nodo);
                            contadorDeNodos++;
                            nodo = new NodoGrafoMapa(contadorDeNodos, calle.getId(), calle.getX() + 36, calle.getY() + 36, 5, 5, true, matrizLetrasElementosInternosCuadriculaMapa[x][y]);
                            frame.agregarNodoALista(nodo);
                            contadorDeNodos++;
                        }
                    }
                }
                if ("interseccionAbajoIzquierda".equals(this.orientacion)) {
                    if ("Urbana".equals(calle.getTipo())) {
                        calle.setVelocidad(60);
                        if ("Derecha".equals(calle.getSentido())) {
                            calle.setId(contadorDeCalles);
                            matrizLetrasElementosInternosCuadriculaMapa[x][y] = "xDLR";
                            matrizCuadriculaMapaIdCalles[x][y] = calle.getId();
                            frame.agregarCalleALaLista(calle);
                            contadorDeCalles++;
                            nodo = new NodoGrafoMapa(contadorDeNodos, calle.getId(), calle.getX() + 13, calle.getY() + 36, 5, 5, true, matrizLetrasElementosInternosCuadriculaMapa[x][y]);
                            frame.agregarNodoALista(nodo);
                            contadorDeNodos++;
                        }
                        if ("Izquierda".equals(calle.getSentido())) {
                            calle.setId(contadorDeCalles);
                            matrizLetrasElementosInternosCuadriculaMapa[x][y] = "xDLL";
                            matrizCuadriculaMapaIdCalles[x][y] = calle.getId();
                            frame.agregarCalleALaLista(calle);
                            contadorDeCalles++;
                            nodo = new NodoGrafoMapa(contadorDeNodos, calle.getId(), calle.getX() + 36, calle.getY() + 13, 5, 5, true, matrizLetrasElementosInternosCuadriculaMapa[x][y]);
                            frame.agregarNodoALista(nodo);
                            contadorDeNodos++;
                        }
                        if ("Doble sentido".equals(calle.getSentido())) {
                            calle.setId(contadorDeCalles);
                            matrizLetrasElementosInternosCuadriculaMapa[x][y] = "xDL";
                            matrizCuadriculaMapaIdCalles[x][y] = calle.getId();
                            frame.agregarCalleALaLista(calle);
                            contadorDeCalles++;
                            nodo = new NodoGrafoMapa(contadorDeNodos, calle.getId(), calle.getX() + 36, calle.getY() + 13, 5, 5, true, matrizLetrasElementosInternosCuadriculaMapa[x][y]);
                            frame.agregarNodoALista(nodo);
                            contadorDeNodos++;
                            nodo = new NodoGrafoMapa(contadorDeNodos, calle.getId(), calle.getX() + 13, calle.getY() + 36, 5, 5, true, matrizLetrasElementosInternosCuadriculaMapa[x][y]);
                            frame.agregarNodoALista(nodo);
                            contadorDeNodos++;
                        }
                    }
                    if ("Carretera".equals(calle.getTipo())) {
                        calle.setVelocidad(100);
                        if ("Derecha".equals(calle.getSentido())) {
                            calle.setId(contadorDeCalles);
                            matrizLetrasElementosInternosCuadriculaMapa[x][y] = "XDLR";
                            matrizCuadriculaMapaIdCalles[x][y] = calle.getId();
                            frame.agregarCalleALaLista(calle);
                            contadorDeCalles++;
                            nodo = new NodoGrafoMapa(contadorDeNodos, calle.getId(), calle.getX() + 13, calle.getY() + 36, 5, 5, true, matrizLetrasElementosInternosCuadriculaMapa[x][y]);
                            frame.agregarNodoALista(nodo);
                            contadorDeNodos++;
                        }
                        if ("Izquierda".equals(calle.getSentido())) {
                            calle.setId(contadorDeCalles);
                            matrizLetrasElementosInternosCuadriculaMapa[x][y] = "XDL";
                            matrizCuadriculaMapaIdCalles[x][y] = calle.getId();
                            frame.agregarCalleALaLista(calle);
                            contadorDeCalles++;
                            nodo = new NodoGrafoMapa(contadorDeNodos, calle.getId(), calle.getX() + 36, calle.getY() + 13, 5, 5, true, matrizLetrasElementosInternosCuadriculaMapa[x][y]);
                            frame.agregarNodoALista(nodo);
                            contadorDeNodos++;
                        }
                        if ("Doble sentido".equals(calle.getSentido())) {
                            calle.setId(contadorDeCalles);
                            matrizLetrasElementosInternosCuadriculaMapa[x][y] = "XDL";
                            matrizCuadriculaMapaIdCalles[x][y] = calle.getId();
                            frame.agregarCalleALaLista(calle);
                            contadorDeCalles++;
                            nodo = new NodoGrafoMapa(contadorDeNodos, calle.getId(), calle.getX() + 36, calle.getY() + 13, 5, 5, true, matrizLetrasElementosInternosCuadriculaMapa[x][y]);
                            frame.agregarNodoALista(nodo);
                            contadorDeNodos++;
                            nodo = new NodoGrafoMapa(contadorDeNodos, calle.getId(), calle.getX() + 13, calle.getY() + 36, 5, 5, true, matrizLetrasElementosInternosCuadriculaMapa[x][y]);
                            frame.agregarNodoALista(nodo);
                            contadorDeNodos++;
                        }
                    }
                }
                if ("interseccionCruzada".equals(this.orientacion)) {
                    if ("Urbana".equals(calle.getTipo())) {
                        calle.setVelocidad(60);
                        calle.setId(contadorDeCalles);
                        matrizLetrasElementosInternosCuadriculaMapa[x][y] = "xx";
                        matrizCuadriculaMapaIdCalles[x][y] = calle.getId();
                        frame.agregarCalleALaLista(calle);

                        nodo = new NodoGrafoMapa(contadorDeNodos, calle.getId(), calle.getX() + 13, calle.getY() + 13, 5, 5, true, matrizLetrasElementosInternosCuadriculaMapa[x][y]);
                        frame.agregarNodoALista(nodo);
                        contadorDeNodos++;
                        nodo = new NodoGrafoMapa(contadorDeNodos, calle.getId(), calle.getX() + 36, calle.getY() + 13, 5, 5, true, matrizLetrasElementosInternosCuadriculaMapa[x][y]);
                        frame.agregarNodoALista(nodo);
                        contadorDeNodos++;
                        nodo = new NodoGrafoMapa(contadorDeNodos, calle.getId(), calle.getX() + 13, calle.getY() + 36, 5, 5, true, matrizLetrasElementosInternosCuadriculaMapa[x][y]);
                        frame.agregarNodoALista(nodo);
                        contadorDeNodos++;
                        nodo = new NodoGrafoMapa(contadorDeNodos, calle.getId(), calle.getX() + 36, calle.getY() + 36, 5, 5, true, matrizLetrasElementosInternosCuadriculaMapa[x][y]);
                        frame.agregarNodoALista(nodo);
                        contadorDeNodos++;
                        contadorDeCalles++;

                    }
                    if ("Carretera".equals(calle.getTipo())) {
                        calle.setVelocidad(100);
                        calle.setId(contadorDeCalles);
                        matrizLetrasElementosInternosCuadriculaMapa[x][y] = "XX";
                        matrizCuadriculaMapaIdCalles[x][y] = calle.getId();
                        frame.agregarCalleALaLista(calle);

                        nodo = new NodoGrafoMapa(contadorDeNodos, calle.getId(), calle.getX() + 13, calle.getY() + 13, 5, 5, true, matrizLetrasElementosInternosCuadriculaMapa[x][y]);
                        frame.agregarNodoALista(nodo);
                        contadorDeNodos++;
                        nodo = new NodoGrafoMapa(contadorDeNodos, calle.getId(), calle.getX() + 36, calle.getY() + 13, 5, 5, true, matrizLetrasElementosInternosCuadriculaMapa[x][y]);
                        frame.agregarNodoALista(nodo);
                        contadorDeNodos++;
                        nodo = new NodoGrafoMapa(contadorDeNodos, calle.getId(), calle.getX() + 13, calle.getY() + 36, 5, 5, true, matrizLetrasElementosInternosCuadriculaMapa[x][y]);
                        frame.agregarNodoALista(nodo);
                        contadorDeNodos++;
                        nodo = new NodoGrafoMapa(contadorDeNodos, calle.getId(), calle.getX() + 36, calle.getY() + 36, 5, 5, true, matrizLetrasElementosInternosCuadriculaMapa[x][y]);
                        frame.agregarNodoALista(nodo);
                        contadorDeNodos++;
                        contadorDeCalles++;
                    }
                }

                esPrimeraCalle = false;
            } else {
                ////hacer validaciones con el condicional del txt almacenado en los documentos.. tener en cuenta las direcciones
                if ("horizontal".equals(this.orientacion)) {
                    if ("Urbana".equals(calle.getTipo())) {
                        calle.setVelocidad(60);
                        if ("Derecha".equals(calle.getSentido())) {
                            if ("R".equals(matrizLetrasElementosInternosCuadriculaMapa[x + 1][y]) || "r".equals(matrizLetrasElementosInternosCuadriculaMapa[x + 1][y])
                                    || "xULR".equals(matrizLetrasElementosInternosCuadriculaMapa[x + 1][y]) || "xDLR".equals(matrizLetrasElementosInternosCuadriculaMapa[x + 1][y])
                                    || "xx".equals(matrizLetrasElementosInternosCuadriculaMapa[x + 1][y]) || "XULR".equals(matrizLetrasElementosInternosCuadriculaMapa[x + 1][y])
                                    || "XDLR".equals(matrizLetrasElementosInternosCuadriculaMapa[x + 1][y]) || "XX".equals(matrizLetrasElementosInternosCuadriculaMapa[x + 1][y])
                                    || "R".equals(matrizLetrasElementosInternosCuadriculaMapa[x - 1][y]) || "r".equals(matrizLetrasElementosInternosCuadriculaMapa[x - 1][y])
                                    || "xURR".equals(matrizLetrasElementosInternosCuadriculaMapa[x - 1][y]) || "xDRR".equals(matrizLetrasElementosInternosCuadriculaMapa[x - 1][y])
                                    || "XURR".equals(matrizLetrasElementosInternosCuadriculaMapa[x - 1][y]) || "XDRR".equals(matrizLetrasElementosInternosCuadriculaMapa[x - 1][y])
                                    || "xx".equals(matrizLetrasElementosInternosCuadriculaMapa[x - 1][y]) || "XX".equals(matrizLetrasElementosInternosCuadriculaMapa[x - 1][y])) {
                                calle.setId(contadorDeCalles);
                                matrizLetrasElementosInternosCuadriculaMapa[x][y] = "r";
                                matrizCuadriculaMapaIdCalles[x][y] = calle.getId();
                                frame.agregarCalleALaLista(calle);
                                contadorDeCalles++;
                                nodo = new NodoGrafoMapa(contadorDeNodos, calle.getId(), calle.getX() + 13, calle.getY() + 36, 5, 5, true, matrizLetrasElementosInternosCuadriculaMapa[x][y]);
                                frame.agregarNodoALista(nodo);
                                contadorDeNodos++;
                            }

                        }
                        if ("Izquierda".equals(calle.getSentido())) {
                            if ("L".equals(matrizLetrasElementosInternosCuadriculaMapa[x + 1][y]) || "l".equals(matrizLetrasElementosInternosCuadriculaMapa[x + 1][y])
                                    || "xULL".equals(matrizLetrasElementosInternosCuadriculaMapa[x + 1][y]) || "xDLL".equals(matrizLetrasElementosInternosCuadriculaMapa[x + 1][y])
                                    || "xx".equals(matrizLetrasElementosInternosCuadriculaMapa[x + 1][y]) || "XULL".equals(matrizLetrasElementosInternosCuadriculaMapa[x + 1][y])
                                    || "XDLL".equals(matrizLetrasElementosInternosCuadriculaMapa[x + 1][y]) || "XX".equals(matrizLetrasElementosInternosCuadriculaMapa[x + 1][y])
                                    || "L".equals(matrizLetrasElementosInternosCuadriculaMapa[x - 1][y]) || "l".equals(matrizLetrasElementosInternosCuadriculaMapa[x - 1][y])
                                    || "xURL".equals(matrizLetrasElementosInternosCuadriculaMapa[x - 1][y]) || "xDRL".equals(matrizLetrasElementosInternosCuadriculaMapa[x - 1][y])
                                    || "XURL".equals(matrizLetrasElementosInternosCuadriculaMapa[x - 1][y]) || "XDRL".equals(matrizLetrasElementosInternosCuadriculaMapa[x - 1][y])
                                    || "xx".equals(matrizLetrasElementosInternosCuadriculaMapa[x - 1][y]) || "XX".equals(matrizLetrasElementosInternosCuadriculaMapa[x - 1][y])) {
                                calle.setId(contadorDeCalles);
                                matrizLetrasElementosInternosCuadriculaMapa[x][y] = "l";
                                matrizCuadriculaMapaIdCalles[x][y] = calle.getId();
                                frame.agregarCalleALaLista(calle);
                                contadorDeCalles++;
                                nodo = new NodoGrafoMapa(contadorDeNodos, calle.getId(), calle.getX() + 13, calle.getY() + 13, 5, 5, true, matrizLetrasElementosInternosCuadriculaMapa[x][y]);
                                frame.agregarNodoALista(nodo);
                                contadorDeNodos++;
                            }
                        }
                        if ("Doble sentido".equals(calle.getSentido())) {
                            if ("H".equals(matrizLetrasElementosInternosCuadriculaMapa[x + 1][y]) || "h".equals(matrizLetrasElementosInternosCuadriculaMapa[x + 1][y])
                                    || "xUL".equals(matrizLetrasElementosInternosCuadriculaMapa[x + 1][y]) || "xDL".equals(matrizLetrasElementosInternosCuadriculaMapa[x + 1][y])
                                    || "xx".equals(matrizLetrasElementosInternosCuadriculaMapa[x + 1][y]) || "XUL".equals(matrizLetrasElementosInternosCuadriculaMapa[x + 1][y])
                                    || "XDL".equals(matrizLetrasElementosInternosCuadriculaMapa[x + 1][y]) || "XX".equals(matrizLetrasElementosInternosCuadriculaMapa[x + 1][y])
                                    || "H".equals(matrizLetrasElementosInternosCuadriculaMapa[x - 1][y]) || "h".equals(matrizLetrasElementosInternosCuadriculaMapa[x - 1][y])
                                    || "xUR".equals(matrizLetrasElementosInternosCuadriculaMapa[x - 1][y]) || "xDR".equals(matrizLetrasElementosInternosCuadriculaMapa[x - 1][y])
                                    || "XUR".equals(matrizLetrasElementosInternosCuadriculaMapa[x - 1][y]) || "XDR".equals(matrizLetrasElementosInternosCuadriculaMapa[x - 1][y])
                                    || "xx".equals(matrizLetrasElementosInternosCuadriculaMapa[x - 1][y]) || "XX".equals(matrizLetrasElementosInternosCuadriculaMapa[x - 1][y])) {
                                calle.setId(contadorDeCalles);
                                matrizLetrasElementosInternosCuadriculaMapa[x][y] = "h";
                                matrizCuadriculaMapaIdCalles[x][y] = calle.getId();
                                frame.agregarCalleALaLista(calle);
                                contadorDeCalles++;
                                nodo = new NodoGrafoMapa(contadorDeNodos, calle.getId(), calle.getX() + 13, calle.getY() + 13, 5, 5, true, matrizLetrasElementosInternosCuadriculaMapa[x][y]);
                                frame.agregarNodoALista(nodo);
                                contadorDeNodos++;
                                nodo = new NodoGrafoMapa(contadorDeNodos, calle.getId(), calle.getX() + 13, calle.getY() + 36, 5, 5, true, matrizLetrasElementosInternosCuadriculaMapa[x][y]);
                                frame.agregarNodoALista(nodo);
                                contadorDeNodos++;
                            }
                        }
                    }

                    if ("Carretera".equals(calle.getTipo())) {
                        calle.setVelocidad(100);
                        if ("Derecha".equals(calle.getSentido())) {
                            if ("R".equals(matrizLetrasElementosInternosCuadriculaMapa[x + 1][y]) || "r".equals(matrizLetrasElementosInternosCuadriculaMapa[x + 1][y])
                                    || "xULR".equals(matrizLetrasElementosInternosCuadriculaMapa[x + 1][y]) || "xDLR".equals(matrizLetrasElementosInternosCuadriculaMapa[x + 1][y])
                                    || "xx".equals(matrizLetrasElementosInternosCuadriculaMapa[x + 1][y]) || "XULR".equals(matrizLetrasElementosInternosCuadriculaMapa[x + 1][y])
                                    || "XDLR".equals(matrizLetrasElementosInternosCuadriculaMapa[x + 1][y]) || "XX".equals(matrizLetrasElementosInternosCuadriculaMapa[x + 1][y])
                                    || "R".equals(matrizLetrasElementosInternosCuadriculaMapa[x - 1][y]) || "r".equals(matrizLetrasElementosInternosCuadriculaMapa[x - 1][y])
                                    || "xURR".equals(matrizLetrasElementosInternosCuadriculaMapa[x - 1][y]) || "xDRR".equals(matrizLetrasElementosInternosCuadriculaMapa[x - 1][y])
                                    || "XURR".equals(matrizLetrasElementosInternosCuadriculaMapa[x - 1][y]) || "XDRR".equals(matrizLetrasElementosInternosCuadriculaMapa[x - 1][y])
                                    || "xx".equals(matrizLetrasElementosInternosCuadriculaMapa[x - 1][y]) || "XX".equals(matrizLetrasElementosInternosCuadriculaMapa[x - 1][y])) {
                                calle.setId(contadorDeCalles);
                                matrizLetrasElementosInternosCuadriculaMapa[x][y] = "R";
                                matrizCuadriculaMapaIdCalles[x][y] = calle.getId();
                                frame.agregarCalleALaLista(calle);
                                contadorDeCalles++;
                                nodo = new NodoGrafoMapa(contadorDeNodos, calle.getId(), calle.getX() + 13, calle.getY() + 36, 5, 5, true, matrizLetrasElementosInternosCuadriculaMapa[x][y]);
                                frame.agregarNodoALista(nodo);
                                contadorDeNodos++;
                            }
                        }
                        if ("Izquierda".equals(calle.getSentido())) {
                            if ("L".equals(matrizLetrasElementosInternosCuadriculaMapa[x + 1][y]) || "l".equals(matrizLetrasElementosInternosCuadriculaMapa[x + 1][y])
                                    || "xULL".equals(matrizLetrasElementosInternosCuadriculaMapa[x + 1][y]) || "xDLL".equals(matrizLetrasElementosInternosCuadriculaMapa[x + 1][y])
                                    || "xx".equals(matrizLetrasElementosInternosCuadriculaMapa[x + 1][y]) || "XULL".equals(matrizLetrasElementosInternosCuadriculaMapa[x + 1][y])
                                    || "XDLL".equals(matrizLetrasElementosInternosCuadriculaMapa[x + 1][y]) || "XX".equals(matrizLetrasElementosInternosCuadriculaMapa[x + 1][y])
                                    || "L".equals(matrizLetrasElementosInternosCuadriculaMapa[x - 1][y]) || "l".equals(matrizLetrasElementosInternosCuadriculaMapa[x - 1][y])
                                    || "xURL".equals(matrizLetrasElementosInternosCuadriculaMapa[x - 1][y]) || "xDRL".equals(matrizLetrasElementosInternosCuadriculaMapa[x - 1][y])
                                    || "XURL".equals(matrizLetrasElementosInternosCuadriculaMapa[x - 1][y]) || "XDRL".equals(matrizLetrasElementosInternosCuadriculaMapa[x - 1][y])
                                    || "xx".equals(matrizLetrasElementosInternosCuadriculaMapa[x - 1][y]) || "XX".equals(matrizLetrasElementosInternosCuadriculaMapa[x - 1][y])) {
                                calle.setId(contadorDeCalles);
                                matrizLetrasElementosInternosCuadriculaMapa[x][y] = "L";
                                matrizCuadriculaMapaIdCalles[x][y] = calle.getId();
                                frame.agregarCalleALaLista(calle);
                                contadorDeCalles++;
                                nodo = new NodoGrafoMapa(contadorDeNodos, calle.getId(), calle.getX() + 13, calle.getY() + 13, 5, 5, true, matrizLetrasElementosInternosCuadriculaMapa[x][y]);
                                frame.agregarNodoALista(nodo);
                                contadorDeNodos++;
                            }
                        }
                        if ("Doble sentido".equals(calle.getSentido())) {
                            if ("H".equals(matrizLetrasElementosInternosCuadriculaMapa[x + 1][y]) || "h".equals(matrizLetrasElementosInternosCuadriculaMapa[x + 1][y])
                                    || "xUL".equals(matrizLetrasElementosInternosCuadriculaMapa[x + 1][y]) || "xDL".equals(matrizLetrasElementosInternosCuadriculaMapa[x + 1][y])
                                    || "xx".equals(matrizLetrasElementosInternosCuadriculaMapa[x + 1][y]) || "XUL".equals(matrizLetrasElementosInternosCuadriculaMapa[x + 1][y])
                                    || "XDL".equals(matrizLetrasElementosInternosCuadriculaMapa[x + 1][y]) || "XX".equals(matrizLetrasElementosInternosCuadriculaMapa[x + 1][y])
                                    || "H".equals(matrizLetrasElementosInternosCuadriculaMapa[x - 1][y]) || "h".equals(matrizLetrasElementosInternosCuadriculaMapa[x - 1][y])
                                    || "xUR".equals(matrizLetrasElementosInternosCuadriculaMapa[x - 1][y]) || "xDR".equals(matrizLetrasElementosInternosCuadriculaMapa[x - 1][y])
                                    || "XUR".equals(matrizLetrasElementosInternosCuadriculaMapa[x - 1][y]) || "XDR".equals(matrizLetrasElementosInternosCuadriculaMapa[x - 1][y])
                                    || "xx".equals(matrizLetrasElementosInternosCuadriculaMapa[x - 1][y]) || "XX".equals(matrizLetrasElementosInternosCuadriculaMapa[x - 1][y])) {
                                calle.setId(contadorDeCalles);
                                matrizLetrasElementosInternosCuadriculaMapa[x][y] = "H";
                                matrizCuadriculaMapaIdCalles[x][y] = calle.getId();
                                frame.agregarCalleALaLista(calle);
                                contadorDeCalles++;
                                nodo = new NodoGrafoMapa(contadorDeNodos, calle.getId(), calle.getX() + 13, calle.getY() + 13, 5, 5, true, matrizLetrasElementosInternosCuadriculaMapa[x][y]);
                                frame.agregarNodoALista(nodo);
                                contadorDeNodos++;
                                nodo = new NodoGrafoMapa(contadorDeNodos, calle.getId(), calle.getX() + 13, calle.getY() + 36, 5, 5, true, matrizLetrasElementosInternosCuadriculaMapa[x][y]);
                                frame.agregarNodoALista(nodo);
                                contadorDeNodos++;
                            }
                        }
                    }

                }

                if ("vertical".equals(this.orientacion)) {
                    if ("Urbana".equals(calle.getTipo())) {
                        calle.setVelocidad(60);
                        if ("Arriba".equals(calle.getSentido())) {
                            if ("t".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y + 1]) || "T".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y + 1])
                                    || "xURL".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y + 1]) || "xULR".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y + 1])
                                    || "XURL".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y + 1]) || "XULR".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y + 1])
                                    || "xx".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y + 1]) || "XX".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y + 1])
                                    || "t".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y - 1]) || "T".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y - 1])
                                    || "xDRR".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y - 1]) || "xDLL".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y - 1])
                                    || "XDRR".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y - 1]) || "XDLL".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y - 1])
                                    || "xx".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y - 1]) || "XX".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y - 1])) {

                                calle.setId(contadorDeCalles);
                                matrizLetrasElementosInternosCuadriculaMapa[x][y] = "t";
                                matrizCuadriculaMapaIdCalles[x][y] = calle.getId();
                                frame.agregarCalleALaLista(calle);
                                contadorDeCalles++;
                                nodo = new NodoGrafoMapa(contadorDeNodos, calle.getId(), calle.getX() + 36, calle.getY() + 13, 5, 5, true, matrizLetrasElementosInternosCuadriculaMapa[x][y]);
                                frame.agregarNodoALista(nodo);
                                contadorDeNodos++;
                            }

                        }
                        if ("Abajo".equals(calle.getSentido())) {
                            if ("d".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y + 1]) || "D".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y + 1])
                                    || "xURR".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y + 1]) || "xULL".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y + 1])
                                    || "XURR".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y + 1]) || "XULL".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y + 1])
                                    || "xx".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y + 1]) || "XX".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y + 1])
                                    || "d".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y - 1]) || "D".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y - 1])
                                    || "xDRL".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y - 1]) || "xDLR".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y - 1])
                                    || "XDRL".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y - 1]) || "XDLR".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y - 1])
                                    || "xx".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y - 1]) || "XX".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y - 1])) {

                                calle.setId(contadorDeCalles);
                                matrizLetrasElementosInternosCuadriculaMapa[x][y] = "d";
                                matrizCuadriculaMapaIdCalles[x][y] = calle.getId();
                                frame.agregarCalleALaLista(calle);
                                contadorDeCalles++;
                                nodo = new NodoGrafoMapa(contadorDeNodos, calle.getId(), calle.getX() + 13, calle.getY() + 13, 5, 5, true, matrizLetrasElementosInternosCuadriculaMapa[x][y]);
                                frame.agregarNodoALista(nodo);
                                contadorDeNodos++;
                            }
                        }
                        if ("Doble sentido".equals(calle.getSentido())) {
                            if ("v".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y + 1]) || "V".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y + 1])
                                    || "xUR".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y + 1]) || "xUL".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y + 1])
                                    || "XUR".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y + 1]) || "XUL".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y + 1])
                                    || "xx".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y + 1]) || "XX".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y + 1])
                                    || "v".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y - 1]) || "V".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y - 1])
                                    || "xDR".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y - 1]) || "xDL".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y - 1])
                                    || "XDR".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y - 1]) || "XDL".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y - 1])
                                    || "xx".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y - 1]) || "XX".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y - 1])) {

                                calle.setId(contadorDeCalles);
                                matrizLetrasElementosInternosCuadriculaMapa[x][y] = "v";
                                matrizCuadriculaMapaIdCalles[x][y] = calle.getId();
                                frame.agregarCalleALaLista(calle);
                                contadorDeCalles++;
                                nodo = new NodoGrafoMapa(contadorDeNodos, calle.getId(), calle.getX() + 36, calle.getY() + 13, 5, 5, true, matrizLetrasElementosInternosCuadriculaMapa[x][y]);
                                frame.agregarNodoALista(nodo);
                                contadorDeNodos++;
                                nodo = new NodoGrafoMapa(contadorDeNodos, calle.getId(), calle.getX() + 13, calle.getY() + 13, 5, 5, true, matrizLetrasElementosInternosCuadriculaMapa[x][y]);
                                frame.agregarNodoALista(nodo);
                                contadorDeNodos++;
                            }
                        }
                    }

                    if ("Carretera".equals(calle.getTipo())) {
                        calle.setVelocidad(100);
                        if ("Arriba".equals(calle.getSentido())) {
                            if ("t".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y + 1]) || "T".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y + 1])
                                    || "xURL".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y + 1]) || "xULR".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y + 1])
                                    || "XURL".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y + 1]) || "XULR".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y + 1])
                                    || "xx".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y + 1]) || "XX".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y + 1])
                                    || "t".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y - 1]) || "T".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y - 1])
                                    || "xDRR".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y - 1]) || "xDLL".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y - 1])
                                    || "XDRR".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y - 1]) || "XDLL".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y - 1])
                                    || "xx".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y - 1]) || "XX".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y - 1])) {

                                calle.setId(contadorDeCalles);
                                matrizLetrasElementosInternosCuadriculaMapa[x][y] = "T";
                                matrizCuadriculaMapaIdCalles[x][y] = calle.getId();
                                frame.agregarCalleALaLista(calle);
                                contadorDeCalles++;
                                nodo = new NodoGrafoMapa(contadorDeNodos, calle.getId(), calle.getX() + 36, calle.getY() + 13, 5, 5, true, matrizLetrasElementosInternosCuadriculaMapa[x][y]);
                                frame.agregarNodoALista(nodo);
                                contadorDeNodos++;
                            }

                        }
                        if ("Abajo".equals(calle.getSentido())) {
                            if ("d".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y + 1]) || "D".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y + 1])
                                    || "xURR".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y + 1]) || "xULL".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y + 1])
                                    || "XURR".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y + 1]) || "XULL".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y + 1])
                                    || "xx".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y + 1]) || "XX".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y + 1])
                                    || "d".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y - 1]) || "D".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y - 1])
                                    || "xDRL".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y - 1]) || "xDLR".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y - 1])
                                    || "XDRL".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y - 1]) || "XDLR".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y - 1])
                                    || "xx".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y - 1]) || "XX".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y - 1])) {

                                calle.setId(contadorDeCalles);
                                matrizLetrasElementosInternosCuadriculaMapa[x][y] = "D";
                                matrizCuadriculaMapaIdCalles[x][y] = calle.getId();
                                frame.agregarCalleALaLista(calle);
                                contadorDeCalles++;
                                nodo = new NodoGrafoMapa(contadorDeNodos, calle.getId(), calle.getX() + 13, calle.getY() + 13, 5, 5, true, matrizLetrasElementosInternosCuadriculaMapa[x][y]);
                                frame.agregarNodoALista(nodo);
                                contadorDeNodos++;
                            }
                        }
                        if ("Doble sentido".equals(calle.getSentido())) {
                            if ("v".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y + 1]) || "V".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y + 1])
                                    || "xUR".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y + 1]) || "xUL".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y + 1])
                                    || "XUR".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y + 1]) || "XUL".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y + 1])
                                    || "xx".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y + 1]) || "XX".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y + 1])
                                    || "v".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y - 1]) || "V".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y - 1])
                                    || "xDR".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y - 1]) || "xDL".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y - 1])
                                    || "XDR".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y - 1]) || "XDL".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y - 1])
                                    || "xx".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y - 1]) || "XX".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y - 1])) {

                                calle.setId(contadorDeCalles);
                                matrizLetrasElementosInternosCuadriculaMapa[x][y] = "V";
                                matrizCuadriculaMapaIdCalles[x][y] = calle.getId();
                                frame.agregarCalleALaLista(calle);
                                contadorDeCalles++;
                                nodo = new NodoGrafoMapa(contadorDeNodos, calle.getId(), calle.getX() + 36, calle.getY() + 13, 5, 5, true, matrizLetrasElementosInternosCuadriculaMapa[x][y]);
                                frame.agregarNodoALista(nodo);
                                contadorDeNodos++;
                                nodo = new NodoGrafoMapa(contadorDeNodos, calle.getId(), calle.getX() + 13, calle.getY() + 13, 5, 5, true, matrizLetrasElementosInternosCuadriculaMapa[x][y]);
                                frame.agregarNodoALista(nodo);
                                contadorDeNodos++;
                            }
                        }
                    }
                }
                if ("interseccionArribaDerecha".equals(this.orientacion)) {
                    if ("Urbana".equals(calle.getTipo())) {
                        calle.setVelocidad(60);
                        if ("Derecha".equals(calle.getSentido())) {
                            if ("r".equals(matrizLetrasElementosInternosCuadriculaMapa[x + 1][y]) || "R".equals(matrizLetrasElementosInternosCuadriculaMapa[x + 1][y])
                                    || "xx".equals(matrizLetrasElementosInternosCuadriculaMapa[x + 1][y]) || "XX".equals(matrizLetrasElementosInternosCuadriculaMapa[x + 1][y])
                                    || "xULR".equals(matrizLetrasElementosInternosCuadriculaMapa[x + 1][y]) || "XULR".equals(matrizLetrasElementosInternosCuadriculaMapa[x + 1][y])
                                    || "xDLR".equals(matrizLetrasElementosInternosCuadriculaMapa[x + 1][y]) || "XDLR".equals(matrizLetrasElementosInternosCuadriculaMapa[x + 1][y])
                                    || "d".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y - 1]) || "D".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y - 1])
                                    || "xx".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y - 1]) || "XX".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y - 1])
                                    || "xDLR".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y - 1]) || "XDLR".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y - 1])
                                    || "xDRL".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y - 1]) || "XDRL".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y - 1])) {

                                calle.setId(contadorDeCalles);
                                matrizLetrasElementosInternosCuadriculaMapa[x][y] = "xURR";
                                matrizCuadriculaMapaIdCalles[x][y] = calle.getId();
                                frame.agregarCalleALaLista(calle);
                                contadorDeCalles++;
                                nodo = new NodoGrafoMapa(contadorDeNodos, calle.getId(), calle.getX() + 13, calle.getY() + 36, 5, 5, true, matrizLetrasElementosInternosCuadriculaMapa[x][y]);
                                frame.agregarNodoALista(nodo);
                                contadorDeNodos++;

                            }
                        }
                        if ("Izquierda".equals(calle.getSentido())) {
                            if ("l".equals(matrizLetrasElementosInternosCuadriculaMapa[x + 1][y]) || "L".equals(matrizLetrasElementosInternosCuadriculaMapa[x + 1][y])
                                    || "xx".equals(matrizLetrasElementosInternosCuadriculaMapa[x + 1][y]) || "XX".equals(matrizLetrasElementosInternosCuadriculaMapa[x + 1][y])
                                    || "xULL".equals(matrizLetrasElementosInternosCuadriculaMapa[x + 1][y]) || "XULL".equals(matrizLetrasElementosInternosCuadriculaMapa[x + 1][y])
                                    || "xDLL".equals(matrizLetrasElementosInternosCuadriculaMapa[x + 1][y]) || "XDLL".equals(matrizLetrasElementosInternosCuadriculaMapa[x + 1][y])
                                    || "t".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y - 1]) || "T".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y - 1])
                                    || "xx".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y - 1]) || "XX".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y - 1])
                                    || "xDLR".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y - 1]) || "XDLR".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y - 1])
                                    || "xDRL".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y - 1]) || "XDRL".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y - 1])) {

                                calle.setId(contadorDeCalles);
                                matrizLetrasElementosInternosCuadriculaMapa[x][y] = "xURL";
                                matrizCuadriculaMapaIdCalles[x][y] = calle.getId();
                                frame.agregarCalleALaLista(calle);
                                contadorDeCalles++;
                                nodo = new NodoGrafoMapa(contadorDeNodos, calle.getId(), calle.getX() + 36, calle.getY() + 13, 5, 5, true, matrizLetrasElementosInternosCuadriculaMapa[x][y]);
                                frame.agregarNodoALista(nodo);
                                contadorDeNodos++;

                            }
                        }
                        if ("Doble sentido".equals(calle.getSentido())) {
                            if ("h".equals(matrizLetrasElementosInternosCuadriculaMapa[x + 1][y]) || "H".equals(matrizLetrasElementosInternosCuadriculaMapa[x + 1][y])
                                    || "xx".equals(matrizLetrasElementosInternosCuadriculaMapa[x + 1][y]) || "XX".equals(matrizLetrasElementosInternosCuadriculaMapa[x + 1][y])
                                    || "xUL".equals(matrizLetrasElementosInternosCuadriculaMapa[x + 1][y]) || "XUL".equals(matrizLetrasElementosInternosCuadriculaMapa[x + 1][y])
                                    || "xDL".equals(matrizLetrasElementosInternosCuadriculaMapa[x + 1][y]) || "XDL".equals(matrizLetrasElementosInternosCuadriculaMapa[x + 1][y])
                                    || "v".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y - 1]) || "V".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y - 1])
                                    || "xx".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y - 1]) || "XX".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y - 1])
                                    || "xDL".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y - 1]) || "XDL".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y - 1])
                                    || "xDR".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y - 1]) || "XDR".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y - 1])) {

                                calle.setId(contadorDeCalles);
                                matrizLetrasElementosInternosCuadriculaMapa[x][y] = "xUR";
                                matrizCuadriculaMapaIdCalles[x][y] = calle.getId();
                                frame.agregarCalleALaLista(calle);
                                contadorDeCalles++;
                                nodo = new NodoGrafoMapa(contadorDeNodos, calle.getId(), calle.getX() + 36, calle.getY() + 13, 5, 5, true, matrizLetrasElementosInternosCuadriculaMapa[x][y]);
                                frame.agregarNodoALista(nodo);
                                contadorDeNodos++;
                                nodo = new NodoGrafoMapa(contadorDeNodos, calle.getId(), calle.getX() + 13, calle.getY() + 36, 5, 5, true, matrizLetrasElementosInternosCuadriculaMapa[x][y]);
                                frame.agregarNodoALista(nodo);
                                contadorDeNodos++;
                            }
                        }
                    }
                    if ("Carretera".equals(calle.getTipo())) {
                        calle.setVelocidad(100);
                        if ("Derecha".equals(calle.getSentido())) {
                            if ("r".equals(matrizLetrasElementosInternosCuadriculaMapa[x + 1][y]) || "R".equals(matrizLetrasElementosInternosCuadriculaMapa[x + 1][y])
                                    || "xx".equals(matrizLetrasElementosInternosCuadriculaMapa[x + 1][y]) || "XX".equals(matrizLetrasElementosInternosCuadriculaMapa[x + 1][y])
                                    || "xULR".equals(matrizLetrasElementosInternosCuadriculaMapa[x + 1][y]) || "XULR".equals(matrizLetrasElementosInternosCuadriculaMapa[x + 1][y])
                                    || "xDLR".equals(matrizLetrasElementosInternosCuadriculaMapa[x + 1][y]) || "XDLR".equals(matrizLetrasElementosInternosCuadriculaMapa[x + 1][y])
                                    || "d".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y - 1]) || "D".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y - 1])
                                    || "xx".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y - 1]) || "XX".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y - 1])
                                    || "xDLR".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y - 1]) || "XDLR".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y - 1])
                                    || "xDRL".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y - 1]) || "XDRL".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y - 1])) {

                                calle.setId(contadorDeCalles);
                                matrizLetrasElementosInternosCuadriculaMapa[x][y] = "XURR";
                                matrizCuadriculaMapaIdCalles[x][y] = calle.getId();
                                frame.agregarCalleALaLista(calle);
                                contadorDeCalles++;
                                nodo = new NodoGrafoMapa(contadorDeNodos, calle.getId(), calle.getX() + 13, calle.getY() + 36, 5, 5, true, matrizLetrasElementosInternosCuadriculaMapa[x][y]);
                                frame.agregarNodoALista(nodo);
                                contadorDeNodos++;

                            }
                        }
                        if ("Izquierda".equals(calle.getSentido())) {
                            if ("l".equals(matrizLetrasElementosInternosCuadriculaMapa[x + 1][y]) || "L".equals(matrizLetrasElementosInternosCuadriculaMapa[x + 1][y])
                                    || "xx".equals(matrizLetrasElementosInternosCuadriculaMapa[x + 1][y]) || "XX".equals(matrizLetrasElementosInternosCuadriculaMapa[x + 1][y])
                                    || "xULL".equals(matrizLetrasElementosInternosCuadriculaMapa[x + 1][y]) || "XULL".equals(matrizLetrasElementosInternosCuadriculaMapa[x + 1][y])
                                    || "xDLL".equals(matrizLetrasElementosInternosCuadriculaMapa[x + 1][y]) || "XDLL".equals(matrizLetrasElementosInternosCuadriculaMapa[x + 1][y])
                                    || "t".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y - 1]) || "T".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y - 1])
                                    || "xx".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y - 1]) || "XX".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y - 1])
                                    || "xDLR".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y - 1]) || "XDLR".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y - 1])
                                    || "xDRL".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y - 1]) || "XDRL".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y - 1])) {

                                calle.setId(contadorDeCalles);
                                matrizLetrasElementosInternosCuadriculaMapa[x][y] = "XURL";
                                matrizCuadriculaMapaIdCalles[x][y] = calle.getId();
                                frame.agregarCalleALaLista(calle);
                                contadorDeCalles++;
                                nodo = new NodoGrafoMapa(contadorDeNodos, calle.getId(), calle.getX() + 36, calle.getY() + 13, 5, 5, true, matrizLetrasElementosInternosCuadriculaMapa[x][y]);
                                frame.agregarNodoALista(nodo);
                                contadorDeNodos++;

                            }
                        }
                        if ("Doble sentido".equals(calle.getSentido())) {
                            if ("h".equals(matrizLetrasElementosInternosCuadriculaMapa[x + 1][y]) || "H".equals(matrizLetrasElementosInternosCuadriculaMapa[x + 1][y])
                                    || "xx".equals(matrizLetrasElementosInternosCuadriculaMapa[x + 1][y]) || "XX".equals(matrizLetrasElementosInternosCuadriculaMapa[x + 1][y])
                                    || "xUL".equals(matrizLetrasElementosInternosCuadriculaMapa[x + 1][y]) || "XUL".equals(matrizLetrasElementosInternosCuadriculaMapa[x + 1][y])
                                    || "xDL".equals(matrizLetrasElementosInternosCuadriculaMapa[x + 1][y]) || "XDL".equals(matrizLetrasElementosInternosCuadriculaMapa[x + 1][y])
                                    || "v".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y - 1]) || "V".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y - 1])
                                    || "xx".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y - 1]) || "XX".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y - 1])
                                    || "xDL".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y - 1]) || "XDL".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y - 1])
                                    || "xDR".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y - 1]) || "XDR".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y - 1])) {

                                calle.setId(contadorDeCalles);
                                matrizLetrasElementosInternosCuadriculaMapa[x][y] = "XUR";
                                matrizCuadriculaMapaIdCalles[x][y] = calle.getId();
                                frame.agregarCalleALaLista(calle);
                                contadorDeCalles++;
                                nodo = new NodoGrafoMapa(contadorDeNodos, calle.getId(), calle.getX() + 13, calle.getY() + 36, 5, 5, true, matrizLetrasElementosInternosCuadriculaMapa[x][y]);
                                frame.agregarNodoALista(nodo);
                                contadorDeNodos++;
                                nodo = new NodoGrafoMapa(contadorDeNodos, calle.getId(), calle.getX() + 36, calle.getY() + 13, 5, 5, true, matrizLetrasElementosInternosCuadriculaMapa[x][y]);
                                frame.agregarNodoALista(nodo);
                                contadorDeNodos++;
                            }
                        }
                    }
                }
                if ("interseccionAbajoDerecha".equals(this.orientacion)) {
                    if ("Urbana".equals(calle.getTipo())) {
                        calle.setVelocidad(60);
                        if ("Derecha".equals(calle.getSentido())) {
                            if ("r".equals(matrizLetrasElementosInternosCuadriculaMapa[x + 1][y]) || "R".equals(matrizLetrasElementosInternosCuadriculaMapa[x + 1][y])
                                    || "xx".equals(matrizLetrasElementosInternosCuadriculaMapa[x + 1][y]) || "XX".equals(matrizLetrasElementosInternosCuadriculaMapa[x + 1][y])
                                    || "xULR".equals(matrizLetrasElementosInternosCuadriculaMapa[x + 1][y]) || "XULR".equals(matrizLetrasElementosInternosCuadriculaMapa[x + 1][y])
                                    || "xDLR".equals(matrizLetrasElementosInternosCuadriculaMapa[x + 1][y]) || "XDLR".equals(matrizLetrasElementosInternosCuadriculaMapa[x + 1][y])
                                    || "t".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y + 1]) || "T".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y + 1])
                                    || "xx".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y + 1]) || "XX".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y + 1])
                                    || "xULR".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y + 1]) || "XULR".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y + 1])
                                    || "xURL".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y + 1]) || "XURL".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y + 1])) {

                                calle.setId(contadorDeCalles);
                                matrizLetrasElementosInternosCuadriculaMapa[x][y] = "xDRR";
                                matrizCuadriculaMapaIdCalles[x][y] = calle.getId();
                                frame.agregarCalleALaLista(calle);
                                contadorDeCalles++;
                                nodo = new NodoGrafoMapa(contadorDeNodos, calle.getId(), calle.getX() + 36, calle.getY() + 36, 5, 5, true, matrizLetrasElementosInternosCuadriculaMapa[x][y]);
                                frame.agregarNodoALista(nodo);
                                contadorDeNodos++;
                            }
                        }
                        if ("Izquierda".equals(calle.getSentido())) {
                            if ("l".equals(matrizLetrasElementosInternosCuadriculaMapa[x + 1][y]) || "L".equals(matrizLetrasElementosInternosCuadriculaMapa[x + 1][y])
                                    || "xx".equals(matrizLetrasElementosInternosCuadriculaMapa[x + 1][y]) || "XX".equals(matrizLetrasElementosInternosCuadriculaMapa[x + 1][y])
                                    || "xULL".equals(matrizLetrasElementosInternosCuadriculaMapa[x + 1][y]) || "XULL".equals(matrizLetrasElementosInternosCuadriculaMapa[x + 1][y])
                                    || "xDLL".equals(matrizLetrasElementosInternosCuadriculaMapa[x + 1][y]) || "XDLL".equals(matrizLetrasElementosInternosCuadriculaMapa[x + 1][y])
                                    || "d".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y + 1]) || "D".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y + 1])
                                    || "xx".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y + 1]) || "XX".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y + 1])
                                    || "xULL".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y + 1]) || "XULL".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y + 1])
                                    || "xURR".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y + 1]) || "XURR".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y + 1])) {

                                calle.setId(contadorDeCalles);
                                matrizLetrasElementosInternosCuadriculaMapa[x][y] = "xDRL";
                                matrizCuadriculaMapaIdCalles[x][y] = calle.getId();
                                frame.agregarCalleALaLista(calle);
                                contadorDeCalles++;
                                nodo = new NodoGrafoMapa(contadorDeNodos, calle.getId(), calle.getX() + 13, calle.getY() + 13, 5, 5, true, matrizLetrasElementosInternosCuadriculaMapa[x][y]);
                                frame.agregarNodoALista(nodo);
                                contadorDeNodos++;
                            }
                        }
                        if ("Doble sentido".equals(calle.getSentido())) {
                            if ("h".equals(matrizLetrasElementosInternosCuadriculaMapa[x + 1][y]) || "H".equals(matrizLetrasElementosInternosCuadriculaMapa[x + 1][y])
                                    || "xx".equals(matrizLetrasElementosInternosCuadriculaMapa[x + 1][y]) || "XX".equals(matrizLetrasElementosInternosCuadriculaMapa[x + 1][y])
                                    || "xUL".equals(matrizLetrasElementosInternosCuadriculaMapa[x + 1][y]) || "XUL".equals(matrizLetrasElementosInternosCuadriculaMapa[x + 1][y])
                                    || "xDL".equals(matrizLetrasElementosInternosCuadriculaMapa[x + 1][y]) || "XDL".equals(matrizLetrasElementosInternosCuadriculaMapa[x + 1][y])
                                    || "v".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y + 1]) || "V".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y + 1])
                                    || "xx".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y + 1]) || "XX".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y + 1])
                                    || "xUL".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y + 1]) || "XUL".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y + 1])
                                    || "xUR".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y + 1]) || "XUR".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y + 1])) {

                                calle.setId(contadorDeCalles);
                                matrizLetrasElementosInternosCuadriculaMapa[x][y] = "xDR";
                                matrizCuadriculaMapaIdCalles[x][y] = calle.getId();
                                frame.agregarCalleALaLista(calle);
                                contadorDeCalles++;
                                nodo = new NodoGrafoMapa(contadorDeNodos, calle.getId(), calle.getX() + 13, calle.getY() + 13, 5, 5, true, matrizLetrasElementosInternosCuadriculaMapa[x][y]);
                                frame.agregarNodoALista(nodo);
                                contadorDeNodos++;
                                nodo = new NodoGrafoMapa(contadorDeNodos, calle.getId(), calle.getX() + 36, calle.getY() + 36, 5, 5, true, matrizLetrasElementosInternosCuadriculaMapa[x][y]);
                                frame.agregarNodoALista(nodo);
                                contadorDeNodos++;
                            }
                        }
                    }
                    if ("Carretera".equals(calle.getTipo())) {
                        calle.setVelocidad(100);
                        if ("Derecha".equals(calle.getSentido())) {
                            if ("r".equals(matrizLetrasElementosInternosCuadriculaMapa[x + 1][y]) || "R".equals(matrizLetrasElementosInternosCuadriculaMapa[x + 1][y])
                                    || "xx".equals(matrizLetrasElementosInternosCuadriculaMapa[x + 1][y]) || "XX".equals(matrizLetrasElementosInternosCuadriculaMapa[x + 1][y])
                                    || "xULR".equals(matrizLetrasElementosInternosCuadriculaMapa[x + 1][y]) || "XULR".equals(matrizLetrasElementosInternosCuadriculaMapa[x + 1][y])
                                    || "xDLR".equals(matrizLetrasElementosInternosCuadriculaMapa[x + 1][y]) || "XDLR".equals(matrizLetrasElementosInternosCuadriculaMapa[x + 1][y])
                                    || "t".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y + 1]) || "T".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y + 1])
                                    || "xx".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y + 1]) || "XX".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y + 1])
                                    || "xULR".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y + 1]) || "XULR".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y + 1])
                                    || "xURL".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y + 1]) || "XURL".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y + 1])) {

                                calle.setId(contadorDeCalles);
                                matrizLetrasElementosInternosCuadriculaMapa[x][y] = "XDRR";
                                matrizCuadriculaMapaIdCalles[x][y] = calle.getId();
                                frame.agregarCalleALaLista(calle);
                                contadorDeCalles++;
                                nodo = new NodoGrafoMapa(contadorDeNodos, calle.getId(), calle.getX() + 36, calle.getY() + 36, 5, 5, true, matrizLetrasElementosInternosCuadriculaMapa[x][y]);
                                frame.agregarNodoALista(nodo);
                                contadorDeNodos++;
                            }
                        }
                        if ("Izquierda".equals(calle.getSentido())) {
                            if ("l".equals(matrizLetrasElementosInternosCuadriculaMapa[x + 1][y]) || "L".equals(matrizLetrasElementosInternosCuadriculaMapa[x + 1][y])
                                    || "xx".equals(matrizLetrasElementosInternosCuadriculaMapa[x + 1][y]) || "XX".equals(matrizLetrasElementosInternosCuadriculaMapa[x + 1][y])
                                    || "xULL".equals(matrizLetrasElementosInternosCuadriculaMapa[x + 1][y]) || "XULL".equals(matrizLetrasElementosInternosCuadriculaMapa[x + 1][y])
                                    || "xDLL".equals(matrizLetrasElementosInternosCuadriculaMapa[x + 1][y]) || "XDLL".equals(matrizLetrasElementosInternosCuadriculaMapa[x + 1][y])
                                    || "t".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y + 1]) || "T".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y + 1])
                                    || "xx".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y + 1]) || "XX".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y + 1])
                                    || "xULL".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y + 1]) || "XULL".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y + 1])
                                    || "xURR".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y + 1]) || "XURR".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y + 1])) {

                                calle.setId(contadorDeCalles);
                                matrizLetrasElementosInternosCuadriculaMapa[x][y] = "XDRL";
                                matrizCuadriculaMapaIdCalles[x][y] = calle.getId();
                                frame.agregarCalleALaLista(calle);
                                contadorDeCalles++;
                                nodo = new NodoGrafoMapa(contadorDeNodos, calle.getId(), calle.getX() + 13, calle.getY() + 13, 5, 5, true, matrizLetrasElementosInternosCuadriculaMapa[x][y]);
                                frame.agregarNodoALista(nodo);
                                contadorDeNodos++;
                            }
                        }
                        if ("Doble sentido".equals(calle.getSentido())) {
                            if ("h".equals(matrizLetrasElementosInternosCuadriculaMapa[x + 1][y]) || "H".equals(matrizLetrasElementosInternosCuadriculaMapa[x + 1][y])
                                    || "xx".equals(matrizLetrasElementosInternosCuadriculaMapa[x + 1][y]) || "XX".equals(matrizLetrasElementosInternosCuadriculaMapa[x + 1][y])
                                    || "xUL".equals(matrizLetrasElementosInternosCuadriculaMapa[x + 1][y]) || "XUL".equals(matrizLetrasElementosInternosCuadriculaMapa[x + 1][y])
                                    || "xDL".equals(matrizLetrasElementosInternosCuadriculaMapa[x + 1][y]) || "XDL".equals(matrizLetrasElementosInternosCuadriculaMapa[x + 1][y])
                                    || "v".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y + 1]) || "V".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y + 1])
                                    || "xx".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y + 1]) || "XX".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y + 1])
                                    || "xUL".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y + 1]) || "XUL".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y + 1])
                                    || "xUR".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y + 1]) || "XUR".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y + 1])) {

                                calle.setId(contadorDeCalles);
                                matrizLetrasElementosInternosCuadriculaMapa[x][y] = "XDR";
                                matrizCuadriculaMapaIdCalles[x][y] = calle.getId();
                                frame.agregarCalleALaLista(calle);
                                contadorDeCalles++;
                                nodo = new NodoGrafoMapa(contadorDeNodos, calle.getId(), calle.getX() + 13, calle.getY() + 13, 5, 5, true, matrizLetrasElementosInternosCuadriculaMapa[x][y]);
                                frame.agregarNodoALista(nodo);
                                contadorDeNodos++;
                                nodo = new NodoGrafoMapa(contadorDeNodos, calle.getId(), calle.getX() + 36, calle.getY() + 36, 5, 5, true, matrizLetrasElementosInternosCuadriculaMapa[x][y]);
                                frame.agregarNodoALista(nodo);
                                contadorDeNodos++;
                            }
                        }
                    }
                }
                if ("interseccionArribaIzquierda".equals(this.orientacion)) {
                    if ("Urbana".equals(calle.getTipo())) {
                        calle.setVelocidad(60);
                        if ("Derecha".equals(calle.getSentido())) {
                            if ("r".equals(matrizLetrasElementosInternosCuadriculaMapa[x - 1][y]) || "R".equals(matrizLetrasElementosInternosCuadriculaMapa[x - 1][y])
                                    || "xx".equals(matrizLetrasElementosInternosCuadriculaMapa[x - 1][y]) || "XX".equals(matrizLetrasElementosInternosCuadriculaMapa[x - 1][y])
                                    || "xURR".equals(matrizLetrasElementosInternosCuadriculaMapa[x - 1][y]) || "XURR".equals(matrizLetrasElementosInternosCuadriculaMapa[x - 1][y])
                                    || "xDRR".equals(matrizLetrasElementosInternosCuadriculaMapa[x - 1][y]) || "XDRR".equals(matrizLetrasElementosInternosCuadriculaMapa[x - 1][y])
                                    || "t".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y - 1]) || "T".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y - 1])
                                    || "xx".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y - 1]) || "XX".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y - 1])
                                    || "xDLL".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y - 1]) || "XDLL".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y - 1])
                                    || "xDRR".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y - 1]) || "XDRR".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y - 1])) {

                                calle.setId(contadorDeCalles);
                                matrizLetrasElementosInternosCuadriculaMapa[x][y] = "xULR";
                                matrizCuadriculaMapaIdCalles[x][y] = calle.getId();
                                frame.agregarCalleALaLista(calle);
                                contadorDeCalles++;
                                nodo = new NodoGrafoMapa(contadorDeNodos, calle.getId(), calle.getX() + 36, calle.getY() + 36, 5, 5, true, matrizLetrasElementosInternosCuadriculaMapa[x][y]);
                                frame.agregarNodoALista(nodo);
                                contadorDeNodos++;
                            }
                        }
                        if ("Izquierda".equals(calle.getSentido())) {
                            if ("l".equals(matrizLetrasElementosInternosCuadriculaMapa[x - 1][y]) || "L".equals(matrizLetrasElementosInternosCuadriculaMapa[x - 1][y])
                                    || "xx".equals(matrizLetrasElementosInternosCuadriculaMapa[x - 1][y]) || "XX".equals(matrizLetrasElementosInternosCuadriculaMapa[x - 1][y])
                                    || "xURL".equals(matrizLetrasElementosInternosCuadriculaMapa[x - 1][y]) || "XURL".equals(matrizLetrasElementosInternosCuadriculaMapa[x - 1][y])
                                    || "xDRL".equals(matrizLetrasElementosInternosCuadriculaMapa[x - 1][y]) || "XDRL".equals(matrizLetrasElementosInternosCuadriculaMapa[x - 1][y])
                                    || "d".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y - 1]) || "D".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y - 1])
                                    || "xx".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y - 1]) || "XX".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y - 1])
                                    || "xDLR".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y - 1]) || "XDLR".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y - 1])
                                    || "xDRL".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y - 1]) || "XDRL".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y - 1])) {

                                calle.setId(contadorDeCalles);
                                matrizLetrasElementosInternosCuadriculaMapa[x][y] = "xULL";
                                matrizCuadriculaMapaIdCalles[x][y] = calle.getId();
                                frame.agregarCalleALaLista(calle);
                                contadorDeCalles++;
                                nodo = new NodoGrafoMapa(contadorDeNodos, calle.getId(), calle.getX() + 13, calle.getY() + 13, 5, 5, true, matrizLetrasElementosInternosCuadriculaMapa[x][y]);
                                frame.agregarNodoALista(nodo);
                                contadorDeNodos++;
                            }
                        }
                        if ("Doble sentido".equals(calle.getSentido())) {
                            if ("h".equals(matrizLetrasElementosInternosCuadriculaMapa[x - 1][y]) || "H".equals(matrizLetrasElementosInternosCuadriculaMapa[x - 1][y])
                                    || "xx".equals(matrizLetrasElementosInternosCuadriculaMapa[x - 1][y]) || "XX".equals(matrizLetrasElementosInternosCuadriculaMapa[x - 1][y])
                                    || "xUR".equals(matrizLetrasElementosInternosCuadriculaMapa[x - 1][y]) || "XUR".equals(matrizLetrasElementosInternosCuadriculaMapa[x - 1][y])
                                    || "xDR".equals(matrizLetrasElementosInternosCuadriculaMapa[x - 1][y]) || "XDR".equals(matrizLetrasElementosInternosCuadriculaMapa[x - 1][y])
                                    || "v".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y - 1]) || "V".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y - 1])
                                    || "xx".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y - 1]) || "XX".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y - 1])
                                    || "xDL".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y - 1]) || "XDL".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y - 1])
                                    || "xDR".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y - 1]) || "XDR".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y - 1])) {

                                calle.setId(contadorDeCalles);
                                matrizLetrasElementosInternosCuadriculaMapa[x][y] = "xUL";
                                matrizCuadriculaMapaIdCalles[x][y] = calle.getId();
                                frame.agregarCalleALaLista(calle);
                                contadorDeCalles++;
                                nodo = new NodoGrafoMapa(contadorDeNodos, calle.getId(), calle.getX() + 13, calle.getY() + 13, 5, 5, true, matrizLetrasElementosInternosCuadriculaMapa[x][y]);
                                frame.agregarNodoALista(nodo);
                                contadorDeNodos++;
                                nodo = new NodoGrafoMapa(contadorDeNodos, calle.getId(), calle.getX() + 36, calle.getY() + 36, 5, 5, true, matrizLetrasElementosInternosCuadriculaMapa[x][y]);
                                frame.agregarNodoALista(nodo);
                                contadorDeNodos++;
                            }
                        }
                    }
                    if ("Carretera".equals(calle.getTipo())) {
                        calle.setVelocidad(100);
                        if ("Derecha".equals(calle.getSentido())) {
                            if ("r".equals(matrizLetrasElementosInternosCuadriculaMapa[x - 1][y]) || "R".equals(matrizLetrasElementosInternosCuadriculaMapa[x - 1][y])
                                    || "xx".equals(matrizLetrasElementosInternosCuadriculaMapa[x - 1][y]) || "XX".equals(matrizLetrasElementosInternosCuadriculaMapa[x - 1][y])
                                    || "xURR".equals(matrizLetrasElementosInternosCuadriculaMapa[x - 1][y]) || "XURR".equals(matrizLetrasElementosInternosCuadriculaMapa[x - 1][y])
                                    || "xDRR".equals(matrizLetrasElementosInternosCuadriculaMapa[x - 1][y]) || "XDRR".equals(matrizLetrasElementosInternosCuadriculaMapa[x - 1][y])
                                    || "t".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y - 1]) || "T".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y - 1])
                                    || "xx".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y - 1]) || "XX".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y - 1])
                                    || "xDLL".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y - 1]) || "XDLL".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y - 1])
                                    || "xDRR".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y - 1]) || "XDRR".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y - 1])) {

                                calle.setId(contadorDeCalles);
                                matrizLetrasElementosInternosCuadriculaMapa[x][y] = "XULR";
                                matrizCuadriculaMapaIdCalles[x][y] = calle.getId();
                                frame.agregarCalleALaLista(calle);
                                contadorDeCalles++;
                                nodo = new NodoGrafoMapa(contadorDeNodos, calle.getId(), calle.getX() + 36, calle.getY() + 36, 5, 5, true, matrizLetrasElementosInternosCuadriculaMapa[x][y]);
                                frame.agregarNodoALista(nodo);
                                contadorDeNodos++;
                            }
                        }
                        if ("Izquierda".equals(calle.getSentido())) {
                            if ("l".equals(matrizLetrasElementosInternosCuadriculaMapa[x - 1][y]) || "L".equals(matrizLetrasElementosInternosCuadriculaMapa[x - 1][y])
                                    || "xx".equals(matrizLetrasElementosInternosCuadriculaMapa[x - 1][y]) || "XX".equals(matrizLetrasElementosInternosCuadriculaMapa[x - 1][y])
                                    || "xURL".equals(matrizLetrasElementosInternosCuadriculaMapa[x - 1][y]) || "XURL".equals(matrizLetrasElementosInternosCuadriculaMapa[x - 1][y])
                                    || "xDRL".equals(matrizLetrasElementosInternosCuadriculaMapa[x - 1][y]) || "XDRL".equals(matrizLetrasElementosInternosCuadriculaMapa[x - 1][y])
                                    || "d".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y - 1]) || "D".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y - 1])
                                    || "xx".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y - 1]) || "XX".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y - 1])
                                    || "xDLR".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y - 1]) || "XDLR".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y - 1])
                                    || "xDRL".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y - 1]) || "XDRL".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y - 1])) {

                                calle.setId(contadorDeCalles);
                                matrizLetrasElementosInternosCuadriculaMapa[x][y] = "XULL";
                                matrizCuadriculaMapaIdCalles[x][y] = calle.getId();
                                frame.agregarCalleALaLista(calle);
                                contadorDeCalles++;
                                nodo = new NodoGrafoMapa(contadorDeNodos, calle.getId(), calle.getX() + 13, calle.getY() + 13, 5, 5, true, matrizLetrasElementosInternosCuadriculaMapa[x][y]);
                                frame.agregarNodoALista(nodo);
                                contadorDeNodos++;
                            }
                        }
                        if ("Doble sentido".equals(calle.getSentido())) {
                            if ("h".equals(matrizLetrasElementosInternosCuadriculaMapa[x - 1][y]) || "H".equals(matrizLetrasElementosInternosCuadriculaMapa[x - 1][y])
                                    || "xx".equals(matrizLetrasElementosInternosCuadriculaMapa[x - 1][y]) || "XX".equals(matrizLetrasElementosInternosCuadriculaMapa[x - 1][y])
                                    || "xUR".equals(matrizLetrasElementosInternosCuadriculaMapa[x - 1][y]) || "XUR".equals(matrizLetrasElementosInternosCuadriculaMapa[x - 1][y])
                                    || "xDR".equals(matrizLetrasElementosInternosCuadriculaMapa[x - 1][y]) || "XDR".equals(matrizLetrasElementosInternosCuadriculaMapa[x - 1][y])
                                    || "v".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y - 1]) || "V".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y - 1])
                                    || "xx".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y - 1]) || "XX".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y - 1])
                                    || "xDL".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y - 1]) || "XDL".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y - 1])
                                    || "xDR".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y - 1]) || "XDR".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y - 1])) {

                                calle.setId(contadorDeCalles);
                                matrizLetrasElementosInternosCuadriculaMapa[x][y] = "XUL";
                                matrizCuadriculaMapaIdCalles[x][y] = calle.getId();
                                frame.agregarCalleALaLista(calle);
                                contadorDeCalles++;
                                nodo = new NodoGrafoMapa(contadorDeNodos, calle.getId(), calle.getX() + 13, calle.getY() + 13, 5, 5, true, matrizLetrasElementosInternosCuadriculaMapa[x][y]);
                                frame.agregarNodoALista(nodo);
                                contadorDeNodos++;
                                nodo = new NodoGrafoMapa(contadorDeNodos, calle.getId(), calle.getX() + 36, calle.getY() + 36, 5, 5, true, matrizLetrasElementosInternosCuadriculaMapa[x][y]);
                                frame.agregarNodoALista(nodo);
                                contadorDeNodos++;
                            }
                        }
                    }
                }
                if ("interseccionAbajoIzquierda".equals(this.orientacion)) {
                    if ("Urbana".equals(calle.getTipo())) {
                        calle.setVelocidad(60);
                        if ("Derecha".equals(calle.getSentido())) {
                            if ("r".equals(matrizLetrasElementosInternosCuadriculaMapa[x - 1][y]) || "R".equals(matrizLetrasElementosInternosCuadriculaMapa[x + 1][y])
                                    || "xx".equals(matrizLetrasElementosInternosCuadriculaMapa[x - 1][y]) || "XX".equals(matrizLetrasElementosInternosCuadriculaMapa[x + 1][y])
                                    || "xURR".equals(matrizLetrasElementosInternosCuadriculaMapa[x - 1][y]) || "XURR".equals(matrizLetrasElementosInternosCuadriculaMapa[x + 1][y])
                                    || "xDRR".equals(matrizLetrasElementosInternosCuadriculaMapa[x - 1][y]) || "XDRR".equals(matrizLetrasElementosInternosCuadriculaMapa[x + 1][y])
                                    || "d".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y + 1]) || "D".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y + 1])
                                    || "xx".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y + 1]) || "XX".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y + 1])
                                    || "xULL".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y + 1]) || "XULR".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y + 1])
                                    || "xURR".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y + 1]) || "XURL".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y + 1])) {

                                calle.setId(contadorDeCalles);
                                matrizLetrasElementosInternosCuadriculaMapa[x][y] = "xDLR";
                                matrizCuadriculaMapaIdCalles[x][y] = calle.getId();
                                frame.agregarCalleALaLista(calle);
                                contadorDeCalles++;
                                nodo = new NodoGrafoMapa(contadorDeNodos, calle.getId(), calle.getX() + 13, calle.getY() + 36, 5, 5, true, matrizLetrasElementosInternosCuadriculaMapa[x][y]);
                                frame.agregarNodoALista(nodo);
                                contadorDeNodos++;
                            }
                        }
                        if ("Izquierda".equals(calle.getSentido())) {
                            if ("l".equals(matrizLetrasElementosInternosCuadriculaMapa[x - 1][y]) || "L".equals(matrizLetrasElementosInternosCuadriculaMapa[x + 1][y])
                                    || "xx".equals(matrizLetrasElementosInternosCuadriculaMapa[x - 1][y]) || "XX".equals(matrizLetrasElementosInternosCuadriculaMapa[x + 1][y])
                                    || "xURL".equals(matrizLetrasElementosInternosCuadriculaMapa[x - 1][y]) || "XURL".equals(matrizLetrasElementosInternosCuadriculaMapa[x + 1][y])
                                    || "xDRL".equals(matrizLetrasElementosInternosCuadriculaMapa[x - 1][y]) || "XDRL".equals(matrizLetrasElementosInternosCuadriculaMapa[x + 1][y])
                                    || "t".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y + 1]) || "T".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y + 1])
                                    || "xx".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y + 1]) || "XX".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y + 1])
                                    || "xULR".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y + 1]) || "XULR".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y + 1])
                                    || "xURL".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y + 1]) || "XURL".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y + 1])) {

                                calle.setId(contadorDeCalles);
                                matrizLetrasElementosInternosCuadriculaMapa[x][y] = "xDLL";
                                matrizCuadriculaMapaIdCalles[x][y] = calle.getId();
                                frame.agregarCalleALaLista(calle);
                                contadorDeCalles++;
                                nodo = new NodoGrafoMapa(contadorDeNodos, calle.getId(), calle.getX() + 36, calle.getY() + 13, 5, 5, true, matrizLetrasElementosInternosCuadriculaMapa[x][y]);
                                frame.agregarNodoALista(nodo);
                                contadorDeNodos++;
                            }
                        }
                        if ("Doble sentido".equals(calle.getSentido())) {
                            if ("h".equals(matrizLetrasElementosInternosCuadriculaMapa[x - 1][y]) || "H".equals(matrizLetrasElementosInternosCuadriculaMapa[x + 1][y])
                                    || "xx".equals(matrizLetrasElementosInternosCuadriculaMapa[x - 1][y]) || "XX".equals(matrizLetrasElementosInternosCuadriculaMapa[x + 1][y])
                                    || "xUR".equals(matrizLetrasElementosInternosCuadriculaMapa[x - 1][y]) || "XUR".equals(matrizLetrasElementosInternosCuadriculaMapa[x + 1][y])
                                    || "xDR".equals(matrizLetrasElementosInternosCuadriculaMapa[x - 1][y]) || "XDR".equals(matrizLetrasElementosInternosCuadriculaMapa[x + 1][y])
                                    || "v".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y + 1]) || "V".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y + 1])
                                    || "xx".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y + 1]) || "XX".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y + 1])
                                    || "xUL".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y + 1]) || "XUL".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y + 1])
                                    || "xUR".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y + 1]) || "XUR".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y + 1])) {

                                calle.setId(contadorDeCalles);
                                matrizLetrasElementosInternosCuadriculaMapa[x][y] = "xDL";
                                matrizCuadriculaMapaIdCalles[x][y] = calle.getId();
                                frame.agregarCalleALaLista(calle);
                                contadorDeCalles++;
                                nodo = new NodoGrafoMapa(contadorDeNodos, calle.getId(), calle.getX() + 36, calle.getY() + 13, 5, 5, true, matrizLetrasElementosInternosCuadriculaMapa[x][y]);
                                frame.agregarNodoALista(nodo);
                                contadorDeNodos++;
                                nodo = new NodoGrafoMapa(contadorDeNodos, calle.getId(), calle.getX() + 13, calle.getY() + 36, 5, 5, true, matrizLetrasElementosInternosCuadriculaMapa[x][y]);
                                frame.agregarNodoALista(nodo);
                                contadorDeNodos++;
                            }
                        }
                    }
                    if ("Carretera".equals(calle.getTipo())) {
                        calle.setVelocidad(100);
                        if ("Derecha".equals(calle.getSentido())) {
                            if ("r".equals(matrizLetrasElementosInternosCuadriculaMapa[x - 1][y]) || "R".equals(matrizLetrasElementosInternosCuadriculaMapa[x + 1][y])
                                    || "xx".equals(matrizLetrasElementosInternosCuadriculaMapa[x - 1][y]) || "XX".equals(matrizLetrasElementosInternosCuadriculaMapa[x + 1][y])
                                    || "xURR".equals(matrizLetrasElementosInternosCuadriculaMapa[x - 1][y]) || "XURR".equals(matrizLetrasElementosInternosCuadriculaMapa[x + 1][y])
                                    || "xDRR".equals(matrizLetrasElementosInternosCuadriculaMapa[x - 1][y]) || "XDRR".equals(matrizLetrasElementosInternosCuadriculaMapa[x + 1][y])
                                    || "d".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y + 1]) || "D".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y + 1])
                                    || "xx".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y + 1]) || "XX".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y + 1])
                                    || "xULL".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y + 1]) || "XULR".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y + 1])
                                    || "xURR".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y + 1]) || "XURL".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y + 1])) {

                                calle.setId(contadorDeCalles);
                                matrizLetrasElementosInternosCuadriculaMapa[x][y] = "XDLR";
                                matrizCuadriculaMapaIdCalles[x][y] = calle.getId();
                                frame.agregarCalleALaLista(calle);
                                contadorDeCalles++;
                                nodo = new NodoGrafoMapa(contadorDeNodos, calle.getId(), calle.getX() + 13, calle.getY() + 36, 5, 5, true, matrizLetrasElementosInternosCuadriculaMapa[x][y]);
                                frame.agregarNodoALista(nodo);
                                contadorDeNodos++;
                            }
                        }
                        if ("Izquierda".equals(calle.getSentido())) {
                            if ("l".equals(matrizLetrasElementosInternosCuadriculaMapa[x - 1][y]) || "L".equals(matrizLetrasElementosInternosCuadriculaMapa[x + 1][y])
                                    || "xx".equals(matrizLetrasElementosInternosCuadriculaMapa[x - 1][y]) || "XX".equals(matrizLetrasElementosInternosCuadriculaMapa[x + 1][y])
                                    || "xURL".equals(matrizLetrasElementosInternosCuadriculaMapa[x - 1][y]) || "XURL".equals(matrizLetrasElementosInternosCuadriculaMapa[x + 1][y])
                                    || "xDRL".equals(matrizLetrasElementosInternosCuadriculaMapa[x - 1][y]) || "XDRL".equals(matrizLetrasElementosInternosCuadriculaMapa[x + 1][y])
                                    || "t".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y + 1]) || "T".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y + 1])
                                    || "xx".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y + 1]) || "XX".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y + 1])
                                    || "xULR".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y + 1]) || "XULR".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y + 1])
                                    || "xURL".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y + 1]) || "XURL".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y + 1])) {

                                calle.setId(contadorDeCalles);
                                matrizLetrasElementosInternosCuadriculaMapa[x][y] = "XDLL";
                                matrizCuadriculaMapaIdCalles[x][y] = calle.getId();
                                frame.agregarCalleALaLista(calle);
                                contadorDeCalles++;
                                nodo = new NodoGrafoMapa(contadorDeNodos, calle.getId(), calle.getX() + 36, calle.getY() + 13, 5, 5, true, matrizLetrasElementosInternosCuadriculaMapa[x][y]);
                                frame.agregarNodoALista(nodo);
                                contadorDeNodos++;
                            }
                        }
                        if ("Doble sentido".equals(calle.getSentido())) {
                            if ("h".equals(matrizLetrasElementosInternosCuadriculaMapa[x - 1][y]) || "H".equals(matrizLetrasElementosInternosCuadriculaMapa[x + 1][y])
                                    || "xx".equals(matrizLetrasElementosInternosCuadriculaMapa[x - 1][y]) || "XX".equals(matrizLetrasElementosInternosCuadriculaMapa[x + 1][y])
                                    || "xUR".equals(matrizLetrasElementosInternosCuadriculaMapa[x - 1][y]) || "XUR".equals(matrizLetrasElementosInternosCuadriculaMapa[x + 1][y])
                                    || "xDR".equals(matrizLetrasElementosInternosCuadriculaMapa[x - 1][y]) || "XDR".equals(matrizLetrasElementosInternosCuadriculaMapa[x + 1][y])
                                    || "v".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y + 1]) || "V".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y + 1])
                                    || "xx".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y + 1]) || "XX".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y + 1])
                                    || "xUL".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y + 1]) || "XUL".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y + 1])
                                    || "xUR".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y + 1]) || "XUR".equals(matrizLetrasElementosInternosCuadriculaMapa[x][y + 1])) {

                                calle.setId(contadorDeCalles);
                                matrizLetrasElementosInternosCuadriculaMapa[x][y] = "XDL";
                                matrizCuadriculaMapaIdCalles[x][y] = calle.getId();
                                frame.agregarCalleALaLista(calle);
                                contadorDeCalles++;
                                nodo = new NodoGrafoMapa(contadorDeNodos, calle.getId(), calle.getX() + 36, calle.getY() + 13, 5, 5, true, matrizLetrasElementosInternosCuadriculaMapa[x][y]);
                                frame.agregarNodoALista(nodo);
                                contadorDeNodos++;
                                nodo = new NodoGrafoMapa(contadorDeNodos, calle.getId(), calle.getX() + 13, calle.getY() + 36, 5, 5, true, matrizLetrasElementosInternosCuadriculaMapa[x][y]);
                                frame.agregarNodoALista(nodo);
                                contadorDeNodos++;
                            }
                        }
                    }
                }
                if ("interseccionCruzada".equals(this.orientacion)) {
                    if ("Urbana".equals(calle.getTipo())) {
                        calle.setVelocidad(60);
                        calle.setId(contadorDeCalles);
                        matrizLetrasElementosInternosCuadriculaMapa[x][y] = "xx";
                        matrizCuadriculaMapaIdCalles[x][y] = calle.getId();
                        frame.agregarCalleALaLista(calle);
                        nodo = new NodoGrafoMapa(contadorDeNodos, calle.getId(), calle.getX() + 13, calle.getY() + 13, 5, 5, true, matrizLetrasElementosInternosCuadriculaMapa[x][y]);
                        frame.agregarNodoALista(nodo);
                        contadorDeNodos++;
                        nodo = new NodoGrafoMapa(contadorDeNodos, calle.getId(), calle.getX() + 36, calle.getY() + 13, 5, 5, true, matrizLetrasElementosInternosCuadriculaMapa[x][y]);
                        frame.agregarNodoALista(nodo);
                        contadorDeNodos++;
                        nodo = new NodoGrafoMapa(contadorDeNodos, calle.getId(), calle.getX() + 13, calle.getY() + 36, 5, 5, true, matrizLetrasElementosInternosCuadriculaMapa[x][y]);
                        frame.agregarNodoALista(nodo);
                        contadorDeNodos++;
                        nodo = new NodoGrafoMapa(contadorDeNodos, calle.getId(), calle.getX() + 36, calle.getY() + 36, 5, 5, true, matrizLetrasElementosInternosCuadriculaMapa[x][y]);
                        frame.agregarNodoALista(nodo);
                        contadorDeNodos++;
                        contadorDeCalles++;
                    }
                    if ("Carretera".equals(calle.getTipo())) {
                        calle.setVelocidad(100);
                        calle.setId(contadorDeCalles);
                        matrizLetrasElementosInternosCuadriculaMapa[x][y] = "XX";
                        matrizCuadriculaMapaIdCalles[x][y] = calle.getId();
                        frame.agregarCalleALaLista(calle);
                        nodo = new NodoGrafoMapa(contadorDeNodos, calle.getId(), calle.getX() + 13, calle.getY() + 13, 5, 5, true, matrizLetrasElementosInternosCuadriculaMapa[x][y]);
                        frame.agregarNodoALista(nodo);
                        contadorDeNodos++;
                        nodo = new NodoGrafoMapa(contadorDeNodos, calle.getId(), calle.getX() + 36, calle.getY() + 13, 5, 5, true, matrizLetrasElementosInternosCuadriculaMapa[x][y]);
                        frame.agregarNodoALista(nodo);
                        contadorDeNodos++;
                        nodo = new NodoGrafoMapa(contadorDeNodos, calle.getId(), calle.getX() + 13, calle.getY() + 36, 5, 5, true, matrizLetrasElementosInternosCuadriculaMapa[x][y]);
                        frame.agregarNodoALista(nodo);
                        contadorDeNodos++;
                        nodo = new NodoGrafoMapa(contadorDeNodos, calle.getId(), calle.getX() + 36, calle.getY() + 36, 5, 5, true, matrizLetrasElementosInternosCuadriculaMapa[x][y]);
                        frame.agregarNodoALista(nodo);
                        contadorDeNodos++;
                        contadorDeCalles++;
                    }
                }
            }
        }
        frame.agregarNodosAlistaDeCalle(calle.getId());
        calle = null;
    }

    public void crearArbol(int x, int y) {
        if (y > 0 && y < 9 && x > 0 && x < 19) {

            if (matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("C")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("C")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("C")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("C")) {
                /// llamo metodo para graficar arbol
                arbol.setId(contadorDeArboles);
                arbol.setX((int) matrizPuntosLimitesCuadriculaMapa[x][y].getX1());
                arbol.setY((int) matrizPuntosLimitesCuadriculaMapa[x][y].getY1());

                matrizCuadriculaMapaIdArboles[x][y] = arbol.getId();
                matrizLetrasElementosInternosCuadriculaMapa[x][y] = "A";
                frame.agregarArbolALaLista(arbol);
                contadorDeArboles++;
            }
            if (matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("A")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("A")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("A")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("A")) {
                /// llamo metodo para graficar arbol
                arbol.setId(contadorDeArboles);
                arbol.setX((int) matrizPuntosLimitesCuadriculaMapa[x][y].getX1());
                arbol.setY((int) matrizPuntosLimitesCuadriculaMapa[x][y].getY1());

                matrizCuadriculaMapaIdArboles[x][y] = arbol.getId();
                matrizLetrasElementosInternosCuadriculaMapa[x][y] = "A";
                frame.agregarArbolALaLista(arbol);
                contadorDeArboles++;
            }
            if (matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("r")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("R")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("l")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("L")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("h")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("H")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("xURL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("XURL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("xULL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("XULL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("xDRR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("XDRR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("xDLR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("XDLR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("xURR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("XURR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("xULR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("XULR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("xDRL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("XDRL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("xDLL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("XDLL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("xUR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("XUR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("xUL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("XUL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("xDR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("XDR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("xDL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("XDL")) {
                /// llamo metodo para graficar arbol
                arbol.setId(contadorDeArboles);
                arbol.setX((int) matrizPuntosLimitesCuadriculaMapa[x][y].getX1());
                arbol.setY((int) matrizPuntosLimitesCuadriculaMapa[x][y].getY1());

                matrizCuadriculaMapaIdArboles[x][y] = arbol.getId();
                matrizLetrasElementosInternosCuadriculaMapa[x][y] = "A";
                frame.agregarArbolALaLista(arbol);
                contadorDeArboles++;
            }
            if (matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("r")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("R")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("l")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("L")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("h")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("H")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("xURL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("XURL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("xULL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("XULL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("xDRR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("XDRR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("xDLR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("XDLR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("xURR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("XURR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("xULR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("XULR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("xDRL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("XDRL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("xDLL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("XDLL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("xUR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("XUR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("xUL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("XUL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("xDR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("XDR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("xDL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("XDL")) {
                ///llamo metodo para graficar arbol
                arbol.setId(contadorDeArboles);
                arbol.setX((int) matrizPuntosLimitesCuadriculaMapa[x][y].getX1());
                arbol.setY((int) matrizPuntosLimitesCuadriculaMapa[x][y].getY1());

                matrizCuadriculaMapaIdArboles[x][y] = arbol.getId();
                matrizLetrasElementosInternosCuadriculaMapa[x][y] = "A";
                frame.agregarArbolALaLista(arbol);
                contadorDeArboles++;

            }
            if (matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("t")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("T")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("d")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("D")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("v")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("V")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("xURL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("XURL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("xDRL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("XDRL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("xDRR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("XDRR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("xDLR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("XDLR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("xURR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("XURR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("xULR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("XULR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("xDRL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("XDRL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("xDLL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("XDLL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("xUR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("XUR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("xUL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("XUL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("xDR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("XDR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("xDL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("XDL")) {
                ///llamo metodo para graficar arbol
                arbol.setId(contadorDeArboles);
                arbol.setX((int) matrizPuntosLimitesCuadriculaMapa[x][y].getX1());
                arbol.setY((int) matrizPuntosLimitesCuadriculaMapa[x][y].getY1());

                matrizCuadriculaMapaIdArboles[x][y] = arbol.getId();
                matrizLetrasElementosInternosCuadriculaMapa[x][y] = "A";
                frame.agregarArbolALaLista(arbol);
                contadorDeArboles++;
            }
            if (matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("t")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("T")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("d")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("D")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("v")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("V")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("xULL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("XULL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("xDLL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("XDLL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("xDRR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("XDRR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("xDLR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("XDLR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("xURR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("XURR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("xULR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("XULR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("xDRL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("XDRL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("xDLL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("XDLL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("xUR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("XUR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("xUL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("XUL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("xDR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("XDR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("xDL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("XDL")) {
                ///llamo metodo para graficar arbol
                arbol.setId(contadorDeArboles);
                arbol.setX((int) matrizPuntosLimitesCuadriculaMapa[x][y].getX1());
                arbol.setY((int) matrizPuntosLimitesCuadriculaMapa[x][y].getY1());

                matrizCuadriculaMapaIdArboles[x][y] = arbol.getId();
                matrizLetrasElementosInternosCuadriculaMapa[x][y] = "A";
                frame.agregarArbolALaLista(arbol);
                contadorDeArboles++;
            }
        }
        //uno para y-1 Listo
        if (y < 1 && x > 0 && x < 19) {
            if (matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("r")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("R")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("l")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("L")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("h")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("H")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("xURL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("XURL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("xULL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("XULL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("xDRR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("XDRR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("xDLR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("XDLR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("xURR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("XURR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("xULR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("XULR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("xDRL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("XDRL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("xDLL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("XDLL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("xUR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("XUR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("xUL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("XUL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("xDR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("XDR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("xDL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("XDL")) {
                /// llamo metodo para graficar arbol
                arbol.setId(contadorDeArboles);
                arbol.setX((int) matrizPuntosLimitesCuadriculaMapa[x][y].getX1());
                arbol.setY((int) matrizPuntosLimitesCuadriculaMapa[x][y].getY1());

                matrizCuadriculaMapaIdArboles[x][y] = arbol.getId();
                matrizLetrasElementosInternosCuadriculaMapa[x][y] = "A";
                frame.agregarArbolALaLista(arbol);
                contadorDeArboles++;
            }

            if (matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("t")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("T")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("d")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("D")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("v")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("V")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("xURL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("XURL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("xDRL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("XDRL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("xDRR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("XDRR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("xDLR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("XDLR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("xURR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("XURR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("xULR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("XULR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("xDRL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("XDRL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("xDLL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("XDLL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("xUR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("XUR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("xUL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("XUL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("xDR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("XDR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("xDL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("XDL")) {
                ///llamo metodo para graficar arbol
                arbol.setId(contadorDeArboles);
                arbol.setX((int) matrizPuntosLimitesCuadriculaMapa[x][y].getX1());
                arbol.setY((int) matrizPuntosLimitesCuadriculaMapa[x][y].getY1());

                matrizCuadriculaMapaIdArboles[x][y] = arbol.getId();
                matrizLetrasElementosInternosCuadriculaMapa[x][y] = "A";
                frame.agregarArbolALaLista(arbol);
                contadorDeArboles++;
            }
            if (matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("t")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("T")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("d")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("D")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("v")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("V")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("xULL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("XULL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("xDLL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("XDLL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("xDRR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("XDRR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("xDLR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("XDLR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("xURR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("XURR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("xULR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("XULR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("xDRL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("XDRL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("xDLL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("XDLL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("xUR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("XUR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("xUL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("XUL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("xDR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("XDR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("xDL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("XDL")) {
                ///llamo metodo para graficar arbol
                arbol.setId(contadorDeArboles);
                arbol.setX((int) matrizPuntosLimitesCuadriculaMapa[x][y].getX1());
                arbol.setY((int) matrizPuntosLimitesCuadriculaMapa[x][y].getY1());

                matrizCuadriculaMapaIdArboles[x][y] = arbol.getId();
                matrizLetrasElementosInternosCuadriculaMapa[x][y] = "A";
                frame.agregarArbolALaLista(arbol);
                contadorDeArboles++;
            }
        }

        //dos para y+1 listo 
        if (y > 8 && x > 0 && x < 19) {
            if (matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("r")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("R")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("l")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("L")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("h")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("H")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("xURL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("XURL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("xULL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("XULL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("xDRR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("XDRR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("xDLR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("XDLR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("xURR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("XURR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("xULR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("XULR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("xDRL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("XDRL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("xDLL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("XDLL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("xUR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("XUR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("xUL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("XUL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("xDR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("XDR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("xDL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("XDL")) {
                ///llamo metodo para graficar arbol
                arbol.setId(contadorDeArboles);
                arbol.setX((int) matrizPuntosLimitesCuadriculaMapa[x][y].getX1());
                arbol.setY((int) matrizPuntosLimitesCuadriculaMapa[x][y].getY1());

                matrizCuadriculaMapaIdArboles[x][y] = arbol.getId();
                matrizLetrasElementosInternosCuadriculaMapa[x][y] = "A";
                frame.agregarArbolALaLista(arbol);
                contadorDeArboles++;

            }
            if (matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("t")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("T")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("d")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("D")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("v")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("V")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("xURL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("XURL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("xDRL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("XDRL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("xDRR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("XDRR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("xDLR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("XDLR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("xURR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("XURR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("xULR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("XULR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("xDRL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("XDRL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("xDLL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("XDLL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("xUR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("XUR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("xUL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("XUL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("xDR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("XDR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("xDL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("XDL")) {
                ///llamo metodo para graficar arbol
                arbol.setId(contadorDeArboles);
                arbol.setX((int) matrizPuntosLimitesCuadriculaMapa[x][y].getX1());
                arbol.setY((int) matrizPuntosLimitesCuadriculaMapa[x][y].getY1());

                matrizCuadriculaMapaIdArboles[x][y] = arbol.getId();
                matrizLetrasElementosInternosCuadriculaMapa[x][y] = "A";
                frame.agregarArbolALaLista(arbol);
                contadorDeArboles++;
            }
            if (matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("t")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("T")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("d")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("D")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("v")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("V")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("xULL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("XULL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("xDLL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("XDLL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("xDRR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("XDRR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("xDLR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("XDLR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("xURR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("XURR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("xULR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("XULR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("xDRL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("XDRL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("xDLL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("XDLL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("xUR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("XUR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("xUL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("XUL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("xDR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("XDR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("xDL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("XDL")) {
                ///llamo metodo para graficar arbol
                arbol.setId(contadorDeArboles);
                arbol.setX((int) matrizPuntosLimitesCuadriculaMapa[x][y].getX1());
                arbol.setY((int) matrizPuntosLimitesCuadriculaMapa[x][y].getY1());

                matrizCuadriculaMapaIdArboles[x][y] = arbol.getId();
                matrizLetrasElementosInternosCuadriculaMapa[x][y] = "A";
                frame.agregarArbolALaLista(arbol);
                contadorDeArboles++;
            }
        }

        //tres para x+1 listo 
        if (x > 18 && y > 0 && y < 9) {
            if (matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("r")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("R")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("l")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("L")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("h")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("H")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("xURL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("XURL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("xULL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("XULL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("xDRR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("XDRR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("xDLR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("XDLR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("xURR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("XURR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("xULR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("XULR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("xDRL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("XDRL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("xDLL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("XDLL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("xUR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("XUR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("xUL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("XUL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("xDR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("XDR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("xDL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("XDL")) {
                /// llamo metodo para graficar arbol
                arbol.setId(contadorDeArboles);
                arbol.setX((int) matrizPuntosLimitesCuadriculaMapa[x][y].getX1());
                arbol.setY((int) matrizPuntosLimitesCuadriculaMapa[x][y].getY1());

                matrizCuadriculaMapaIdArboles[x][y] = arbol.getId();
                matrizLetrasElementosInternosCuadriculaMapa[x][y] = "A";
                frame.agregarArbolALaLista(arbol);
                contadorDeArboles++;
            }
            if (matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("r")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("R")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("l")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("L")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("h")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("H")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("xURL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("XURL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("xULL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("XULL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("xDRR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("XDRR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("xDLR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("XDLR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("xURR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("XURR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("xULR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("XULR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("xDRL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("XDRL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("xDLL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("XDLL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("xUR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("XUR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("xUL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("XUL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("xDR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("XDR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("xDL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("XDL")) {
                ///llamo metodo para graficar arbol
                arbol.setId(contadorDeArboles);
                arbol.setX((int) matrizPuntosLimitesCuadriculaMapa[x][y].getX1());
                arbol.setY((int) matrizPuntosLimitesCuadriculaMapa[x][y].getY1());

                matrizCuadriculaMapaIdArboles[x][y] = arbol.getId();
                matrizLetrasElementosInternosCuadriculaMapa[x][y] = "A";
                frame.agregarArbolALaLista(arbol);
                contadorDeArboles++;

            }
            if (matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("t")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("T")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("d")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("D")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("v")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("V")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("xULL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("XULL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("xDLL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("XDLL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("xDRR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("XDRR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("xDLR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("XDLR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("xURR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("XURR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("xULR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("XULR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("xDRL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("XDRL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("xDLL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("XDLL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("xUR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("XUR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("xUL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("XUL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("xDR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("XDR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("xDL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("XDL")) {
                ///llamo metodo para graficar arbol
                arbol.setId(contadorDeArboles);
                arbol.setX((int) matrizPuntosLimitesCuadriculaMapa[x][y].getX1());
                arbol.setY((int) matrizPuntosLimitesCuadriculaMapa[x][y].getY1());

                matrizCuadriculaMapaIdArboles[x][y] = arbol.getId();
                matrizLetrasElementosInternosCuadriculaMapa[x][y] = "A";
                frame.agregarArbolALaLista(arbol);
                contadorDeArboles++;
            }
        }
        //cuatro para x-1 listo
        if (x < 1 && y > 0 && y < 9) {
            if (matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("r")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("R")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("l")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("L")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("h")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("H")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("xURL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("XURL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("xULL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("XULL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("xDRR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("XDRR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("xDLR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("XDLR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("xURR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("XURR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("xULR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("XULR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("xDRL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("XDRL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("xDLL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("XDLL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("xUR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("XUR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("xUL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("XUL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("xDR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("XDR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("xDL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("XDL")) {
                /// llamo metodo para graficar arbol
                arbol.setId(contadorDeArboles);
                arbol.setX((int) matrizPuntosLimitesCuadriculaMapa[x][y].getX1());
                arbol.setY((int) matrizPuntosLimitesCuadriculaMapa[x][y].getY1());

                matrizCuadriculaMapaIdArboles[x][y] = arbol.getId();
                matrizLetrasElementosInternosCuadriculaMapa[x][y] = "A";
                frame.agregarArbolALaLista(arbol);
                contadorDeArboles++;
            }
            if (matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("r")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("R")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("l")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("L")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("h")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("H")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("xURL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("XURL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("xULL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("XULL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("xDRR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("XDRR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("xDLR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("XDLR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("xURR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("XURR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("xULR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("XULR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("xDRL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("XDRL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("xDLL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("XDLL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("xUR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("XUR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("xUL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("XUL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("xDR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("XDR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("xDL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("XDL")) {
                ///llamo metodo para graficar arbol
                arbol.setId(contadorDeArboles);
                arbol.setX((int) matrizPuntosLimitesCuadriculaMapa[x][y].getX1());
                arbol.setY((int) matrizPuntosLimitesCuadriculaMapa[x][y].getY1());

                matrizCuadriculaMapaIdArboles[x][y] = arbol.getId();
                matrizLetrasElementosInternosCuadriculaMapa[x][y] = "A";
                frame.agregarArbolALaLista(arbol);
                contadorDeArboles++;

            }
            if (matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("t")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("T")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("d")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("D")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("v")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("V")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("xURL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("XURL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("xDRL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("XDRL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("xDRR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("XDRR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("xDLR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("XDLR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("xURR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("XURR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("xULR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("XULR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("xDRL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("XDRL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("xDLL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("XDLL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("xUR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("XUR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("xUL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("XUL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("xDR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("XDR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("xDL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("XDL")) {
                ///llamo metodo para graficar arbol
                arbol.setId(contadorDeArboles);
                arbol.setX((int) matrizPuntosLimitesCuadriculaMapa[x][y].getX1());
                arbol.setY((int) matrizPuntosLimitesCuadriculaMapa[x][y].getY1());

                matrizCuadriculaMapaIdArboles[x][y] = arbol.getId();
                matrizLetrasElementosInternosCuadriculaMapa[x][y] = "A";
                frame.agregarArbolALaLista(arbol);
                contadorDeArboles++;
            }
        }
        //para la esquina 0,0 donde  y-1 y x-1 listo
        if (x < 1 && y < 1) {
            if (matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("r")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("R")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("l")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("L")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("h")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("H")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("xURL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("XURL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("xULL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("XULL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("xDRR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("XDRR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("xDLR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("XDLR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("xURR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("XURR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("xULR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("XULR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("xDRL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("XDRL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("xDLL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("XDLL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("xUR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("XUR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("xUL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("XUL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("xDR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("XDR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("xDL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("XDL")) {
                /// llamo metodo para graficar arbol
                arbol.setId(contadorDeArboles);
                arbol.setX((int) matrizPuntosLimitesCuadriculaMapa[x][y].getX1());
                arbol.setY((int) matrizPuntosLimitesCuadriculaMapa[x][y].getY1());

                matrizCuadriculaMapaIdArboles[x][y] = arbol.getId();
                matrizLetrasElementosInternosCuadriculaMapa[x][y] = "A";
                frame.agregarArbolALaLista(arbol);
                contadorDeArboles++;
            }
            if (matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("t")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("T")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("d")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("D")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("v")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("V")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("xURL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("XURL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("xDRL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("XDRL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("xDRR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("XDRR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("xDLR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("XDLR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("xURR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("XURR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("xULR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("XULR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("xDRL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("XDRL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("xDLL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("XDLL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("xUR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("XUR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("xUL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("XUL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("xDR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("XDR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("xDL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("XDL")) {
                ///llamo metodo para graficar arbol
                arbol.setId(contadorDeArboles);
                arbol.setX((int) matrizPuntosLimitesCuadriculaMapa[x][y].getX1());
                arbol.setY((int) matrizPuntosLimitesCuadriculaMapa[x][y].getY1());

                matrizCuadriculaMapaIdArboles[x][y] = arbol.getId();
                matrizLetrasElementosInternosCuadriculaMapa[x][y] = "A";
                frame.agregarArbolALaLista(arbol);
                contadorDeArboles++;
            }
        }
        //para la esquina 0,9 donde  y+1 y x-1
        if (x < 1 && y > 8) {
            if (matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("r")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("R")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("l")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("L")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("h")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("H")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("xURL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("XURL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("xULL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("XULL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("xDRR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("XDRR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("xDLR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("XDLR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("xURR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("XURR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("xULR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("XULR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("xDRL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("XDRL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("xDLL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("XDLL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("xUR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("XUR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("xUL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("XUL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("xDR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("XDR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("xDL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("XDL")) {
                ///llamo metodo para graficar arbol
                arbol.setId(contadorDeArboles);
                arbol.setX((int) matrizPuntosLimitesCuadriculaMapa[x][y].getX1());
                arbol.setY((int) matrizPuntosLimitesCuadriculaMapa[x][y].getY1());

                matrizCuadriculaMapaIdArboles[x][y] = arbol.getId();
                matrizLetrasElementosInternosCuadriculaMapa[x][y] = "A";
                frame.agregarArbolALaLista(arbol);
                contadorDeArboles++;

            }
            if (matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("t")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("T")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("d")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("D")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("v")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("V")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("xURL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("XURL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("xDRL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("XDRL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("xDRR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("XDRR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("xDLR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("XDLR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("xURR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("XURR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("xULR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("XULR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("xDRL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("XDRL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("xDLL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("XDLL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("xUR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("XUR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("xUL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("XUL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("xDR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("XDR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("xDL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("XDL")) {
                ///llamo metodo para graficar arbol
                arbol.setId(contadorDeArboles);
                arbol.setX((int) matrizPuntosLimitesCuadriculaMapa[x][y].getX1());
                arbol.setY((int) matrizPuntosLimitesCuadriculaMapa[x][y].getY1());

                matrizCuadriculaMapaIdArboles[x][y] = arbol.getId();
                matrizLetrasElementosInternosCuadriculaMapa[x][y] = "A";
                frame.agregarArbolALaLista(arbol);
                contadorDeArboles++;
            }
        }
        //para la esquina 19,0 donde  y-1 y x+1 listo
        if (x > 18 && y < 1) {
            if (matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("r")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("R")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("l")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("L")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("h")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("H")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("xURL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("XURL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("xULL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("XULL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("xDRR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("XDRR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("xDLR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("XDLR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("xURR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("XURR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("xULR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("XULR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("xDRL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("XDRL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("xDLL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("XDLL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("xUR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("XUR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("xUL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("XUL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("xDR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("XDR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("xDL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("XDL")) {
                /// llamo metodo para graficar arbol
                arbol.setId(contadorDeArboles);
                arbol.setX((int) matrizPuntosLimitesCuadriculaMapa[x][y].getX1());
                arbol.setY((int) matrizPuntosLimitesCuadriculaMapa[x][y].getY1());

                matrizCuadriculaMapaIdArboles[x][y] = arbol.getId();
                matrizLetrasElementosInternosCuadriculaMapa[x][y] = "A";
                frame.agregarArbolALaLista(arbol);
                contadorDeArboles++;
            }
            if (matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("t")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("T")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("d")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("D")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("v")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("V")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("xULL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("XULL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("xDLL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("XDLL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("xDRR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("XDRR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("xDLR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("XDLR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("xURR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("XURR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("xULR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("XULR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("xDRL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("XDRL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("xDLL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("XDLL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("xUR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("XUR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("xUL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("XUL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("xDR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("XDR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("xDL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("XDL")) {
                ///llamo metodo para graficar arbol
                arbol.setId(contadorDeArboles);
                arbol.setX((int) matrizPuntosLimitesCuadriculaMapa[x][y].getX1());
                arbol.setY((int) matrizPuntosLimitesCuadriculaMapa[x][y].getY1());

                matrizCuadriculaMapaIdArboles[x][y] = arbol.getId();
                matrizLetrasElementosInternosCuadriculaMapa[x][y] = "A";
                frame.agregarArbolALaLista(arbol);
                contadorDeArboles++;
            }
        }
        //para la esquina 19,9 donde  y+1 y x+1 listo
        if (x > 18 && y > 8) {
            if (matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("r")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("R")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("l")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("L")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("h")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("H")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("xURL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("XURL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("xULL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("XULL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("xDRR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("XDRR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("xDLR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("XDLR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("xURR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("XURR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("xULR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("XULR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("xDRL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("XDRL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("xDLL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("XDLL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("xUR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("XUR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("xUL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("XUL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("xDR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("XDR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("xDL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("XDL")) {
                ///llamo metodo para graficar arbol
                arbol.setId(contadorDeArboles);
                arbol.setX((int) matrizPuntosLimitesCuadriculaMapa[x][y].getX1());
                arbol.setY((int) matrizPuntosLimitesCuadriculaMapa[x][y].getY1());

                matrizCuadriculaMapaIdArboles[x][y] = arbol.getId();
                matrizLetrasElementosInternosCuadriculaMapa[x][y] = "A";
                frame.agregarArbolALaLista(arbol);
                contadorDeArboles++;

            }
            if (matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("t")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("T")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("d")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("D")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("v")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("V")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("xULL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("XULL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("xDLL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("XDLL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("xDRR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("XDRR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("xDLR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("XDLR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("xURR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("XURR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("xULR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("XULR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("xDRL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("XDRL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("xDLL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("XDLL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("xUR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("XUR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("xUL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("XUL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("xDR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("XDR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("xDL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("XDL")) {
                ///llamo metodo para graficar arbol
                arbol.setId(contadorDeArboles);
                arbol.setX((int) matrizPuntosLimitesCuadriculaMapa[x][y].getX1());
                arbol.setY((int) matrizPuntosLimitesCuadriculaMapa[x][y].getY1());

                matrizCuadriculaMapaIdArboles[x][y] = arbol.getId();
                matrizLetrasElementosInternosCuadriculaMapa[x][y] = "A";
                frame.agregarArbolALaLista(arbol);
                contadorDeArboles++;
            }
        }

    }

    public void crearEdificio(int x, int y) {
        if (y > 0 && y < 9 && x > 0 && x < 19) {
            if (matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("C")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("C")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("C")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("C")) {
                /// llamo metodo para graficar edificio
                edificio.setId(contadorDeEdificios);
                edificio.setX((int) matrizPuntosLimitesCuadriculaMapa[x][y].getX1());
                edificio.setY((int) matrizPuntosLimitesCuadriculaMapa[x][y].getY1());

                matrizCuadriculaMapaIdEdificios[x][y] = edificio.getId();
                matrizLetrasElementosInternosCuadriculaMapa[x][y] = "C";
                frame.agregarEdificioALaLista(edificio);
                contadorDeEdificios++;
            }
            if (matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("A")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("A")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("A")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("A")) {
                /// llamo metodo para graficar edificio
                edificio.setId(contadorDeEdificios);
                edificio.setX((int) matrizPuntosLimitesCuadriculaMapa[x][y].getX1());
                edificio.setY((int) matrizPuntosLimitesCuadriculaMapa[x][y].getY1());

                matrizCuadriculaMapaIdEdificios[x][y] = edificio.getId();
                matrizLetrasElementosInternosCuadriculaMapa[x][y] = "C";
                frame.agregarEdificioALaLista(edificio);
                contadorDeEdificios++;
            }
            if (matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("r")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("R")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("l")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("L")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("h")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("H")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("xURL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("XURL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("xULL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("XULL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("xDRR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("XDRR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("xDLR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("XDLR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("xURR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("XURR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("xULR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("XULR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("xDRL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("XDRL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("xDLL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("XDLL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("xUR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("XUR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("xUL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("XUL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("xDR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("XDR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("xDL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("XDL")) {
                /// llamo metodo para graficar edificio
                edificio.setId(contadorDeEdificios);
                edificio.setX((int) matrizPuntosLimitesCuadriculaMapa[x][y].getX1());
                edificio.setY((int) matrizPuntosLimitesCuadriculaMapa[x][y].getY1());

                matrizCuadriculaMapaIdEdificios[x][y] = edificio.getId();
                matrizLetrasElementosInternosCuadriculaMapa[x][y] = "C";
                frame.agregarEdificioALaLista(edificio);
                contadorDeEdificios++;
            }
            if (matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("r")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("R")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("l")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("L")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("h")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("H")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("xURL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("XURL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("xULL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("XULL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("xDRR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("XDRR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("xDLR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("XDLR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("xURR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("XURR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("xULR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("XULR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("xDRL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("XDRL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("xDLL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("XDLL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("xUR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("XUR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("xUL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("XUL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("xDR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("XDR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("xDL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("XDL")) {
                ///llamo metodo para graficar edificio
                edificio.setId(contadorDeEdificios);
                edificio.setX((int) matrizPuntosLimitesCuadriculaMapa[x][y].getX1());
                edificio.setY((int) matrizPuntosLimitesCuadriculaMapa[x][y].getY1());

                matrizCuadriculaMapaIdEdificios[x][y] = edificio.getId();
                matrizLetrasElementosInternosCuadriculaMapa[x][y] = "C";
                frame.agregarEdificioALaLista(edificio);
                contadorDeEdificios++;

            }
            if (matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("t")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("T")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("d")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("D")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("v")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("V")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("xURL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("XURL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("xDRL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("XDRL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("xDRR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("XDRR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("xDLR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("XDLR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("xURR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("XURR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("xULR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("XULR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("xDRL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("XDRL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("xDLL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("XDLL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("xUR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("XUR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("xUL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("XUL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("xDR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("XDR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("xDL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("XDL")) {
                ///llamo metodo para graficar edificio
                edificio.setId(contadorDeEdificios);
                edificio.setX((int) matrizPuntosLimitesCuadriculaMapa[x][y].getX1());
                edificio.setY((int) matrizPuntosLimitesCuadriculaMapa[x][y].getY1());

                matrizCuadriculaMapaIdEdificios[x][y] = edificio.getId();
                matrizLetrasElementosInternosCuadriculaMapa[x][y] = "C";
                frame.agregarEdificioALaLista(edificio);
                contadorDeEdificios++;
            }
            if (matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("t")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("T")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("d")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("D")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("v")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("V")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("xULL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("XULL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("xDLL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("XDLL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("xDRR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("XDRR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("xDLR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("XDLR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("xURR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("XURR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("xULR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("XULR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("xDRL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("XDRL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("xDLL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("XDLL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("xUR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("XUR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("xUL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("XUL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("xDR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("XDR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("xDL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("XDL")) {
                ///llamo metodo para graficar edificio
                edificio.setId(contadorDeEdificios);
                edificio.setX((int) matrizPuntosLimitesCuadriculaMapa[x][y].getX1());
                edificio.setY((int) matrizPuntosLimitesCuadriculaMapa[x][y].getY1());

                matrizCuadriculaMapaIdEdificios[x][y] = edificio.getId();
                matrizLetrasElementosInternosCuadriculaMapa[x][y] = "C";
                frame.agregarEdificioALaLista(edificio);
                contadorDeEdificios++;
            }
        }

        //uno para y-1 Listo
        if (y < 1 && x > 0 && x < 19) {
            if (matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("r")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("R")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("l")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("L")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("h")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("H")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("xURL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("XURL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("xULL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("XULL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("xDRR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("XDRR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("xDLR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("XDLR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("xURR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("XURR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("xULR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("XULR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("xDRL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("XDRL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("xDLL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("XDLL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("xUR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("XUR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("xUL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("XUL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("xDR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("XDR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("xDL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("XDL")) {
                /// llamo metodo para graficar edificio
                edificio.setId(contadorDeEdificios);
                edificio.setX((int) matrizPuntosLimitesCuadriculaMapa[x][y].getX1());
                edificio.setY((int) matrizPuntosLimitesCuadriculaMapa[x][y].getY1());

                matrizCuadriculaMapaIdEdificios[x][y] = edificio.getId();
                matrizLetrasElementosInternosCuadriculaMapa[x][y] = "C";
                frame.agregarEdificioALaLista(edificio);
                contadorDeEdificios++;
            }

            if (matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("t")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("T")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("d")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("D")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("v")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("V")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("xURL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("XURL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("xDRL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("XDRL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("xDRR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("XDRR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("xDLR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("XDLR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("xURR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("XURR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("xULR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("XULR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("xDRL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("XDRL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("xDLL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("XDLL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("xUR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("XUR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("xUL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("XUL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("xDR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("XDR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("xDL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("XDL")) {
                ///llamo metodo para graficar edificio
                edificio.setId(contadorDeEdificios);
                edificio.setX((int) matrizPuntosLimitesCuadriculaMapa[x][y].getX1());
                edificio.setY((int) matrizPuntosLimitesCuadriculaMapa[x][y].getY1());

                matrizCuadriculaMapaIdEdificios[x][y] = edificio.getId();
                matrizLetrasElementosInternosCuadriculaMapa[x][y] = "C";
                frame.agregarEdificioALaLista(edificio);
                contadorDeEdificios++;
            }
            if (matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("t")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("T")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("d")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("D")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("v")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("V")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("xULL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("XULL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("xDLL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("XDLL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("xDRR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("XDRR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("xDLR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("XDLR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("xURR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("XURR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("xULR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("XULR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("xDRL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("XDRL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("xDLL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("XDLL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("xUR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("XUR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("xUL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("XUL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("xDR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("XDR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("xDL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("XDL")) {
                ///llamo metodo para graficar edificio
                edificio.setId(contadorDeEdificios);
                edificio.setX((int) matrizPuntosLimitesCuadriculaMapa[x][y].getX1());
                edificio.setY((int) matrizPuntosLimitesCuadriculaMapa[x][y].getY1());

                matrizCuadriculaMapaIdEdificios[x][y] = edificio.getId();
                matrizLetrasElementosInternosCuadriculaMapa[x][y] = "C";
                frame.agregarEdificioALaLista(edificio);
                contadorDeEdificios++;
            }
        }

        //dos para y+1 listo 
        if (y > 8 && x > 0 && x < 19) {
            if (matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("r")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("R")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("l")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("L")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("h")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("H")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("xURL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("XURL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("xULL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("XULL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("xDRR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("XDRR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("xDLR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("XDLR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("xURR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("XURR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("xULR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("XULR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("xDRL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("XDRL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("xDLL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("XDLL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("xUR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("XUR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("xUL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("XUL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("xDR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("XDR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("xDL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("XDL")) {
                ///llamo metodo para graficar edificio
                edificio.setId(contadorDeEdificios);
                edificio.setX((int) matrizPuntosLimitesCuadriculaMapa[x][y].getX1());
                edificio.setY((int) matrizPuntosLimitesCuadriculaMapa[x][y].getY1());

                matrizCuadriculaMapaIdEdificios[x][y] = edificio.getId();
                matrizLetrasElementosInternosCuadriculaMapa[x][y] = "C";
                frame.agregarEdificioALaLista(edificio);
                contadorDeEdificios++;

            }
            if (matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("t")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("T")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("d")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("D")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("v")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("V")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("xURL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("XURL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("xDRL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("XDRL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("xDRR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("XDRR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("xDLR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("XDLR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("xURR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("XURR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("xULR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("XULR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("xDRL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("XDRL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("xDLL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("XDLL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("xUR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("XUR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("xUL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("XUL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("xDR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("XDR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("xDL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("XDL")) {
                ///llamo metodo para graficar edificio
                edificio.setId(contadorDeEdificios);
                edificio.setX((int) matrizPuntosLimitesCuadriculaMapa[x][y].getX1());
                edificio.setY((int) matrizPuntosLimitesCuadriculaMapa[x][y].getY1());

                matrizCuadriculaMapaIdEdificios[x][y] = edificio.getId();
                matrizLetrasElementosInternosCuadriculaMapa[x][y] = "C";
                frame.agregarEdificioALaLista(edificio);
                contadorDeEdificios++;
            }
            if (matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("t")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("T")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("d")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("D")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("v")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("V")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("xULL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("XULL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("xDLL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("XDLL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("xDRR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("XDRR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("xDLR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("XDLR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("xURR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("XURR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("xULR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("XULR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("xDRL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("XDRL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("xDLL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("XDLL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("xUR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("XUR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("xUL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("XUL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("xDR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("XDR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("xDL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("XDL")) {
                ///llamo metodo para graficar edificio
                edificio.setId(contadorDeEdificios);
                edificio.setX((int) matrizPuntosLimitesCuadriculaMapa[x][y].getX1());
                edificio.setY((int) matrizPuntosLimitesCuadriculaMapa[x][y].getY1());

                matrizCuadriculaMapaIdEdificios[x][y] = edificio.getId();
                matrizLetrasElementosInternosCuadriculaMapa[x][y] = "C";
                frame.agregarEdificioALaLista(edificio);
                contadorDeEdificios++;
            }
        }

        //tres para x+1 listo 
        if (x > 18 && y > 0 && y < 9) {
            if (matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("r")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("R")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("l")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("L")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("h")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("H")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("xURL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("XURL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("xULL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("XULL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("xDRR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("XDRR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("xDLR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("XDLR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("xURR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("XURR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("xULR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("XULR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("xDRL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("XDRL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("xDLL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("XDLL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("xUR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("XUR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("xUL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("XUL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("xDR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("XDR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("xDL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("XDL")) {
                /// llamo metodo para graficar edificio
                edificio.setId(contadorDeEdificios);
                edificio.setX((int) matrizPuntosLimitesCuadriculaMapa[x][y].getX1());
                edificio.setY((int) matrizPuntosLimitesCuadriculaMapa[x][y].getY1());

                matrizCuadriculaMapaIdEdificios[x][y] = edificio.getId();
                matrizLetrasElementosInternosCuadriculaMapa[x][y] = "C";
                frame.agregarEdificioALaLista(edificio);
                contadorDeEdificios++;
            }
            if (matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("r")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("R")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("l")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("L")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("h")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("H")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("xURL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("XURL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("xULL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("XULL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("xDRR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("XDRR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("xDLR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("XDLR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("xURR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("XURR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("xULR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("XULR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("xDRL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("XDRL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("xDLL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("XDLL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("xUR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("XUR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("xUL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("XUL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("xDR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("XDR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("xDL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("XDL")) {
                ///llamo metodo para graficar edificio
                edificio.setId(contadorDeEdificios);
                edificio.setX((int) matrizPuntosLimitesCuadriculaMapa[x][y].getX1());
                edificio.setY((int) matrizPuntosLimitesCuadriculaMapa[x][y].getY1());

                matrizCuadriculaMapaIdEdificios[x][y] = edificio.getId();
                matrizLetrasElementosInternosCuadriculaMapa[x][y] = "C";
                frame.agregarEdificioALaLista(edificio);
                contadorDeEdificios++;

            }
            if (matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("t")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("T")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("d")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("D")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("v")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("V")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("xULL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("XULL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("xDLL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("XDLL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("xDRR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("XDRR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("xDLR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("XDLR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("xURR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("XURR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("xULR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("XULR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("xDRL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("XDRL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("xDLL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("XDLL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("xUR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("XUR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("xUL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("XUL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("xDR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("XDR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("xDL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("XDL")) {
                ///llamo metodo para graficar edificio
                edificio.setId(contadorDeEdificios);
                edificio.setX((int) matrizPuntosLimitesCuadriculaMapa[x][y].getX1());
                edificio.setY((int) matrizPuntosLimitesCuadriculaMapa[x][y].getY1());

                matrizCuadriculaMapaIdEdificios[x][y] = edificio.getId();
                matrizLetrasElementosInternosCuadriculaMapa[x][y] = "C";
                frame.agregarEdificioALaLista(edificio);
                contadorDeEdificios++;
            }
        }
        //cuatro para x-1 listo
        if (x < 1 && y > 0 && y < 9) {
            if (matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("r")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("R")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("l")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("L")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("h")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("H")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("xURL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("XURL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("xULL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("XULL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("xDRR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("XDRR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("xDLR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("XDLR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("xURR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("XURR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("xULR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("XULR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("xDRL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("XDRL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("xDLL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("XDLL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("xUR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("XUR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("xUL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("XUL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("xDR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("XDR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("xDL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("XDL")) {
                /// llamo metodo para graficar edificio
                edificio.setId(contadorDeEdificios);
                edificio.setX((int) matrizPuntosLimitesCuadriculaMapa[x][y].getX1());
                edificio.setY((int) matrizPuntosLimitesCuadriculaMapa[x][y].getY1());

                matrizCuadriculaMapaIdEdificios[x][y] = edificio.getId();
                matrizLetrasElementosInternosCuadriculaMapa[x][y] = "C";
                frame.agregarEdificioALaLista(edificio);
                contadorDeEdificios++;
            }
            if (matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("r")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("R")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("l")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("L")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("h")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("H")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("xURL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("XURL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("xULL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("XULL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("xDRR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("XDRR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("xDLR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("XDLR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("xURR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("XURR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("xULR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("XULR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("xDRL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("XDRL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("xDLL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("XDLL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("xUR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("XUR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("xUL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("XUL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("xDR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("XDR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("xDL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("XDL")) {
                ///llamo metodo para graficar edificio
                edificio.setId(contadorDeEdificios);
                edificio.setX((int) matrizPuntosLimitesCuadriculaMapa[x][y].getX1());
                edificio.setY((int) matrizPuntosLimitesCuadriculaMapa[x][y].getY1());

                matrizCuadriculaMapaIdEdificios[x][y] = edificio.getId();
                matrizLetrasElementosInternosCuadriculaMapa[x][y] = "C";
                frame.agregarEdificioALaLista(edificio);
                contadorDeEdificios++;

            }
            if (matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("t")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("T")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("d")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("D")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("v")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("V")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("xURL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("XURL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("xDRL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("XDRL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("xDRR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("XDRR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("xDLR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("XDLR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("xURR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("XURR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("xULR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("XULR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("xDRL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("XDRL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("xDLL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("XDLL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("xUR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("XUR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("xUL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("XUL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("xDR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("XDR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("xDL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("XDL")) {
                ///llamo metodo para graficar edificio
                edificio.setId(contadorDeEdificios);
                edificio.setX((int) matrizPuntosLimitesCuadriculaMapa[x][y].getX1());
                edificio.setY((int) matrizPuntosLimitesCuadriculaMapa[x][y].getY1());

                matrizCuadriculaMapaIdEdificios[x][y] = edificio.getId();
                matrizLetrasElementosInternosCuadriculaMapa[x][y] = "C";
                frame.agregarEdificioALaLista(edificio);
                contadorDeEdificios++;
            }
        }
        //para la esquina 0,0 donde  y-1 y x-1 listo
        if (x < 1 && y < 1) {
            if (matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("r")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("R")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("l")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("L")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("h")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("H")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("xURL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("XURL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("xULL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("XULL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("xDRR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("XDRR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("xDLR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("XDLR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("xURR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("XURR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("xULR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("XULR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("xDRL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("XDRL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("xDLL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("XDLL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("xUR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("XUR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("xUL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("XUL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("xDR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("XDR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("xDL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("XDL")) {
                /// llamo metodo para graficar edificio
                edificio.setId(contadorDeEdificios);
                edificio.setX((int) matrizPuntosLimitesCuadriculaMapa[x][y].getX1());
                edificio.setY((int) matrizPuntosLimitesCuadriculaMapa[x][y].getY1());

                matrizCuadriculaMapaIdEdificios[x][y] = edificio.getId();
                matrizLetrasElementosInternosCuadriculaMapa[x][y] = "C";
                frame.agregarEdificioALaLista(edificio);
                contadorDeEdificios++;
            }
            if (matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("t")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("T")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("d")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("D")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("v")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("V")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("xURL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("XURL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("xDRL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("XDRL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("xDRR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("XDRR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("xDLR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("XDLR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("xURR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("XURR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("xULR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("XULR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("xDRL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("XDRL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("xDLL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("XDLL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("xUR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("XUR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("xUL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("XUL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("xDR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("XDR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("xDL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("XDL")) {
                ///llamo metodo para graficar edificio
                edificio.setId(contadorDeEdificios);
                edificio.setX((int) matrizPuntosLimitesCuadriculaMapa[x][y].getX1());
                edificio.setY((int) matrizPuntosLimitesCuadriculaMapa[x][y].getY1());

                matrizCuadriculaMapaIdEdificios[x][y] = edificio.getId();
                matrizLetrasElementosInternosCuadriculaMapa[x][y] = "C";
                frame.agregarEdificioALaLista(edificio);
                contadorDeEdificios++;
            }
        }
        //para la esquina 0,9 donde  y+1 y x-1
        if (x < 1 && y > 8) {
            if (matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("r")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("R")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("l")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("L")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("h")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("H")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("xURL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("XURL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("xULL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("XULL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("xDRR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("XDRR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("xDLR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("XDLR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("xURR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("XURR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("xULR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("XULR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("xDRL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("XDRL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("xDLL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("XDLL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("xUR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("XUR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("xUL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("XUL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("xDR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("XDR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("xDL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("XDL")) {
                ///llamo metodo para graficar edificio
                edificio.setId(contadorDeEdificios);
                edificio.setX((int) matrizPuntosLimitesCuadriculaMapa[x][y].getX1());
                edificio.setY((int) matrizPuntosLimitesCuadriculaMapa[x][y].getY1());

                matrizCuadriculaMapaIdEdificios[x][y] = edificio.getId();
                matrizLetrasElementosInternosCuadriculaMapa[x][y] = "C";
                frame.agregarEdificioALaLista(edificio);
                contadorDeEdificios++;

            }
            if (matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("t")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("T")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("d")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("D")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("v")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("V")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("xURL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("XURL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("xDRL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("XDRL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("xDRR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("XDRR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("xDLR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("XDLR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("xURR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("XURR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("xULR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("XULR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("xDRL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("XDRL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("xDLL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("XDLL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("xUR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("XUR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("xUL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("XUL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("xDR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("XDR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("xDL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x + 1][y].equals("XDL")) {
                ///llamo metodo para graficar edificio
                edificio.setId(contadorDeEdificios);
                edificio.setX((int) matrizPuntosLimitesCuadriculaMapa[x][y].getX1());
                edificio.setY((int) matrizPuntosLimitesCuadriculaMapa[x][y].getY1());

                matrizCuadriculaMapaIdEdificios[x][y] = edificio.getId();
                matrizLetrasElementosInternosCuadriculaMapa[x][y] = "C";
                frame.agregarEdificioALaLista(edificio);
                contadorDeEdificios++;
            }
        }
        //para la esquina 19,0 donde  y-1 y x+1 listo
        if (x > 18 && y < 1) {
            if (matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("r")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("R")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("l")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("L")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("h")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("H")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("xURL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("XURL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("xULL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("XULL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("xDRR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("XDRR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("xDLR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("XDLR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("xURR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("XURR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("xULR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("XULR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("xDRL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("XDRL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("xDLL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("XDLL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("xUR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("XUR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("xUL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("XUL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("xDR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("XDR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("xDL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y + 1].equals("XDL")) {
                /// llamo metodo para graficar edificio
                edificio.setId(contadorDeEdificios);
                edificio.setX((int) matrizPuntosLimitesCuadriculaMapa[x][y].getX1());
                edificio.setY((int) matrizPuntosLimitesCuadriculaMapa[x][y].getY1());

                matrizCuadriculaMapaIdEdificios[x][y] = edificio.getId();
                matrizLetrasElementosInternosCuadriculaMapa[x][y] = "C";
                frame.agregarEdificioALaLista(edificio);
                contadorDeEdificios++;
            }
            if (matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("t")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("T")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("d")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("D")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("v")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("V")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("xULL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("XULL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("xDLL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("XDLL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("xDRR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("XDRR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("xDLR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("XDLR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("xURR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("XURR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("xULR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("XULR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("xDRL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("XDRL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("xDLL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("XDLL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("xUR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("XUR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("xUL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("XUL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("xDR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("XDR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("xDL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x - 1][y].equals("XDL")) {
                ///llamo metodo para graficar edificio
                edificio.setId(contadorDeEdificios);
                edificio.setX((int) matrizPuntosLimitesCuadriculaMapa[x][y].getX1());
                edificio.setY((int) matrizPuntosLimitesCuadriculaMapa[x][y].getY1());

                matrizCuadriculaMapaIdEdificios[x][y] = edificio.getId();
                matrizLetrasElementosInternosCuadriculaMapa[x][y] = "C";
                frame.agregarEdificioALaLista(edificio);
                contadorDeEdificios++;
            }
        }
        //para la esquina 19,9 donde  y+1 y x+1 listo
        if (x > 18 && y > 8) {
            if (matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("r")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("R")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("l")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("L")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("h")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("H")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("xURL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("XURL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("xULL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("XULL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("xDRR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("XDRR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("xDLR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("XDLR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("xURR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("XURR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("xULR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("XULR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("xDRL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("XDRL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("xDLL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("XDLL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("xUR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("XUR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("xUL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("XUL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("xDR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("XDR")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("xDL")
                    || matrizLetrasElementosInternosCuadriculaMapa[x][y - 1].equals("XDL")) {
                ///llamo metodo para graficar edificio
                edificio.setId(contadorDeEdificios);
                edificio.setX((int) matrizPuntosLimitesCuadriculaMapa[x][y].getX1());
                edificio.setY((int) matrizPuntosLimitesCuadriculaMapa[x][y].getY1());

                matrizCuadriculaMapaIdEdificios[x][y] = edificio.getId();
                matrizLetrasElementosInternosCuadriculaMapa[x][y] = "C";
                frame.agregarEdificioALaLista(edificio);
                contadorDeEdificios++;

            }

        }
    }

    public void recibirDatosFormularioCorregirElementos(int x, int y) {

        if (matrizCuadriculaMapaIdArboles[x][y] != -1) {
            frame.getArboles().remove(matrizCuadriculaMapaIdArboles[x][y]);
            for (int i = 0; i < 10; i++) {
                for (int j = 0; j < 20; j++) {
                    if (matrizCuadriculaMapaIdArboles[x][y] < matrizCuadriculaMapaIdArboles[j][i]) {
                        matrizCuadriculaMapaIdArboles[j][i]--;
                    }
                }
            }
            for (int i = 0; i < frame.getArboles().size(); i++) {
                frame.getArboles().get(i).setId(i);
            }
            matrizCuadriculaMapaIdArboles[x][y] = -1;
            matrizLetrasElementosInternosCuadriculaMapa[x][y] = "";
            contadorDeArboles--;
        }

        if (matrizCuadriculaMapaIdCalles[x][y] != -1) {

            frame.getCalles().remove(frame.getCalles().get(matrizCuadriculaMapaIdCalles[x][y]));

            for (int i = 0; i < frame.getListaNodosMapa().size(); i++) {
                if (frame.getListaNodosMapa().get(i).getIdCalle() == matrizCuadriculaMapaIdCalles[x][y]) {
                    frame.getListaNodosMapa().remove(i);
                    contadorDeNodos--;
                }
            }
            for (int i = 0; i < frame.getListaNodosMapa().size(); i++) {
                frame.getListaNodosMapa().get(i).setId(i);
            }

            for (int i = 0; i < 10; i++) {
                for (int j = 0; j < 20; j++) {
                    if (matrizCuadriculaMapaIdCalles[x][y] < matrizCuadriculaMapaIdCalles[j][i]) {
                        matrizCuadriculaMapaIdCalles[j][i]--;
                    }
                }
            }
            for (int i = 0; i < frame.getCalles().size(); i++) {
                frame.getCalles().get(i).setId(i);
            }

            matrizCuadriculaMapaIdCalles[x][y] = -1;
            matrizLetrasElementosInternosCuadriculaMapa[x][y] = "";
            contadorDeCalles--;
        }

        if (matrizCuadriculaMapaIdEdificios[x][y] != -1) {
            frame.getEdificios().remove(matrizCuadriculaMapaIdEdificios[x][y]);
            for (int i = 0; i < 10; i++) {
                for (int j = 0; j < 20; j++) {
                    if (matrizCuadriculaMapaIdEdificios[x][y] < matrizCuadriculaMapaIdEdificios[j][i]) {
                        matrizCuadriculaMapaIdEdificios[j][i]--;
                    }
                }
            }
            for (int i = 0; i < frame.getArboles().size(); i++) {
                frame.getArboles().get(i).setId(i);
            }
            matrizCuadriculaMapaIdEdificios[x][y] = -1;
            matrizLetrasElementosInternosCuadriculaMapa[x][y] = "";
            contadorDeEdificios--;
        }
        if (this.hayAlgunElemento() == false) {
            this.esPrimeraCalle = true;

        }
    }

    public boolean hayAlgunElemento() {
        for (int i = 0; i < 10; i++) {
            for (int j = 0; j < 20; j++) {
                if (!"".equals(matrizLetrasElementosInternosCuadriculaMapa[j][i])) {
                    return true;
                } else {
                    return false;
                }
            }
        }
        return false;
    }

    public void mostrarMatricezEnConsola() {
        //ciclo para mostrar las matrices de elementos 
        String cadena2;

        for (int i = 0; i < 10; i++) {
            for (int j = 0; j < 20; j++) {
                if ("a".equals(matrizLetrasElementosInternosCuadriculaMapa[j][i]) || "A".equals(matrizLetrasElementosInternosCuadriculaMapa[j][i]) || "r".equals(matrizLetrasElementosInternosCuadriculaMapa[j][i])
                        || "R".equals(matrizLetrasElementosInternosCuadriculaMapa[j][i]) || "T".equals(matrizLetrasElementosInternosCuadriculaMapa[j][i]) || "t".equals(matrizLetrasElementosInternosCuadriculaMapa[j][i])
                        || "l".equals(matrizLetrasElementosInternosCuadriculaMapa[j][i]) || "L".equals(matrizLetrasElementosInternosCuadriculaMapa[j][i]) || "v".equals(matrizLetrasElementosInternosCuadriculaMapa[j][i])
                        || "V".equals(matrizLetrasElementosInternosCuadriculaMapa[j][i]) || "h".equals(matrizLetrasElementosInternosCuadriculaMapa[j][i]) || "H".equals(matrizLetrasElementosInternosCuadriculaMapa[j][i])
                        || "xx".equals(matrizLetrasElementosInternosCuadriculaMapa[j][i]) || "XX".equals(matrizLetrasElementosInternosCuadriculaMapa[j][i]) || "D".equals(matrizLetrasElementosInternosCuadriculaMapa[j][i])
                        || "d".equals(matrizLetrasElementosInternosCuadriculaMapa[j][i]) || "C".equals(matrizLetrasElementosInternosCuadriculaMapa[j][i]) || "xUR".equals(matrizLetrasElementosInternosCuadriculaMapa[j][i])
                        || "xURR".equals(matrizLetrasElementosInternosCuadriculaMapa[j][i]) || "xURL".equals(matrizLetrasElementosInternosCuadriculaMapa[j][i]) || "XUR".equals(matrizLetrasElementosInternosCuadriculaMapa[j][i])
                        || "XURR".equals(matrizLetrasElementosInternosCuadriculaMapa[j][i]) || "XURL".equals(matrizLetrasElementosInternosCuadriculaMapa[j][i]) || "xUL".equals(matrizLetrasElementosInternosCuadriculaMapa[j][i])
                        || "xULR".equals(matrizLetrasElementosInternosCuadriculaMapa[j][i]) || "xULL".equals(matrizLetrasElementosInternosCuadriculaMapa[j][i]) || "XUL".equals(matrizLetrasElementosInternosCuadriculaMapa[j][i])
                        || "XULR".equals(matrizLetrasElementosInternosCuadriculaMapa[j][i]) || "XULL".equals(matrizLetrasElementosInternosCuadriculaMapa[j][i]) || "xDL".equals(matrizLetrasElementosInternosCuadriculaMapa[j][i])
                        || "xDLR".equals(matrizLetrasElementosInternosCuadriculaMapa[j][i]) || "xDLL".equals(matrizLetrasElementosInternosCuadriculaMapa[j][i]) || "XDL".equals(matrizLetrasElementosInternosCuadriculaMapa[j][i])
                        || "XDLR".equals(matrizLetrasElementosInternosCuadriculaMapa[j][i]) || "XDLL".equals(matrizLetrasElementosInternosCuadriculaMapa[j][i])) {
                    System.out.println("i " + i + " j " + j);
                }
            }
        }

        System.out.println("");

        System.out.println("        00       01       02       03       04       05       06       07       08       09       10       11       12       13       14       15       16       17       18       19       20 ");
        for (int i = 0; i < 10; i++) {
            cadena2 = i + " ";
            for (int j = 0; j < 20; j++) {
                cadena2 = cadena2 + "    " + matrizLetrasElementosInternosCuadriculaMapa[j][i];
            }
            System.out.println(cadena2);
        }

        //ciclo para mostrar las matrices de id 
        String cadena1;

        System.out.println("");

        System.out.println("        00       01       02       03       04       05       06       07       08       09       10       11       12       13       14       15       16       17       18       19       20 ");
        for (int i = 0; i < 10; i++) {
            cadena1 = i + " ";
            for (int j = 0; j < 20; j++) {
                cadena1 = cadena1 + "       " + matrizCuadriculaMapaIdCalles[j][i];
            }
            System.out.println(cadena1);
        }

    }

    public int buscarIdEnlistaDeCalles(int id) {
        for (int i = 0; i < frame.getCalles().size(); i++) {
            if (frame.getCalles().get(i).getId() == id) {
                return i;
            }
        }
        return 0;
    }

    public int buscarIdEnlistaDeArboles(int id) {
        for (int i = 0; i < frame.getArboles().size(); i++) {
            if (frame.getArboles().get(i).getId() == id) {
                return i;
            }
        }
        return 0;
    }

    public int buscarIdEnlistaDeEdificios(int id) {
        for (int i = 0; i < frame.getEdificios().size(); i++) {
            if (frame.getEdificios().get(i).getId() == id) {
                return i;
            }
        }
        return 0;
    }

    public Calle getCalle() {
        return calle;
    }

    public void setX(int x) {
        this.x = x;
    }

    public void setY(int y) {
        this.y = y;
    }

    public void setCalle(Calle calle, String orientacion) {
        this.calle = calle;
        this.orientacion = orientacion;
    }

    public Arbol getArbol() {
        return arbol;
    }

    public void setArbol(Arbol arbol) {
        this.arbol = arbol;
    }

    public void setEdificio(Edificio edificio) {
        this.edificio = edificio;
    }

    public Edificio getEdificio() {
        return edificio;
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    public PuntosLimiteCuadricula[][] getMatrizPuntosLimitesCuadriculaMapa() {
        return matrizPuntosLimitesCuadriculaMapa;
    }

    public String[][] getMatrizLetrasElementosInternosCuadriculaMapa() {
        return matrizLetrasElementosInternosCuadriculaMapa;
    }

    public int[][] getMatrizCuadriculaMapaIdCalles() {
        return matrizCuadriculaMapaIdCalles;
    }

    public int[][] getMatrizCuadriculaMapaIdEdificios() {
        return matrizCuadriculaMapaIdEdificios;
    }

    public int[][] getMatrizCuadriculaMapaIdArboles() {
        return matrizCuadriculaMapaIdArboles;
    }

    public FrameCrearMapa getFrame() {
        return frame;
    }

    public int getContadorDeCalles() {
        return contadorDeCalles;
    }

    public int getContadorDeEdificios() {
        return contadorDeEdificios;
    }

    public int getContadorDeArboles() {
        return contadorDeArboles;
    }

    public int getContadorDeNodos() {
        return contadorDeNodos;
    }

    public String getOrientacion() {
        return orientacion;
    }

    public boolean isEsPrimeraCalle() {
        return esPrimeraCalle;
    }

    public void setCalle(Calle calle) {
        this.calle = calle;
    }

    public void setMatrizPuntosLimitesCuadriculaMapa(PuntosLimiteCuadricula[][] matrizPuntosLimitesCuadriculaMapa) {
        this.matrizPuntosLimitesCuadriculaMapa = matrizPuntosLimitesCuadriculaMapa;
    }

    public void setMatrizLetrasElementosInternosCuadriculaMapa(String[][] matrizLetrasElementosInternosCuadriculaMapa) {
        this.matrizLetrasElementosInternosCuadriculaMapa = matrizLetrasElementosInternosCuadriculaMapa;
    }

    public void setMatrizCuadriculaMapaIdCalles(int[][] matrizCuadriculaMapaIdCalles) {
        this.matrizCuadriculaMapaIdCalles = matrizCuadriculaMapaIdCalles;
    }

    public void setMatrizCuadriculaMapaIdArboles(int[][] matrizCuadriculaMapaIdArboles) {
        this.matrizCuadriculaMapaIdArboles = matrizCuadriculaMapaIdArboles;
    }

    public void setMatrizCuadriculaMapaIdEdificios(int[][] matrizCuadriculaMapaIdEdificios) {
        this.matrizCuadriculaMapaIdEdificios = matrizCuadriculaMapaIdEdificios;
    }

    public void setFrame(FrameCrearMapa frame) {
        this.frame = frame;
    }

    public void setContadorDeCalles(int contadorDeCalles) {
        this.contadorDeCalles = contadorDeCalles;
    }

    public void setContadorDeEdificios(int contadorDeEdificios) {
        this.contadorDeEdificios = contadorDeEdificios;
    }

    public void setContadorDeArboles(int contadorDeArboles) {
        this.contadorDeArboles = contadorDeArboles;
    }

    public void setContadorDeNodos(int contadorDeNodos) {
        this.contadorDeNodos = contadorDeNodos;
    }

    public void setOrientacion(String orientacion) {
        this.orientacion = orientacion;
    }

    public void setEsPrimeraCalle(boolean esPrimeraCalle) {
        this.esPrimeraCalle = esPrimeraCalle;
    }

}
