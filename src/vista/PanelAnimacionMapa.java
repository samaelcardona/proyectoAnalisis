/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package vista;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.MouseMotionListener;
import java.util.LinkedList;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import modelo.Arbol;
import modelo.AristaGrafoMapa;
import modelo.Calle;
import modelo.Edificio;
import modelo.NodoGrafoMapa;
import modelo.PuntosLimiteCuadricula;
import modelo.Automovil;

/**
 *
 * @author SAMAEL
 */
public class PanelAnimacionMapa extends javax.swing.JPanel implements MouseMotionListener, MouseListener, KeyListener {

//    int x = 20;
//    int y = 10;
    PuntosLimiteCuadricula[][] matrizPuntosLimitesCuadriculaMapa = new PuntosLimiteCuadricula[20][10];
    String[][] matrizLetrasElementosInternosCuadriculaMapa = new String[20][10];
    //Matriz para agregar los Id de cada calle de la cuadricula
    int[][] matrizCuadriculaMapaIdCalles = new int[20][10];
    int[][] matrizCuadriculaMapaIdArboles = new int[20][10];
    int[][] matrizCuadriculaMapaIdEdificios = new int[20][10];
    LinkedList<Automovil> listaDeCarros;

    private FrameAnimacionMapa frame;

    /**
     * Creates new form PanelCrearMapa
     */
    public PanelAnimacionMapa() {
        initComponents();

        addKeyListener(this);
        setFocusable(true);
        setFocusTraversalKeysEnabled(false);
        addMouseListener(this);
        addMouseMotionListener(this);
        listaDeCarros = new LinkedList<>();

        for (int i = 0; i < 20; i++) {
            for (int j = 0; j < 10; j++) {
                matrizPuntosLimitesCuadriculaMapa[i][j] = new PuntosLimiteCuadricula();
                matrizLetrasElementosInternosCuadriculaMapa[i][j] = "";
                matrizCuadriculaMapaIdCalles[i][j] = -1;
                matrizCuadriculaMapaIdArboles[i][j] = -1;
                matrizCuadriculaMapaIdEdificios[i][j] = -1;
            }
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setMaximumSize(new java.awt.Dimension(1120, 560));
        setMinimumSize(new java.awt.Dimension(1120, 560));
        setPreferredSize(new java.awt.Dimension(1120, 560));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1120, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 560, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g); //To change body of generated methods, choose Tools | Templates.

        /// solo para las calles pero luego se modifica para los edificios tomando la matriz de elementos (String) 
        //y graficando toca que crear una matriz de edificios y los arboles si normal 
        for (int i = 0; i < 10; i++) {
            for (int j = 0; j < 20; j++) {
                //System.out.println("posx "+j+" posy "+i+" elemento "+matrizLetrasElementosInternosCuadriculaMapa[j][i]);
                //System.out.println("matriz " + matrizLetrasElementosInternosCuadriculaMapa[j][i] +" calle id "+matrizCuadriculaMapaIdCalles[j][i]);
                if (!"".equals(matrizLetrasElementosInternosCuadriculaMapa[j][i])) {
                    if (matrizCuadriculaMapaIdCalles[j][i] != -1) {
                        //System.out.println("calle"+frame.getCalles().get(matrizCuadriculaMapaIdCalles[j][i]).getId());
                        g.drawImage(frame.getCalles().get(matrizCuadriculaMapaIdCalles[j][i]).getImagen().getImage(), frame.getCalles().get(matrizCuadriculaMapaIdCalles[j][i]).getX(), frame.getCalles().get(matrizCuadriculaMapaIdCalles[j][i]).getY(), frame.getCalles().get(matrizCuadriculaMapaIdCalles[j][i]).getAncho(), frame.getCalles().get(matrizCuadriculaMapaIdCalles[j][i]).getAlto(), this);
                        for (int k = 0; k < frame.getCalles().get(matrizCuadriculaMapaIdCalles[j][i]).getListaDeNodosEnCalle().size(); k++) {
                            g.drawOval(frame.getCalles().get(matrizCuadriculaMapaIdCalles[j][i]).getListaDeNodosEnCalle().get(k).getX(), frame.getCalles().get(matrizCuadriculaMapaIdCalles[j][i]).getListaDeNodosEnCalle().get(k).getY(), frame.getCalles().get(matrizCuadriculaMapaIdCalles[j][i]).getListaDeNodosEnCalle().get(k).getAncho(), frame.getCalles().get(matrizCuadriculaMapaIdCalles[j][i]).getListaDeNodosEnCalle().get(k).getAlto());
                        }
                    }
                    if (matrizCuadriculaMapaIdArboles[j][i] != -1) {
                        g.drawImage(frame.getArboles().get(matrizCuadriculaMapaIdArboles[j][i]).getImagen().getImage(), frame.getArboles().get(matrizCuadriculaMapaIdArboles[j][i]).getX(), frame.getArboles().get(matrizCuadriculaMapaIdArboles[j][i]).getY(), frame.getArboles().get(matrizCuadriculaMapaIdArboles[j][i]).getAncho(), frame.getArboles().get(matrizCuadriculaMapaIdArboles[j][i]).getAlto(), this);
                    }
                    if (matrizCuadriculaMapaIdEdificios[j][i] != -1) {
                        g.drawImage(frame.getEdificios().get(matrizCuadriculaMapaIdEdificios[j][i]).getImagen().getImage(), frame.getEdificios().get(matrizCuadriculaMapaIdEdificios[j][i]).getX(), frame.getEdificios().get(matrizCuadriculaMapaIdEdificios[j][i]).getY(), frame.getEdificios().get(matrizCuadriculaMapaIdEdificios[j][i]).getAncho(), frame.getEdificios().get(matrizCuadriculaMapaIdEdificios[j][i]).getAlto(), this);
                    }
                }
            }
        }

        ///espacio para pintar carros
        for (int i = 0; i < listaDeCarros.size(); i++) {
            int[] cuadroSeleccionado = new int[2];
            cuadroSeleccionado = retornarPosicionCuadriculaSeleccionada(listaDeCarros.get(i).getX(), listaDeCarros.get(i).getY());

            int idCalle = matrizCuadriculaMapaIdCalles[cuadroSeleccionado[0]][cuadroSeleccionado[1]];
            if (idCalle != -1) {

                if ("Derecha".equals(frame.getCalles().get(idCalle).getSentido())) {
                    System.out.println("Sentido del nodo en calle" + frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(0).getSentido());
                    if ("XULR".equals(frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(0).getSentido())
                            || "xULR".equals(frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(0).getSentido())
                            || "XDRR".equals(frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(0).getSentido())
                            || "xDRR".equals(frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(0).getSentido())) {
                        //cuando Y de lista de carros es mayor o menor que el Y del nodo de esa calle en XUL y XDR y en X se mantiene igual.
                        if ((listaDeCarros.get(i).getY() > frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(0).getY() || listaDeCarros.get(i).getY() < frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(0).getY()) && listaDeCarros.get(i).getX() == frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(0).getX()) {
                            g.drawImage(listaDeCarros.get(i).getImagen().get(0).getImage(), listaDeCarros.get(i).getX() - 20, listaDeCarros.get(i).getY() - 7, listaDeCarros.get(i).getAncho(), listaDeCarros.get(i).getAlto(), this);
                        }
                        //cuando X de lista de carros es mayor o menor que el X del nodo de esa calle en XUL y XDR y en X se mantiene igual.
                        if ((listaDeCarros.get(i).getX() > frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(0).getX() || listaDeCarros.get(i).getX() < frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(0).getX()) && listaDeCarros.get(i).getY() == frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(0).getY()) {
                            g.drawImage(listaDeCarros.get(i).getImagen().get(3).getImage(), listaDeCarros.get(i).getX() - 20, listaDeCarros.get(i).getY() - 7, listaDeCarros.get(i).getAncho(), listaDeCarros.get(i).getAlto(), this);
                        }
                        //para cuando x y y de la lista de carros son iguales  a la de los nodos 
                        if (listaDeCarros.get(i).getY() == frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(0).getY() && listaDeCarros.get(i).getX() == frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(0).getX()) {
                            g.drawImage(listaDeCarros.get(i).getImagen().get(3).getImage(), listaDeCarros.get(i).getX() - 20, listaDeCarros.get(i).getY() - 7, listaDeCarros.get(i).getAncho(), listaDeCarros.get(i).getAlto(), this);
                        }

                    }
                    if ("XURR".equals(frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(0).getSentido())
                            || "xURR".equals(frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(0).getSentido())
                            || "XDLR".equals(frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(0).getSentido())
                            || "xDLR".equals(frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(0).getSentido())) {
                        //cuando Y de lista de carros es mayor o menor que el Y del nodo de esa calle en XUL y XDR y en X se mantiene igual.
                        if ((listaDeCarros.get(i).getY() > frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(0).getY() || listaDeCarros.get(i).getY() < frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(0).getY()) && listaDeCarros.get(i).getX() == frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(0).getX()) {
                            g.drawImage(listaDeCarros.get(i).getImagen().get(1).getImage(), listaDeCarros.get(i).getX() - 20, listaDeCarros.get(i).getY() - 7, listaDeCarros.get(i).getAncho(), listaDeCarros.get(i).getAlto(), this);
                        }
                        //cuando X de lista de carros es mayor o menor que el X del nodo de esa calle en XUL y XDR y en X se mantiene igual.
                        if ((listaDeCarros.get(i).getX() > frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(0).getX() || listaDeCarros.get(i).getX() < frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(0).getX()) && listaDeCarros.get(i).getY() == frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(0).getY()) {
                            g.drawImage(listaDeCarros.get(i).getImagen().get(3).getImage(), listaDeCarros.get(i).getX() - 20, listaDeCarros.get(i).getY() - 7, listaDeCarros.get(i).getAncho(), listaDeCarros.get(i).getAlto(), this);
                        }
                        //para cuando x y y de la lista de carros son iguales  a la de los nodos 
                        if (listaDeCarros.get(i).getY() == frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(0).getY() && listaDeCarros.get(i).getX() == frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(0).getX()) {
                            g.drawImage(listaDeCarros.get(i).getImagen().get(3).getImage(), listaDeCarros.get(i).getX() - 20, listaDeCarros.get(i).getY() - 7, listaDeCarros.get(i).getAncho(), listaDeCarros.get(i).getAlto(), this);
                        }

                    }
                    if ("R".equals(frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(0).getSentido())
                            || "r".equals(frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(0).getSentido())) {
                        g.drawImage(listaDeCarros.get(i).getImagen().get(3).getImage(), listaDeCarros.get(i).getX(), listaDeCarros.get(i).getY(), listaDeCarros.get(i).getAncho(), listaDeCarros.get(i).getAlto(), this);
                    }

                }
                if ("Izquierda".equals(frame.getCalles().get(idCalle).getSentido())) {
                    System.out.println("Sentido del nodo en calle" + frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(0).getSentido());
                    if ("XULL".equals(frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(0).getSentido())
                            || "xULL".equals(frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(0).getSentido())
                            || "XDRL".equals(frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(0).getSentido())
                            || "xDRL".equals(frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(0).getSentido())) {
                        //cuando Y de lista de carros es mayor o menor que el Y del nodo de esa calle en XUL y XDR y en X se mantiene igual.
                        if ((listaDeCarros.get(i).getY() > frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(0).getY() || listaDeCarros.get(i).getY() < frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(0).getY()) && listaDeCarros.get(i).getX() == frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(0).getX()) {
                            g.drawImage(listaDeCarros.get(i).getImagen().get(1).getImage(), listaDeCarros.get(i).getX() - 20, listaDeCarros.get(i).getY() - 7, listaDeCarros.get(i).getAncho(), listaDeCarros.get(i).getAlto(), this);
                        }
                        //cuando X de lista de carros es mayor o menor que el X del nodo de esa calle en XUL y XDR y en X se mantiene igual.
                        if ((listaDeCarros.get(i).getX() > frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(0).getX() || listaDeCarros.get(i).getX() < frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(0).getX()) && listaDeCarros.get(i).getY() == frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(0).getY()) {
                            g.drawImage(listaDeCarros.get(i).getImagen().get(2).getImage(), listaDeCarros.get(i).getX() - 20, listaDeCarros.get(i).getY() - 7, listaDeCarros.get(i).getAncho(), listaDeCarros.get(i).getAlto(), this);
                        }
                        //para cuando x y y de la lista de carros son iguales  a la de los nodos 
                        if (listaDeCarros.get(i).getY() == frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(0).getY() && listaDeCarros.get(i).getX() == frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(0).getX()) {
                            g.drawImage(listaDeCarros.get(i).getImagen().get(2).getImage(), listaDeCarros.get(i).getX() - 20, listaDeCarros.get(i).getY() - 7, listaDeCarros.get(i).getAncho(), listaDeCarros.get(i).getAlto(), this);
                        }

                    }
                    if ("XURL".equals(frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(0).getSentido())
                            || "xURL".equals(frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(0).getSentido())
                            || "XDLL".equals(frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(0).getSentido())
                            || "xDLL".equals(frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(0).getSentido())) {
                        //cuando Y de lista de carros es mayor o menor que el Y del nodo de esa calle en XUL y XDR y en X se mantiene igual.
                        if ((listaDeCarros.get(i).getY() > frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(0).getY() || listaDeCarros.get(i).getY() < frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(0).getY()) && listaDeCarros.get(i).getX() == frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(0).getX()) {
                            g.drawImage(listaDeCarros.get(i).getImagen().get(0).getImage(), listaDeCarros.get(i).getX() - 20, listaDeCarros.get(i).getY() - 7, listaDeCarros.get(i).getAncho(), listaDeCarros.get(i).getAlto(), this);
                        }
                        //cuando X de lista de carros es mayor o menor que el X del nodo de esa calle en XUL y XDR y en X se mantiene igual.
                        if ((listaDeCarros.get(i).getX() > frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(0).getX() || listaDeCarros.get(i).getX() < frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(0).getX()) && listaDeCarros.get(i).getY() == frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(0).getY()) {
                            g.drawImage(listaDeCarros.get(i).getImagen().get(2).getImage(), listaDeCarros.get(i).getX() - 20, listaDeCarros.get(i).getY() - 7, listaDeCarros.get(i).getAncho(), listaDeCarros.get(i).getAlto(), this);
                        }
                        //para cuando x y y de la lista de carros son iguales  a la de los nodos 
                        if (listaDeCarros.get(i).getY() == frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(0).getY() && listaDeCarros.get(i).getX() == frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(0).getX()) {
                            g.drawImage(listaDeCarros.get(i).getImagen().get(2).getImage(), listaDeCarros.get(i).getX() - 20, listaDeCarros.get(i).getY() - 7, listaDeCarros.get(i).getAncho(), listaDeCarros.get(i).getAlto(), this);
                        }

                    }
                    if ("L".equals(frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(0).getSentido())
                            || "l".equals(frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(0).getSentido())) {
                        g.drawImage(listaDeCarros.get(i).getImagen().get(2).getImage(), listaDeCarros.get(i).getX() - 20, listaDeCarros.get(i).getY() - 7, listaDeCarros.get(i).getAncho(), listaDeCarros.get(i).getAlto(), this);
                    }

                }
                if ("Arriba".equals(frame.getCalles().get(idCalle).getSentido())) {
                    g.drawImage(listaDeCarros.get(i).getImagen().get(0).getImage(), listaDeCarros.get(i).getX() - 7, listaDeCarros.get(i).getY() + 5, listaDeCarros.get(i).getAlto(), listaDeCarros.get(i).getAncho(), this);
                }
                if ("Abajo".equals(frame.getCalles().get(idCalle).getSentido())) {
                    g.drawImage(listaDeCarros.get(i).getImagen().get(1).getImage(), listaDeCarros.get(i).getX() - 7, listaDeCarros.get(i).getY() + 5, listaDeCarros.get(i).getAlto(), listaDeCarros.get(i).getAncho(), this);
                }
                if ("Doble sentido".equals(frame.getCalles().get(idCalle).getSentido())) {
                    //falta cuando son doble sentido 
                    // es igual que las de arriba pero se verifica con mas nodos, y con las posiciones de la lista.

                    if ("XUL".equals(frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(1).getSentido())
                            || "xUL".equals(frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(1).getSentido())
                            || "XDR".equals(frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(1).getSentido())
                            || "xDR".equals(frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(1).getSentido())) {
                        //para cuando 0  
                        //cuando Y de lista de carros es mayor o menor que el Y del nodo de esa calle en XUL y XDR y en X se mantiene igual.
                        if ((listaDeCarros.get(i).getY() > frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(1).getY() || listaDeCarros.get(i).getY() < frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(1).getY()) && listaDeCarros.get(i).getX() == frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(1).getX()) {
                            g.drawImage(listaDeCarros.get(i).getImagen().get(1).getImage(), listaDeCarros.get(i).getX() - 20, listaDeCarros.get(i).getY() - 7, listaDeCarros.get(i).getAncho(), listaDeCarros.get(i).getAlto(), this);
                        }
                        //cuando X de lista de carros es mayor o menor que el X del nodo de esa calle en XUL y XDR y en X se mantiene igual.
                        if ((listaDeCarros.get(i).getX() > frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(1).getX() || listaDeCarros.get(i).getX() < frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(1).getX()) && listaDeCarros.get(i).getY() == frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(1).getY()) {
                            g.drawImage(listaDeCarros.get(i).getImagen().get(2).getImage(), listaDeCarros.get(i).getX() - 20, listaDeCarros.get(i).getY() - 7, listaDeCarros.get(i).getAncho(), listaDeCarros.get(i).getAlto(), this);
                        }
                        //para cuando x y y de la lista de carros son iguales  a la de los nodos 
                        if (listaDeCarros.get(i).getY() == frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(1).getY() && listaDeCarros.get(i).getX() == frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(1).getX()) {
                            g.drawImage(listaDeCarros.get(i).getImagen().get(2).getImage(), listaDeCarros.get(i).getX() - 20, listaDeCarros.get(i).getY() - 7, listaDeCarros.get(i).getAncho(), listaDeCarros.get(i).getAlto(), this);
                        }

                        // para cuando 1
                        //cuando Y de lista de carros es mayor o menor que el Y del nodo de esa calle en XUL y XDR y en X se mantiene igual.
                        if ((listaDeCarros.get(i).getY() > frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(0).getY() || listaDeCarros.get(i).getY() < frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(0).getY()) && listaDeCarros.get(i).getX() == frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(0).getX()) {
                            g.drawImage(listaDeCarros.get(i).getImagen().get(0).getImage(), listaDeCarros.get(i).getX() - 20, listaDeCarros.get(i).getY() - 7, listaDeCarros.get(i).getAncho(), listaDeCarros.get(i).getAlto(), this);
                        }
                        //cuando X de lista de carros es mayor o menor que el X del nodo de esa calle en XUL y XDR y en X se mantiene igual.
                        if ((listaDeCarros.get(i).getX() > frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(0).getX() || listaDeCarros.get(i).getX() < frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(0).getX()) && listaDeCarros.get(i).getY() == frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(0).getY()) {
                            g.drawImage(listaDeCarros.get(i).getImagen().get(3).getImage(), listaDeCarros.get(i).getX() - 20, listaDeCarros.get(i).getY() - 7, listaDeCarros.get(i).getAncho(), listaDeCarros.get(i).getAlto(), this);
                        }
                        //para cuando x y y de la lista de carros son iguales  a la de los nodos 
                        if (listaDeCarros.get(i).getY() == frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(0).getY() && listaDeCarros.get(i).getX() == frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(0).getX()) {
                            g.drawImage(listaDeCarros.get(i).getImagen().get(3).getImage(), listaDeCarros.get(i).getX() - 20, listaDeCarros.get(i).getY() - 7, listaDeCarros.get(i).getAncho(), listaDeCarros.get(i).getAlto(), this);
                        }
                    }
                    if ("XUR".equals(frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(1).getSentido())
                            || "xUR".equals(frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(1).getSentido())
                            || "XDL".equals(frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(1).getSentido())
                            || "xDL".equals(frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(1).getSentido())) {
                        ///para cuando 0    
                        //cuando Y de lista de carros es mayor o menor que el Y del nodo de esa calle en XUL y XDR y en X se mantiene igual.
                        if ((listaDeCarros.get(i).getY() > frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(1).getY() || listaDeCarros.get(i).getY() < frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(1).getY()) && listaDeCarros.get(i).getX() == frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(1).getX()) {
                            g.drawImage(listaDeCarros.get(i).getImagen().get(0).getImage(), listaDeCarros.get(i).getX() - 20, listaDeCarros.get(i).getY() - 7, listaDeCarros.get(i).getAncho(), listaDeCarros.get(i).getAlto(), this);
                        }
                        //cuando X de lista de carros es mayor o menor que el X del nodo de esa calle en XUL y XDR y en X se mantiene igual.
                        if ((listaDeCarros.get(i).getX() > frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(1).getX() || listaDeCarros.get(i).getX() < frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(1).getX()) && listaDeCarros.get(i).getY() == frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(1).getY()) {
                            g.drawImage(listaDeCarros.get(i).getImagen().get(2).getImage(), listaDeCarros.get(i).getX() - 20, listaDeCarros.get(i).getY() - 7, listaDeCarros.get(i).getAncho(), listaDeCarros.get(i).getAlto(), this);
                        }
                        //para cuando x y y de la lista de carros son iguales  a la de los nodos 
                        if (listaDeCarros.get(i).getY() == frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(1).getY() && listaDeCarros.get(i).getX() == frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(1).getX()) {
                            g.drawImage(listaDeCarros.get(i).getImagen().get(2).getImage(), listaDeCarros.get(i).getX() - 20, listaDeCarros.get(i).getY() - 7, listaDeCarros.get(i).getAncho(), listaDeCarros.get(i).getAlto(), this);
                        }

                        ///para cuando 1   
                        //cuando Y de lista de carros es mayor o menor que el Y del nodo de esa calle en XUL y XDR y en X se mantiene igual.
                        if ((listaDeCarros.get(i).getY() > frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(0).getY() || listaDeCarros.get(i).getY() < frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(0).getY()) && listaDeCarros.get(i).getX() == frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(0).getX()) {
                            g.drawImage(listaDeCarros.get(i).getImagen().get(1).getImage(), listaDeCarros.get(i).getX() - 20, listaDeCarros.get(i).getY() - 7, listaDeCarros.get(i).getAncho(), listaDeCarros.get(i).getAlto(), this);
                        }
                        //cuando X de lista de carros es mayor o menor que el X del nodo de esa calle en XUL y XDR y en X se mantiene igual.
                        if ((listaDeCarros.get(i).getX() > frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(0).getX() || listaDeCarros.get(i).getX() < frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(0).getX()) && listaDeCarros.get(i).getY() == frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(0).getY()) {
                            g.drawImage(listaDeCarros.get(i).getImagen().get(3).getImage(), listaDeCarros.get(i).getX() - 20, listaDeCarros.get(i).getY() - 7, listaDeCarros.get(i).getAncho(), listaDeCarros.get(i).getAlto(), this);
                        }
                        //para cuando x y y de la lista de carros son iguales  a la de los nodos 
                        if (listaDeCarros.get(i).getY() == frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(0).getY() && listaDeCarros.get(i).getX() == frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(0).getX()) {
                            g.drawImage(listaDeCarros.get(i).getImagen().get(3).getImage(), listaDeCarros.get(i).getX() - 20, listaDeCarros.get(i).getY() - 7, listaDeCarros.get(i).getAncho(), listaDeCarros.get(i).getAlto(), this);
                        }
                    }

                    //para izquierda o derecha se verifica es con las posiciones Y de los nodos si coinciden Y con 0
                    //esta hacia la izquierda y si coincide con 1 esta hacia la derecha
                    if ("H".equals(frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(0).getSentido())
                            || "h".equals(frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(0).getSentido())) {
                        if (listaDeCarros.get(i).getY() == frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(0).getY()) {
                            g.drawImage(listaDeCarros.get(i).getImagen().get(2).getImage(), listaDeCarros.get(i).getX() - 7, listaDeCarros.get(i).getY() + 5, listaDeCarros.get(i).getAlto(), listaDeCarros.get(i).getAncho(), this);
                        }
                        if (listaDeCarros.get(i).getY() == frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(1).getY()) {
                            g.drawImage(listaDeCarros.get(i).getImagen().get(3).getImage(), listaDeCarros.get(i).getX() - 20, listaDeCarros.get(i).getY() - 7, listaDeCarros.get(i).getAncho(), listaDeCarros.get(i).getAlto(), this);
                        }

                    }

                    //para arriba o abajo se verifica es con las posiciones x de los nodos si coincide x con nodo 0 
                    //esta subiendo y si coincide con x  nodo 1 esta bajando se coloca la imagen respectiva a ese movimiento.
                    if ("V".equals(frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(0).getSentido())
                            || "v".equals(frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(0).getSentido())) {
                        if (listaDeCarros.get(i).getX() == frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(0).getX()) {
                            g.drawImage(listaDeCarros.get(i).getImagen().get(0).getImage(), listaDeCarros.get(i).getX() - 7, listaDeCarros.get(i).getY() + 5, listaDeCarros.get(i).getAlto(), listaDeCarros.get(i).getAncho(), this);
                        }
                        if (listaDeCarros.get(i).getX() == frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(1).getX()) {
                            g.drawImage(listaDeCarros.get(i).getImagen().get(1).getImage(), listaDeCarros.get(i).getX() - 7, listaDeCarros.get(i).getY() + 5, listaDeCarros.get(i).getAlto(), listaDeCarros.get(i).getAncho(), this);
                        }
                    }

                    ///para XX o xx cuando concuerda x y Y con la del nodo no pinta.
                    if ("XX".equals(frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(0).getSentido())
                            || "xx".equals(frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(0).getSentido())) {

                        
                        //para izquierda
                        if ((listaDeCarros.get(i).getY() == frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(0).getY() || listaDeCarros.get(i).getY() == frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(1).getY())
                                && (listaDeCarros.get(i).getX() != frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(0).getX())) {
                            g.drawImage(listaDeCarros.get(i).getImagen().get(2).getImage(), listaDeCarros.get(i).getX() - 7, listaDeCarros.get(i).getY() + 5, listaDeCarros.get(i).getAlto(), listaDeCarros.get(i).getAncho(), this);
                            listaDeCarros.get(i).setImgAnterior0(false);
                            listaDeCarros.get(i).setImgAnterior1(false);
                            listaDeCarros.get(i).setImgAnterior2(true);
                            listaDeCarros.get(i).setImgAnterior3(false);
                            
                        }

                        //para derecha
                        if ((listaDeCarros.get(i).getY() == frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(2).getY() || listaDeCarros.get(i).getY() == frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(3).getY())
                                && (listaDeCarros.get(i).getX() != frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(2).getX() )) {
                            g.drawImage(listaDeCarros.get(i).getImagen().get(3).getImage(), listaDeCarros.get(i).getX() - 7, listaDeCarros.get(i).getY() + 5, listaDeCarros.get(i).getAlto(), listaDeCarros.get(i).getAncho(), this);
                           
                            listaDeCarros.get(i).setImgAnterior0(false);
                            listaDeCarros.get(i).setImgAnterior1(false);
                            listaDeCarros.get(i).setImgAnterior2(false);
                            listaDeCarros.get(i).setImgAnterior3(true);
                        }

                        //para abajo
                        if ((listaDeCarros.get(i).getX() == frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(0).getX() || listaDeCarros.get(i).getX() == frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(2).getX())
                                && (listaDeCarros.get(i).getY() != frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(0).getY())) {
                            g.drawImage(listaDeCarros.get(i).getImagen().get(1).getImage(), listaDeCarros.get(i).getX() - 7, listaDeCarros.get(i).getY() + 5, listaDeCarros.get(i).getAlto(), listaDeCarros.get(i).getAncho(), this);
                            listaDeCarros.get(i).setImgAnterior0(false);
                            listaDeCarros.get(i).setImgAnterior1(true);
                            listaDeCarros.get(i).setImgAnterior2(false);
                            listaDeCarros.get(i).setImgAnterior3(false);
                            
                        }

                        //para arriba
                        if ((listaDeCarros.get(i).getX() == frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(1).getX() || listaDeCarros.get(i).getX() == frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(3).getX())
                                && (listaDeCarros.get(i).getY() != frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(1).getX())) {
                            g.drawImage(listaDeCarros.get(i).getImagen().get(0).getImage(), listaDeCarros.get(i).getX() - 7, listaDeCarros.get(i).getY() + 5, listaDeCarros.get(i).getAlto(), listaDeCarros.get(i).getAncho(), this);
                            listaDeCarros.get(i).setImgAnterior0(true);
                            listaDeCarros.get(i).setImgAnterior1(false);
                            listaDeCarros.get(i).setImgAnterior2(false);
                            listaDeCarros.get(i).setImgAnterior3(false);
                            
                        }

                        //para cuando son iguales en 0
                        if (listaDeCarros.get(i).getX() == frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(0).getX() && listaDeCarros.get(i).getX() == frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(0).getX()) {

                            
                            if (listaDeCarros.get(i).isImgAnterior1() == true) {
                                g.drawImage(listaDeCarros.get(i).getImagen().get(1).getImage(), listaDeCarros.get(i).getX() - 7, listaDeCarros.get(i).getY() + 5, listaDeCarros.get(i).getAlto(), listaDeCarros.get(i).getAncho(), this);

                            }
                            if (listaDeCarros.get(i).isImgAnterior2() == true) {
                                g.drawImage(listaDeCarros.get(i).getImagen().get(2).getImage(), listaDeCarros.get(i).getX() - 7, listaDeCarros.get(i).getY() + 5, listaDeCarros.get(i).getAlto(), listaDeCarros.get(i).getAncho(), this);

                            }
                        }
                        //para cuando son iguales en 1
                        if (listaDeCarros.get(i).getX() == frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(1).getX() && listaDeCarros.get(i).getX() == frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(1).getX()) {

                            if (listaDeCarros.get(i).isImgAnterior0() == true) {
                                g.drawImage(listaDeCarros.get(i).getImagen().get(0).getImage(), listaDeCarros.get(i).getX() - 7, listaDeCarros.get(i).getY() + 5, listaDeCarros.get(i).getAlto(), listaDeCarros.get(i).getAncho(), this);
                            }
                            if (listaDeCarros.get(i).isImgAnterior2() == true) {
                                g.drawImage(listaDeCarros.get(i).getImagen().get(2).getImage(), listaDeCarros.get(i).getX() - 7, listaDeCarros.get(i).getY() + 5, listaDeCarros.get(i).getAlto(), listaDeCarros.get(i).getAncho(), this);
                            }
                        }
                        //para cuando son iguales en 2
                        if (listaDeCarros.get(i).getX() == frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(2).getX() && listaDeCarros.get(i).getX() == frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(2).getX()) {

                            if (listaDeCarros.get(i).isImgAnterior1() == true) {
                                g.drawImage(listaDeCarros.get(i).getImagen().get(1).getImage(), listaDeCarros.get(i).getX() - 7, listaDeCarros.get(i).getY() + 5, listaDeCarros.get(i).getAlto(), listaDeCarros.get(i).getAncho(), this);
                            }
                            if (listaDeCarros.get(i).isImgAnterior3() == true) {
                                g.drawImage(listaDeCarros.get(i).getImagen().get(3).getImage(), listaDeCarros.get(i).getX() - 7, listaDeCarros.get(i).getY() + 5, listaDeCarros.get(i).getAlto(), listaDeCarros.get(i).getAncho(), this);
                            }
                        }
                        //para cuando son iguales en 3
                        if (listaDeCarros.get(i).getX() == frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(3).getX() && listaDeCarros.get(i).getX() == frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(3).getX()) {

                            if (listaDeCarros.get(i).isImgAnterior0() == true) {
                                g.drawImage(listaDeCarros.get(i).getImagen().get(0).getImage(), listaDeCarros.get(i).getX() - 7, listaDeCarros.get(i).getY() + 5, listaDeCarros.get(i).getAlto(), listaDeCarros.get(i).getAncho(), this);
                            }
                            if (listaDeCarros.get(i).isImgAnterior3() == true) {
                                g.drawImage(listaDeCarros.get(i).getImagen().get(3).getImage(), listaDeCarros.get(i).getX() - 7, listaDeCarros.get(i).getY() + 5, listaDeCarros.get(i).getAlto(), listaDeCarros.get(i).getAncho(), this);
                            }
                        }
                        //para 0 cuando es primera vez 
                        if (listaDeCarros.get(i).getX() == frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(0).getX() && listaDeCarros.get(i).getX() == frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(0).getX()) {
                            if (listaDeCarros.get(i).isImgAnterior0() == false&&listaDeCarros.get(i).isImgAnterior1() == false&&listaDeCarros.get(i).isImgAnterior2() == false&&listaDeCarros.get(i).isImgAnterior3() == false) {
                                g.drawImage(listaDeCarros.get(i).getImagen().get(3).getImage(), listaDeCarros.get(i).getX() - 7, listaDeCarros.get(i).getY() + 5, listaDeCarros.get(i).getAlto(), listaDeCarros.get(i).getAncho(), this);
                                System.out.println("entro 0 false");
                            }
                        }
                        
                         //para 1 cuando es primera vez 
                        if (listaDeCarros.get(i).getX() == frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(1).getX() && listaDeCarros.get(i).getX() == frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(1).getX()) {
                            if (listaDeCarros.get(i).isImgAnterior0() == false&&listaDeCarros.get(i).isImgAnterior1() == false&&listaDeCarros.get(i).isImgAnterior2() == false&&listaDeCarros.get(i).isImgAnterior3() == false) {
                                g.drawImage(listaDeCarros.get(i).getImagen().get(3).getImage(), listaDeCarros.get(i).getX() - 7, listaDeCarros.get(i).getY() + 5, listaDeCarros.get(i).getAlto(), listaDeCarros.get(i).getAncho(), this);
                              //  System.out.println("aca 1 entro en el primera vez");
                            }
                        }
                         //para 2 cuando es primera vez 
                        if (listaDeCarros.get(i).getX() == frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(2).getX() && listaDeCarros.get(i).getX() == frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(2).getX()) {
                            if (listaDeCarros.get(i).isImgAnterior0() == false&&listaDeCarros.get(i).isImgAnterior1() == false&&listaDeCarros.get(i).isImgAnterior2() == false&&listaDeCarros.get(i).isImgAnterior3() == false) {
                                g.drawImage(listaDeCarros.get(i).getImagen().get(2).getImage(), listaDeCarros.get(i).getX() - 7, listaDeCarros.get(i).getY() + 5, listaDeCarros.get(i).getAlto(), listaDeCarros.get(i).getAncho(), this);
                                //System.out.println("aca 2 entro en el primera vez");
                            }
                        }
                         //para 3 cuando es primera vez 
                        if (listaDeCarros.get(i).getX() == frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(3).getX() && listaDeCarros.get(i).getX() == frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(3).getX()) {
                            if (listaDeCarros.get(i).isImgAnterior0() == false&&listaDeCarros.get(i).isImgAnterior1() == false&&listaDeCarros.get(i).isImgAnterior2() == false&&listaDeCarros.get(i).isImgAnterior3() == false) {
                                g.drawImage(listaDeCarros.get(i).getImagen().get(2).getImage(), listaDeCarros.get(i).getX() - 7, listaDeCarros.get(i).getY() + 5, listaDeCarros.get(i).getAlto(), listaDeCarros.get(i).getAncho(), this);
                                //System.out.println("aca 3 entro en el primera vez");
                            }
                        }

                    }

                }

            }

        }

        repaint();

    }

    @Override
    public void mouseClicked(MouseEvent e) {
        FormularioParaAnimacionCarro formulario = new FormularioParaAnimacionCarro();

        int x = (int) e.getPoint().getX();
        int y = (int) e.getPoint().getY();

        int[] cuadroSeleccionado = new int[2];
        cuadroSeleccionado = retornarPosicionCuadriculaSeleccionada(x, y);

        formulario.recibirPanel(this, cuadroSeleccionado[0], cuadroSeleccionado[1]);
        formulario.setVisible(true);

    }

    public void recibirFrameCrearMapa(FrameAnimacionMapa frameRecibido) {
        this.frame = frameRecibido;
    }

    public void crearCarro(LinkedList<ImageIcon> lista, int x, int y) {
        //recibe x y y de la matriz para saber en que posicion lo creo.
        int iCalle = matrizCuadriculaMapaIdCalles[x][y];

        if (iCalle != -1) {
            //lo agrego en el nodo 0 de cada calle
            int xNodo = frame.getCalles().get(iCalle).getListaDeNodosEnCalle().get(0).getX();
            int yNodo = frame.getCalles().get(iCalle).getListaDeNodosEnCalle().get(0).getY();

            Automovil auto = new Automovil(listaDeCarros.size(), xNodo, yNodo, 22, 16, false);
            auto.setImagen(lista);//aqui recibe un tipo imageIcon

            listaDeCarros.add(auto);
        }
    }

    ///metodo para verificar si hay algun elemento en esa posicion de la matriz de elementos 
    public boolean hayAlgunElemento() {
        for (int i = 0; i < 10; i++) {
            for (int j = 0; j < 20; j++) {
                if (!"".equals(matrizLetrasElementosInternosCuadriculaMapa[j][i])) {
                    return true;
                } else {
                    return false;
                }
            }
        }
        return false;
    }

    public void mostrarMatricezEnConsola() {
        //ciclo para mostrar las matrices de elementos 
        String cadena2;

        System.out.println("");

        System.out.println("        00       01       02       03       04       05       06       07       08       09       10       11       12       13       14       15       16       17       18       19       20 ");
        for (int i = 0; i < 10; i++) {
            cadena2 = i + " ";
            for (int j = 0; j < 20; j++) {
                cadena2 = cadena2 + "    " + matrizLetrasElementosInternosCuadriculaMapa[j][i];
            }
            System.out.println(cadena2);
        }
        //ciclo para mostrar las matrices de id calles 
        String cadena1;

        System.out.println("");

        System.out.println("        00       01       02       03       04       05       06       07       08       09       10       11       12       13       14       15       16       17       18       19       20 ");
        for (int i = 0; i < 10; i++) {
            cadena1 = i + " ";
            for (int j = 0; j < 20; j++) {
                cadena1 = cadena1 + "       " + matrizCuadriculaMapaIdCalles[j][i];
            }
            System.out.println(cadena1);
        }
    }

    //metodo para que retorna en una vector de dos posiciones con  las posiciones X y Y  
    //que selecciono  de la matriz con el evento mouseClicke  
    public int[] retornarPosicionCuadriculaSeleccionada(int x, int y) {
        boolean encontroX = false;
        boolean encontroY = false;
        int i = 0;
        int j = 0;
        int[] datosXY = new int[2];
        //para encontrar limites en x 
        while (i < 20 && encontroX == false) {
            if (matrizPuntosLimitesCuadriculaMapa[i][j].getX1() <= x && matrizPuntosLimitesCuadriculaMapa[i][j].getX2() >= x) {
                encontroX = true;
                datosXY[0] = i;
            }
            i++;
        }
        //para encontrar limites en y despues de haber encontrado x
        if (encontroX == true) {
            while (j < 10 && encontroY == false) {
                if (matrizPuntosLimitesCuadriculaMapa[datosXY[0]][j].getY1() <= y && matrizPuntosLimitesCuadriculaMapa[datosXY[0]][j].getY2() >= y) {
                    encontroY = true;
                    datosXY[1] = j;
                }
                j++;
            }
        } else {
            System.out.println("verifique posiciones seleccionadas");
        }
        if (encontroY == true) {
            return datosXY;
        }
        return null;
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    public PuntosLimiteCuadricula[][] getMatrizPuntosLimitesCuadriculaMapa() {
        return matrizPuntosLimitesCuadriculaMapa;
    }

    public String[][] getMatrizLetrasElementosInternosCuadriculaMapa() {
        return matrizLetrasElementosInternosCuadriculaMapa;
    }

    public int[][] getMatrizCuadriculaMapaIdCalles() {
        return matrizCuadriculaMapaIdCalles;
    }

    public int[][] getMatrizCuadriculaMapaIdEdificios() {
        return matrizCuadriculaMapaIdEdificios;
    }

    public int[][] getMatrizCuadriculaMapaIdArboles() {
        return matrizCuadriculaMapaIdArboles;
    }

    public FrameAnimacionMapa getFrame() {
        return frame;
    }

    public void setMatrizPuntosLimitesCuadriculaMapa(PuntosLimiteCuadricula[][] matrizPuntosLimitesCuadriculaMapa) {
        this.matrizPuntosLimitesCuadriculaMapa = matrizPuntosLimitesCuadriculaMapa;
    }

    public void setMatrizLetrasElementosInternosCuadriculaMapa(String[][] matrizLetrasElementosInternosCuadriculaMapa) {
        this.matrizLetrasElementosInternosCuadriculaMapa = matrizLetrasElementosInternosCuadriculaMapa;
    }

    public void setMatrizCuadriculaMapaIdCalles(int[][] matrizCuadriculaMapaIdCalles) {
        this.matrizCuadriculaMapaIdCalles = matrizCuadriculaMapaIdCalles;
    }

    public void setMatrizCuadriculaMapaIdArboles(int[][] matrizCuadriculaMapaIdArboles) {
        this.matrizCuadriculaMapaIdArboles = matrizCuadriculaMapaIdArboles;
    }

    public void setMatrizCuadriculaMapaIdEdificios(int[][] matrizCuadriculaMapaIdEdificios) {
        this.matrizCuadriculaMapaIdEdificios = matrizCuadriculaMapaIdEdificios;
    }

    public void setFrame(FrameAnimacionMapa frame) {
        this.frame = frame;
    }

    @Override
    public void mousePressed(MouseEvent me) {
        //  throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void mouseReleased(MouseEvent me) {
        // throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void mouseEntered(MouseEvent e) {
    }

    @Override
    public void mouseExited(MouseEvent me) {
        // throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void keyTyped(KeyEvent ke) {
        //  throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void keyPressed(KeyEvent ke) {
        //   throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void keyReleased(KeyEvent ke) {
        //  throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void mouseDragged(MouseEvent e) {
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.

    }

    @Override
    public void mouseMoved(MouseEvent e) {
        // throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.

    }
}
