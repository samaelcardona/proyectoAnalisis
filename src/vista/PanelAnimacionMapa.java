/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package vista;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.MouseMotionListener;
import java.util.LinkedList;
import javax.swing.JOptionPane;
import modelo.Arbol;
import modelo.AristaGrafoMapa;
import modelo.Calle;
import modelo.Edificio;
import modelo.NodoGrafoMapa;
import modelo.PuntosLimiteCuadricula;

/**
 *
 * @author SAMAEL
 */
public class PanelAnimacionMapa extends javax.swing.JPanel implements MouseMotionListener, MouseListener, KeyListener {

//    int x = 20;
//    int y = 10;
    PuntosLimiteCuadricula[][] matrizPuntosLimitesCuadriculaMapa = new PuntosLimiteCuadricula[20][10];
    String[][] matrizLetrasElementosInternosCuadriculaMapa = new String[20][10];
    //Matriz para agregar los Id de cada calle de la cuadricula
    int[][] matrizCuadriculaMapaIdCalles = new int[20][10];
    int[][] matrizCuadriculaMapaIdArboles = new int[20][10];
    int[][] matrizCuadriculaMapaIdEdificios = new int[20][10];
    private FrameAnimacionMapa frame;


    /**
     * Creates new form PanelCrearMapa
     */
    public PanelAnimacionMapa() {
        initComponents();

        addKeyListener(this);
        setFocusable(true);
        setFocusTraversalKeysEnabled(false);
        addMouseListener(this);
        addMouseMotionListener(this);

        for (int i = 0; i < 20; i++) {
            for (int j = 0; j < 10; j++) {
                matrizPuntosLimitesCuadriculaMapa[i][j] = new PuntosLimiteCuadricula();
                matrizLetrasElementosInternosCuadriculaMapa[i][j] = "";
                matrizCuadriculaMapaIdCalles[i][j] = -1;
                matrizCuadriculaMapaIdArboles[i][j] = -1;
                matrizCuadriculaMapaIdEdificios[i][j] = -1;
            }
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setMaximumSize(new java.awt.Dimension(1120, 560));
        setMinimumSize(new java.awt.Dimension(1120, 560));
        setPreferredSize(new java.awt.Dimension(1120, 560));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1120, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 560, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g); //To change body of generated methods, choose Tools | Templates.
        ///aca se grafica las lineas horizontales para la cuadricula
//        for (int i = 0; i <= x; i++) {
//            g.drawLine((i * 56), 0, (i * 56), 560);
//        }
//        g.drawLine(1119, 0, 1119, 560);
//
//        ///aca se grafica las lineas  verticales para la cuadricula.
//        for (int i = 0; i <= y; i++) {
//            g.drawLine(0, (i * 56), 1120, (i * 56));
//        }
//        g.drawLine(0, 559, 1120, 559);


        /// solo para las calles pero luego se modifica para los edificios tomando la matriz de elementos (String) 
        //y graficando toca que crear una matriz de edificios y los arboles si normal 
        for (int i = 0; i < 10; i++) {
            for (int j = 0; j < 20; j++) {
                //System.out.println("posx "+j+" posy "+i+" elemento "+matrizLetrasElementosInternosCuadriculaMapa[j][i]);
                //System.out.println("matriz " + matrizLetrasElementosInternosCuadriculaMapa[j][i] +" calle id "+matrizCuadriculaMapaIdCalles[j][i]);
                if (!"".equals(matrizLetrasElementosInternosCuadriculaMapa[j][i])) {
                    if (matrizCuadriculaMapaIdCalles[j][i] != -1) {
                        //System.out.println("calle"+frame.getCalles().get(matrizCuadriculaMapaIdCalles[j][i]).getId());
                        g.drawImage(frame.getCalles().get(matrizCuadriculaMapaIdCalles[j][i]).getImagen().getImage(), frame.getCalles().get(matrizCuadriculaMapaIdCalles[j][i]).getX(), frame.getCalles().get(matrizCuadriculaMapaIdCalles[j][i]).getY(), frame.getCalles().get(matrizCuadriculaMapaIdCalles[j][i]).getAncho(), frame.getCalles().get(matrizCuadriculaMapaIdCalles[j][i]).getAlto(), this);
                        for (int k = 0; k < frame.getCalles().get(matrizCuadriculaMapaIdCalles[j][i]).getListaDeNodosEnCalle().size(); k++) {
                             g.drawOval(frame.getCalles().get(matrizCuadriculaMapaIdCalles[j][i]).getListaDeNodosEnCalle().get(k).getX(), frame.getCalles().get(matrizCuadriculaMapaIdCalles[j][i]).getListaDeNodosEnCalle().get(k).getY(), frame.getCalles().get(matrizCuadriculaMapaIdCalles[j][i]).getListaDeNodosEnCalle().get(k).getAncho(),frame.getCalles().get(matrizCuadriculaMapaIdCalles[j][i]).getListaDeNodosEnCalle().get(k).getAlto());
                        }
                       
                    }
                    if (matrizCuadriculaMapaIdArboles[j][i] != -1) {
                        g.drawImage(frame.getArboles().get(matrizCuadriculaMapaIdArboles[j][i]).getImagen().getImage(), frame.getArboles().get(matrizCuadriculaMapaIdArboles[j][i]).getX(), frame.getArboles().get(matrizCuadriculaMapaIdArboles[j][i]).getY(), frame.getArboles().get(matrizCuadriculaMapaIdArboles[j][i]).getAncho(), frame.getArboles().get(matrizCuadriculaMapaIdArboles[j][i]).getAlto(), this);
                    }

                    if (matrizCuadriculaMapaIdEdificios[j][i] != -1) {
                        g.drawImage(frame.getEdificios().get(matrizCuadriculaMapaIdEdificios[j][i]).getImagen().getImage(), frame.getEdificios().get(matrizCuadriculaMapaIdEdificios[j][i]).getX(), frame.getEdificios().get(matrizCuadriculaMapaIdEdificios[j][i]).getY(), frame.getEdificios().get(matrizCuadriculaMapaIdEdificios[j][i]).getAncho(), frame.getEdificios().get(matrizCuadriculaMapaIdEdificios[j][i]).getAlto(), this);
                    }

                }
            }
        }

        repaint();

    }

    public void recibirFrameCrearMapa(FrameAnimacionMapa frameRecibido) {
        this.frame = frameRecibido;
    }

    @Override
    public void mouseDragged(MouseEvent e) {
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.

    }

    @Override
    public void mouseMoved(MouseEvent e) {
        // throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.

    }

    @Override
    public void mouseClicked(MouseEvent e) {
     FormularioParaAnimacionCarro formulario = new FormularioParaAnimacionCarro();
     
    }

    @Override
    public void mousePressed(MouseEvent me) {
        //  throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void mouseReleased(MouseEvent me) {
        // throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void mouseEntered(MouseEvent e) {
    }

    @Override
    public void mouseExited(MouseEvent me) {
        // throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void keyTyped(KeyEvent ke) {
        //  throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void keyPressed(KeyEvent ke) {
        //   throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void keyReleased(KeyEvent ke) {
        //  throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    public boolean hayAlgunElemento() {
        for (int i = 0; i < 10; i++) {
            for (int j = 0; j < 20; j++) {
                if (!"".equals(matrizLetrasElementosInternosCuadriculaMapa[j][i])) {
                    return true;
                } else {
                    return false;
                }
            }
        }
        return false;
    }

    public void mostrarMatricezEnConsola() {
        //ciclo para mostrar las matrices de elementos 
        String cadena2;

        System.out.println("");

        System.out.println("        00       01       02       03       04       05       06       07       08       09       10       11       12       13       14       15       16       17       18       19       20 ");
        for (int i = 0; i < 10; i++) {
            cadena2 = i + " ";
            for (int j = 0; j < 20; j++) {
                cadena2 = cadena2 + "    " + matrizLetrasElementosInternosCuadriculaMapa[j][i];
            }
            System.out.println(cadena2);
        }

        //ciclo para mostrar las matrices de id 
        String cadena1;

        System.out.println("");

        System.out.println("        00       01       02       03       04       05       06       07       08       09       10       11       12       13       14       15       16       17       18       19       20 ");
        for (int i = 0; i < 10; i++) {
            cadena1 = i + " ";
            for (int j = 0; j < 20; j++) {
                cadena1 = cadena1 + "       " + matrizCuadriculaMapaIdCalles[j][i];
            }
            System.out.println(cadena1);
        }
         /*
         //ciclo para mostrar las matrices de limites
         String cadena;
    
         System.out.println("");

         for (int i = 0; i < 10; i++) {
         cadena="";
         for (int j = 0; j < 20; j++) {
         cadena=cadena+"para x "+j+" y "+i+"[ x1 "+matrizPuntosLimitesCuadriculaMapa[j][i].getX1()+" x2 "+matrizPuntosLimitesCuadriculaMapa[j][i].getX2()+" y1 "+matrizPuntosLimitesCuadriculaMapa[j][i].getY1()+" y2 "+matrizPuntosLimitesCuadriculaMapa[j][i].getY2()+"] ";
         }
         System.out.println(cadena);
         }

         System.out.println("pos x " + e.getX());
         System.out.println("pos y " + e.getY());
         */
        /*
         //ciclo para mostrar las matrices de elementos 
         String cadena;
    
         System.out.println("");

         System.out.println("    0  1  2  3  4  5  6  7  8  9  10  11  12  13  14  15  16  17  18  19  20 ");
         for (int i = 0; i < 10; i++) {
         cadena=i+" ";
         for (int j = 0; j < 20; j++) {
         cadena=cadena+"  "+matrizLetrasElementosInternosCuadriculaMapa[j][i];
         }
         System.out.println(cadena);
         }
         */
        /*
         //ciclo para mostrar las matrices de id 
         String cadena;
    
         System.out.println("");

         System.out.println("    0  1  2  3  4  5  6  7  8  9  10  11  12  13  14  15  16  17  18  19  20 ");
         for (int i = 0; i < 10; i++) {
         cadena=i+" ";
         for (int j = 0; j < 20; j++) {
         cadena=cadena+"  "+matrizCuadriculaMapaIdCalles[j][i];
         }
         System.out.println(cadena);
         }
           
         */
        
    }

    public int buscarIdEnlistaDeCalles(int id) {
        for (int i = 0; i < frame.getCalles().size(); i++) {
            if (frame.getCalles().get(i).getId() == id) {
                return i;
            }
        }
        return 0;
    }

    public int buscarIdEnlistaDeArboles(int id) {
        for (int i = 0; i < frame.getArboles().size(); i++) {
            if (frame.getArboles().get(i).getId() == id) {
                return i;
            }
        }
        return 0;
    }

    public int buscarIdEnlistaDeEdificios(int id) {
        for (int i = 0; i < frame.getEdificios().size(); i++) {
            if (frame.getEdificios().get(i).getId() == id) {
                return i;
            }
        }
        return 0;
    }

    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

    public PuntosLimiteCuadricula[][] getMatrizPuntosLimitesCuadriculaMapa() {
        return matrizPuntosLimitesCuadriculaMapa;
    }

    public String[][] getMatrizLetrasElementosInternosCuadriculaMapa() {
        return matrizLetrasElementosInternosCuadriculaMapa;
    }

    public int[][] getMatrizCuadriculaMapaIdCalles() {
        return matrizCuadriculaMapaIdCalles;
    }

    public int[][] getMatrizCuadriculaMapaIdEdificios() {
        return matrizCuadriculaMapaIdEdificios;
    }

    public int[][] getMatrizCuadriculaMapaIdArboles() {
        return matrizCuadriculaMapaIdArboles;
    }

    public FrameAnimacionMapa getFrame() {
        return frame;
    }

    public void setMatrizPuntosLimitesCuadriculaMapa(PuntosLimiteCuadricula[][] matrizPuntosLimitesCuadriculaMapa) {
        this.matrizPuntosLimitesCuadriculaMapa = matrizPuntosLimitesCuadriculaMapa;
    }

    public void setMatrizLetrasElementosInternosCuadriculaMapa(String[][] matrizLetrasElementosInternosCuadriculaMapa) {
        this.matrizLetrasElementosInternosCuadriculaMapa = matrizLetrasElementosInternosCuadriculaMapa;
    }

    public void setMatrizCuadriculaMapaIdCalles(int[][] matrizCuadriculaMapaIdCalles) {
        this.matrizCuadriculaMapaIdCalles = matrizCuadriculaMapaIdCalles;
    }

    public void setMatrizCuadriculaMapaIdArboles(int[][] matrizCuadriculaMapaIdArboles) {
        this.matrizCuadriculaMapaIdArboles = matrizCuadriculaMapaIdArboles;
    }

    public void setMatrizCuadriculaMapaIdEdificios(int[][] matrizCuadriculaMapaIdEdificios) {
        this.matrizCuadriculaMapaIdEdificios = matrizCuadriculaMapaIdEdificios;
    }

    public void setFrame(FrameAnimacionMapa frame) {
        this.frame = frame;
    }
    
    
    
    
    
}
