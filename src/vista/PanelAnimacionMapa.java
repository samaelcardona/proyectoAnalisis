/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package vista;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.MouseMotionListener;
import java.util.LinkedList;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import modelo.Arbol;
import modelo.AristaGrafoMapa;
import modelo.Calle;
import modelo.Edificio;
import modelo.NodoGrafoMapa;
import modelo.PuntosLimiteCuadricula;
import modelo.Automovil;
import modelo.Suceso;

/**
 *
 * @author SAMAEL
 */
public class PanelAnimacionMapa extends javax.swing.JPanel implements MouseMotionListener, MouseListener, KeyListener, Runnable {

//    int x = 20;
//    int y = 10;
    boolean validarClic;
    PuntosLimiteCuadricula[][] matrizPuntosLimitesCuadriculaMapa = new PuntosLimiteCuadricula[20][10];
    String[][] matrizLetrasElementosInternosCuadriculaMapa = new String[20][10];
    //Matriz para agregar los Id de cada calle de la cuadricula
    int[][] matrizCuadriculaMapaIdCalles = new int[20][10];
    int[][] matrizCuadriculaMapaIdArboles = new int[20][10];
    int[][] matrizCuadriculaMapaIdEdificios = new int[20][10];
    LinkedList<Automovil> listaDeCarros;
    boolean moverCarrosAleatoriamente = false;

    LinkedList<Integer> listaAuxiliarParaTomarRutaDeCarros;

    private FrameAnimacionMapa frame;

    /**
     * Creates new form PanelCrearMapa
     */
    public PanelAnimacionMapa() {
        initComponents();
        validarClic = false;
        addKeyListener(this);
        setFocusable(true);
        setFocusTraversalKeysEnabled(false);
        addMouseListener(this);
        addMouseMotionListener(this);
        listaDeCarros = new LinkedList<>();
        listaAuxiliarParaTomarRutaDeCarros = new LinkedList<>();

        for (int i = 0; i < 20; i++) {
            for (int j = 0; j < 10; j++) {
                matrizPuntosLimitesCuadriculaMapa[i][j] = new PuntosLimiteCuadricula();
                matrizLetrasElementosInternosCuadriculaMapa[i][j] = "";
                matrizCuadriculaMapaIdCalles[i][j] = -1;
                matrizCuadriculaMapaIdArboles[i][j] = -1;
                matrizCuadriculaMapaIdEdificios[i][j] = -1;
            }
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setMaximumSize(new java.awt.Dimension(1120, 560));
        setMinimumSize(new java.awt.Dimension(1120, 560));
        setPreferredSize(new java.awt.Dimension(1120, 560));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1120, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 560, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g); //To change body of generated methods, choose Tools | Templates.

        /// solo para las calles pero luego se modifica para los edificios tomando la matriz de elementos (String) 
        //y graficando toca que crear una matriz de edificios y los arboles si normal 
        for (int i = 0; i < 10; i++) {
            for (int j = 0; j < 20; j++) {
                ////System.out.println("posx "+j+" posy "+i+" elemento "+matrizLetrasElementosInternosCuadriculaMapa[j][i]);
                ////System.out.println("matriz " + matrizLetrasElementosInternosCuadriculaMapa[j][i] +" calle id "+matrizCuadriculaMapaIdCalles[j][i]);
                if (!"".equals(matrizLetrasElementosInternosCuadriculaMapa[j][i])) {
                    if (matrizCuadriculaMapaIdCalles[j][i] != -1) {
                        ////System.out.println("calle"+frame.getCalles().get(matrizCuadriculaMapaIdCalles[j][i]).getId());
                        g.drawImage(frame.getCalles().get(matrizCuadriculaMapaIdCalles[j][i]).getImagen().getImage(), frame.getCalles().get(matrizCuadriculaMapaIdCalles[j][i]).getX(), frame.getCalles().get(matrizCuadriculaMapaIdCalles[j][i]).getY(), frame.getCalles().get(matrizCuadriculaMapaIdCalles[j][i]).getAncho(), frame.getCalles().get(matrizCuadriculaMapaIdCalles[j][i]).getAlto(), this);
                        for (int k = 0; k < frame.getCalles().get(matrizCuadriculaMapaIdCalles[j][i]).getListaDeNodosEnCalle().size(); k++) {
                            g.drawOval(frame.getCalles().get(matrizCuadriculaMapaIdCalles[j][i]).getListaDeNodosEnCalle().get(k).getX(), frame.getCalles().get(matrizCuadriculaMapaIdCalles[j][i]).getListaDeNodosEnCalle().get(k).getY(), frame.getCalles().get(matrizCuadriculaMapaIdCalles[j][i]).getListaDeNodosEnCalle().get(k).getAncho(), frame.getCalles().get(matrizCuadriculaMapaIdCalles[j][i]).getListaDeNodosEnCalle().get(k).getAlto());
                            g.drawString(frame.getCalles().get(matrizCuadriculaMapaIdCalles[j][i]).getListaDeNodosEnCalle().get(k).getId() + "", frame.getCalles().get(matrizCuadriculaMapaIdCalles[j][i]).getListaDeNodosEnCalle().get(k).getX(), frame.getCalles().get(matrizCuadriculaMapaIdCalles[j][i]).getListaDeNodosEnCalle().get(k).getY());
                        }
                        if (frame.getCalles().get(matrizCuadriculaMapaIdCalles[j][i]).getSuceso() != null) {
                            g.drawImage(frame.getCalles().get(matrizCuadriculaMapaIdCalles[j][i]).getSuceso().getImagen().getImage(), frame.getCalles().get(matrizCuadriculaMapaIdCalles[j][i]).getSuceso().getX(), frame.getCalles().get(matrizCuadriculaMapaIdCalles[j][i]).getSuceso().getY(), frame.getCalles().get(matrizCuadriculaMapaIdCalles[j][i]).getSuceso().getAncho(), frame.getCalles().get(matrizCuadriculaMapaIdCalles[j][i]).getSuceso().getAlto(), this);
                        }
                    }
                    if (matrizCuadriculaMapaIdArboles[j][i] != -1) {
                        g.drawImage(frame.getArboles().get(matrizCuadriculaMapaIdArboles[j][i]).getImagen().getImage(), frame.getArboles().get(matrizCuadriculaMapaIdArboles[j][i]).getX(), frame.getArboles().get(matrizCuadriculaMapaIdArboles[j][i]).getY(), frame.getArboles().get(matrizCuadriculaMapaIdArboles[j][i]).getAncho(), frame.getArboles().get(matrizCuadriculaMapaIdArboles[j][i]).getAlto(), this);
                    }
                    if (matrizCuadriculaMapaIdEdificios[j][i] != -1) {
                        g.drawImage(frame.getEdificios().get(matrizCuadriculaMapaIdEdificios[j][i]).getImagen().getImage(), frame.getEdificios().get(matrizCuadriculaMapaIdEdificios[j][i]).getX(), frame.getEdificios().get(matrizCuadriculaMapaIdEdificios[j][i]).getY(), frame.getEdificios().get(matrizCuadriculaMapaIdEdificios[j][i]).getAncho(), frame.getEdificios().get(matrizCuadriculaMapaIdEdificios[j][i]).getAlto(), this);
                    }
                }
            }
        }

        ///espacio para pintar carros
        for (int i = 0; i < listaDeCarros.size(); i++) {
            int[] cuadroSeleccionado = new int[2];
            cuadroSeleccionado = retornarPosicionCuadriculaSeleccionada(listaDeCarros.get(i).getX(), listaDeCarros.get(i).getY());

            int idCalle = matrizCuadriculaMapaIdCalles[cuadroSeleccionado[0]][cuadroSeleccionado[1]];
            if (idCalle != -1) {

                if ("Derecha".equals(frame.getCalles().get(idCalle).getSentido())) {

                    if ("XULR".equals(frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(0).getSentido())
                            || "xULR".equals(frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(0).getSentido())
                            || "XDRR".equals(frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(0).getSentido())
                            || "xDRR".equals(frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(0).getSentido())) {
                        //cuando Y de lista de carros es mayor o menor que el Y del nodo de esa calle en XUL y XDR y en X se mantiene igual.
                        if ((listaDeCarros.get(i).getY() > frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(0).getY() || listaDeCarros.get(i).getY() < frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(0).getY()) && listaDeCarros.get(i).getX() == frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(0).getX()) {
                            g.drawImage(listaDeCarros.get(i).getImagen().get(0).getImage(), listaDeCarros.get(i).getX() - 1, listaDeCarros.get(i).getY() - 0, listaDeCarros.get(i).getAncho(), listaDeCarros.get(i).getAlto(), this);
                            listaDeCarros.get(i).setImgAnterior0(true);
                            listaDeCarros.get(i).setImgAnterior1(false);
                            listaDeCarros.get(i).setImgAnterior2(false);
                            listaDeCarros.get(i).setImgAnterior3(false);
                        }
                        //cuando X de lista de carros es mayor o menor que el X del nodo de esa calle en XUL y XDR y en X se mantiene igual.
                        if ((listaDeCarros.get(i).getX() > frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(0).getX() || listaDeCarros.get(i).getX() < frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(0).getX()) && listaDeCarros.get(i).getY() == frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(0).getY()) {
                            g.drawImage(listaDeCarros.get(i).getImagen().get(3).getImage(), listaDeCarros.get(i).getX() - 1, listaDeCarros.get(i).getY() - 0, listaDeCarros.get(i).getAncho(), listaDeCarros.get(i).getAlto(), this);
                            listaDeCarros.get(i).setImgAnterior0(false);
                            listaDeCarros.get(i).setImgAnterior1(false);
                            listaDeCarros.get(i).setImgAnterior2(false);
                            listaDeCarros.get(i).setImgAnterior3(true);
                        }
                        //para cuando x y y de la lista de carros son iguales  a la de los nodos 
                        if (listaDeCarros.get(i).getY() == frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(0).getY() && listaDeCarros.get(i).getX() == frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(0).getX()) {
                            g.drawImage(listaDeCarros.get(i).getImagen().get(3).getImage(), listaDeCarros.get(i).getX() - 1, listaDeCarros.get(i).getY() - 0, listaDeCarros.get(i).getAncho(), listaDeCarros.get(i).getAlto(), this);
                            listaDeCarros.get(i).setImgAnterior0(false);
                            listaDeCarros.get(i).setImgAnterior1(false);
                            listaDeCarros.get(i).setImgAnterior2(false);
                            listaDeCarros.get(i).setImgAnterior3(true);
                        }

                    }
                    if ("XURR".equals(frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(0).getSentido())
                            || "xURR".equals(frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(0).getSentido())
                            || "XDLR".equals(frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(0).getSentido())
                            || "xDLR".equals(frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(0).getSentido())) {
                        //cuando Y de lista de carros es mayor o menor que el Y del nodo de esa calle en XUL y XDR y en X se mantiene igual.
                        if ((listaDeCarros.get(i).getY() > frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(0).getY() || listaDeCarros.get(i).getY() < frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(0).getY()) && listaDeCarros.get(i).getX() == frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(0).getX()) {
                            g.drawImage(listaDeCarros.get(i).getImagen().get(1).getImage(), listaDeCarros.get(i).getX() - 1, listaDeCarros.get(i).getY() - 0, listaDeCarros.get(i).getAncho(), listaDeCarros.get(i).getAlto(), this);
                            listaDeCarros.get(i).setImgAnterior0(false);
                            listaDeCarros.get(i).setImgAnterior1(true);
                            listaDeCarros.get(i).setImgAnterior2(false);
                            listaDeCarros.get(i).setImgAnterior3(false);
                        }
                        //cuando X de lista de carros es mayor o menor que el X del nodo de esa calle en XUL y XDR y en X se mantiene igual.
                        if ((listaDeCarros.get(i).getX() > frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(0).getX() || listaDeCarros.get(i).getX() < frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(0).getX()) && listaDeCarros.get(i).getY() == frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(0).getY()) {
                            g.drawImage(listaDeCarros.get(i).getImagen().get(3).getImage(), listaDeCarros.get(i).getX() - 1, listaDeCarros.get(i).getY() - 0, listaDeCarros.get(i).getAncho(), listaDeCarros.get(i).getAlto(), this);
                            listaDeCarros.get(i).setImgAnterior0(false);
                            listaDeCarros.get(i).setImgAnterior1(false);
                            listaDeCarros.get(i).setImgAnterior2(false);
                            listaDeCarros.get(i).setImgAnterior3(true);
                        }
                        //para cuando x y y de la lista de carros son iguales  a la de los nodos 
                        if (listaDeCarros.get(i).getY() == frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(0).getY() && listaDeCarros.get(i).getX() == frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(0).getX()) {
                            g.drawImage(listaDeCarros.get(i).getImagen().get(3).getImage(), listaDeCarros.get(i).getX() - 1, listaDeCarros.get(i).getY() - 0, listaDeCarros.get(i).getAncho(), listaDeCarros.get(i).getAlto(), this);
                            listaDeCarros.get(i).setImgAnterior0(false);
                            listaDeCarros.get(i).setImgAnterior1(false);
                            listaDeCarros.get(i).setImgAnterior2(false);
                            listaDeCarros.get(i).setImgAnterior3(true);
                        }

                    }
                    if ("R".equals(frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(0).getSentido())
                            || "r".equals(frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(0).getSentido())) {
                        g.drawImage(listaDeCarros.get(i).getImagen().get(3).getImage(), listaDeCarros.get(i).getX(), listaDeCarros.get(i).getY(), listaDeCarros.get(i).getAncho(), listaDeCarros.get(i).getAlto(), this);
                        listaDeCarros.get(i).setImgAnterior0(false);
                        listaDeCarros.get(i).setImgAnterior1(false);
                        listaDeCarros.get(i).setImgAnterior2(false);
                        listaDeCarros.get(i).setImgAnterior3(true);
                    }

                }
                if ("Izquierda".equals(frame.getCalles().get(idCalle).getSentido())) {

                    if ("XULL".equals(frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(0).getSentido())
                            || "xULL".equals(frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(0).getSentido())
                            || "XDRL".equals(frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(0).getSentido())
                            || "xDRL".equals(frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(0).getSentido())) {
                        //cuando Y de lista de carros es mayor o menor que el Y del nodo de esa calle en XUL y XDR y en X se mantiene igual.
                        if ((listaDeCarros.get(i).getY() > frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(0).getY() || listaDeCarros.get(i).getY() < frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(0).getY()) && listaDeCarros.get(i).getX() == frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(0).getX()) {
                            g.drawImage(listaDeCarros.get(i).getImagen().get(1).getImage(), listaDeCarros.get(i).getX() - 1, listaDeCarros.get(i).getY() - 0, listaDeCarros.get(i).getAncho(), listaDeCarros.get(i).getAlto(), this);
                            listaDeCarros.get(i).setImgAnterior0(false);
                            listaDeCarros.get(i).setImgAnterior1(true);
                            listaDeCarros.get(i).setImgAnterior2(false);
                            listaDeCarros.get(i).setImgAnterior3(false);
                        }
                        //cuando X de lista de carros es mayor o menor que el X del nodo de esa calle en XUL y XDR y en X se mantiene igual.
                        if ((listaDeCarros.get(i).getX() > frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(0).getX() || listaDeCarros.get(i).getX() < frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(0).getX()) && listaDeCarros.get(i).getY() == frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(0).getY()) {
                            g.drawImage(listaDeCarros.get(i).getImagen().get(2).getImage(), listaDeCarros.get(i).getX() - 1, listaDeCarros.get(i).getY() - 0, listaDeCarros.get(i).getAncho(), listaDeCarros.get(i).getAlto(), this);
                            listaDeCarros.get(i).setImgAnterior0(false);
                            listaDeCarros.get(i).setImgAnterior1(false);
                            listaDeCarros.get(i).setImgAnterior2(true);
                            listaDeCarros.get(i).setImgAnterior3(false);
                        }
                        //para cuando x y y de la lista de carros son iguales  a la de los nodos 
                        if (listaDeCarros.get(i).getY() == frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(0).getY() && listaDeCarros.get(i).getX() == frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(0).getX()) {
                            g.drawImage(listaDeCarros.get(i).getImagen().get(2).getImage(), listaDeCarros.get(i).getX() - 1, listaDeCarros.get(i).getY() - 0, listaDeCarros.get(i).getAncho(), listaDeCarros.get(i).getAlto(), this);
                            listaDeCarros.get(i).setImgAnterior0(false);
                            listaDeCarros.get(i).setImgAnterior1(false);
                            listaDeCarros.get(i).setImgAnterior2(true);
                            listaDeCarros.get(i).setImgAnterior3(false);
                        }

                    }
                    if ("XURL".equals(frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(0).getSentido())
                            || "xURL".equals(frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(0).getSentido())
                            || "XDLL".equals(frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(0).getSentido())
                            || "xDLL".equals(frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(0).getSentido())) {
                        //cuando Y de lista de carros es mayor o menor que el Y del nodo de esa calle en XUL y XDR y en X se mantiene igual.
                        if ((listaDeCarros.get(i).getY() > frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(0).getY() || listaDeCarros.get(i).getY() < frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(0).getY()) && listaDeCarros.get(i).getX() == frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(0).getX()) {
                            g.drawImage(listaDeCarros.get(i).getImagen().get(0).getImage(), listaDeCarros.get(i).getX() - 1, listaDeCarros.get(i).getY() - 0, listaDeCarros.get(i).getAncho(), listaDeCarros.get(i).getAlto(), this);
                            listaDeCarros.get(i).setImgAnterior0(true);
                            listaDeCarros.get(i).setImgAnterior1(false);
                            listaDeCarros.get(i).setImgAnterior2(false);
                            listaDeCarros.get(i).setImgAnterior3(false);
                        }
                        //cuando X de lista de carros es mayor o menor que el X del nodo de esa calle en XUL y XDR y en X se mantiene igual.
                        if ((listaDeCarros.get(i).getX() > frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(0).getX() || listaDeCarros.get(i).getX() < frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(0).getX()) && listaDeCarros.get(i).getY() == frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(0).getY()) {
                            g.drawImage(listaDeCarros.get(i).getImagen().get(2).getImage(), listaDeCarros.get(i).getX() - 1, listaDeCarros.get(i).getY() - 0, listaDeCarros.get(i).getAncho(), listaDeCarros.get(i).getAlto(), this);
                            listaDeCarros.get(i).setImgAnterior0(false);
                            listaDeCarros.get(i).setImgAnterior1(false);
                            listaDeCarros.get(i).setImgAnterior2(true);
                            listaDeCarros.get(i).setImgAnterior3(false);
                        }
                        //para cuando x y y de la lista de carros son iguales  a la de los nodos 
                        if (listaDeCarros.get(i).getY() == frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(0).getY() && listaDeCarros.get(i).getX() == frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(0).getX()) {
                            g.drawImage(listaDeCarros.get(i).getImagen().get(2).getImage(), listaDeCarros.get(i).getX() - 1, listaDeCarros.get(i).getY() - 0, listaDeCarros.get(i).getAncho(), listaDeCarros.get(i).getAlto(), this);
                            listaDeCarros.get(i).setImgAnterior0(false);
                            listaDeCarros.get(i).setImgAnterior1(false);
                            listaDeCarros.get(i).setImgAnterior2(true);
                            listaDeCarros.get(i).setImgAnterior3(false);
                        }

                    }
                    if ("L".equals(frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(0).getSentido())
                            || "l".equals(frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(0).getSentido())) {
                        g.drawImage(listaDeCarros.get(i).getImagen().get(2).getImage(), listaDeCarros.get(i).getX() - 1, listaDeCarros.get(i).getY() - 0, listaDeCarros.get(i).getAncho(), listaDeCarros.get(i).getAlto(), this);
                        listaDeCarros.get(i).setImgAnterior0(false);
                        listaDeCarros.get(i).setImgAnterior1(false);
                        listaDeCarros.get(i).setImgAnterior2(true);
                        listaDeCarros.get(i).setImgAnterior3(false);
                    }

                }
                if ("Arriba".equals(frame.getCalles().get(idCalle).getSentido())) {
                    g.drawImage(listaDeCarros.get(i).getImagen().get(0).getImage(), listaDeCarros.get(i).getX() - 0, listaDeCarros.get(i).getY() + 0, listaDeCarros.get(i).getAlto(), listaDeCarros.get(i).getAncho(), this);
                    listaDeCarros.get(i).setImgAnterior0(true);
                    listaDeCarros.get(i).setImgAnterior1(false);
                    listaDeCarros.get(i).setImgAnterior2(false);
                    listaDeCarros.get(i).setImgAnterior3(false);
                }
                if ("Abajo".equals(frame.getCalles().get(idCalle).getSentido())) {
                    g.drawImage(listaDeCarros.get(i).getImagen().get(1).getImage(), listaDeCarros.get(i).getX() - 0, listaDeCarros.get(i).getY() + 0, listaDeCarros.get(i).getAlto(), listaDeCarros.get(i).getAncho(), this);
                    listaDeCarros.get(i).setImgAnterior0(false);
                    listaDeCarros.get(i).setImgAnterior1(true);
                    listaDeCarros.get(i).setImgAnterior2(false);
                    listaDeCarros.get(i).setImgAnterior3(false);
                }
                if ("Doble sentido".equals(frame.getCalles().get(idCalle).getSentido())) {
                    //falta cuando son doble sentido 
                    // es igual que las de arriba pero se verifica con mas nodos, y con las posiciones de la lista.

                    if ("XUL".equals(frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(1).getSentido())
                            || "xUL".equals(frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(1).getSentido())
                            || "XDR".equals(frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(1).getSentido())
                            || "xDR".equals(frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(1).getSentido())) {
                        //para cuando 0  
                        //cuando Y de lista de carros es mayor o menor que el Y del nodo de esa calle en XUL y XDR y en X se mantiene igual.
                        if ((listaDeCarros.get(i).getY() > frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(1).getY() || listaDeCarros.get(i).getY() < frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(1).getY()) && listaDeCarros.get(i).getX() == frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(1).getX()) {
                            g.drawImage(listaDeCarros.get(i).getImagen().get(0).getImage(), listaDeCarros.get(i).getX() - 1, listaDeCarros.get(i).getY() - 0, listaDeCarros.get(i).getAncho(), listaDeCarros.get(i).getAlto(), this);
                            listaDeCarros.get(i).setImgAnterior0(true);
                            listaDeCarros.get(i).setImgAnterior1(false);
                            listaDeCarros.get(i).setImgAnterior2(false);
                            listaDeCarros.get(i).setImgAnterior3(false);
                        }
                        //cuando X de lista de carros es mayor o menor que el X del nodo de esa calle en XUL y XDR y en X se mantiene igual.
                        if ((listaDeCarros.get(i).getX() > frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(1).getX() || listaDeCarros.get(i).getX() < frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(1).getX()) && listaDeCarros.get(i).getY() == frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(1).getY()) {
                            g.drawImage(listaDeCarros.get(i).getImagen().get(3).getImage(), listaDeCarros.get(i).getX() - 1, listaDeCarros.get(i).getY() - 0, listaDeCarros.get(i).getAncho(), listaDeCarros.get(i).getAlto(), this);
                            listaDeCarros.get(i).setImgAnterior0(false);
                            listaDeCarros.get(i).setImgAnterior1(false);
                            listaDeCarros.get(i).setImgAnterior2(false);
                            listaDeCarros.get(i).setImgAnterior3(true);
                        }
                        //para cuando x y y de la lista de carros son iguales  a la de los nodos 
                        if (listaDeCarros.get(i).getY() == frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(1).getY() && listaDeCarros.get(i).getX() == frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(1).getX()) {
                            g.drawImage(listaDeCarros.get(i).getImagen().get(3).getImage(), listaDeCarros.get(i).getX() - 1, listaDeCarros.get(i).getY() - 0, listaDeCarros.get(i).getAncho(), listaDeCarros.get(i).getAlto(), this);
                            listaDeCarros.get(i).setImgAnterior0(false);
                            listaDeCarros.get(i).setImgAnterior1(false);
                            listaDeCarros.get(i).setImgAnterior2(false);
                            listaDeCarros.get(i).setImgAnterior3(true);
                        }

                        // para cuando 1
                        //cuando Y de lista de carros es mayor o menor que el Y del nodo de esa calle en XUL y XDR y en X se mantiene igual.
                        if ((listaDeCarros.get(i).getY() > frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(0).getY() || listaDeCarros.get(i).getY() < frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(0).getY()) && listaDeCarros.get(i).getX() == frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(0).getX()) {
                            g.drawImage(listaDeCarros.get(i).getImagen().get(1).getImage(), listaDeCarros.get(i).getX() - 1, listaDeCarros.get(i).getY() - 0, listaDeCarros.get(i).getAncho(), listaDeCarros.get(i).getAlto(), this);
                            listaDeCarros.get(i).setImgAnterior0(false);
                            listaDeCarros.get(i).setImgAnterior1(true);
                            listaDeCarros.get(i).setImgAnterior2(false);
                            listaDeCarros.get(i).setImgAnterior3(false);
                        }
                        //cuando X de lista de carros es mayor o menor que el X del nodo de esa calle en XUL y XDR y en X se mantiene igual.
                        if ((listaDeCarros.get(i).getX() > frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(0).getX() || listaDeCarros.get(i).getX() < frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(0).getX()) && listaDeCarros.get(i).getY() == frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(0).getY()) {
                            g.drawImage(listaDeCarros.get(i).getImagen().get(2).getImage(), listaDeCarros.get(i).getX() - 1, listaDeCarros.get(i).getY() - 0, listaDeCarros.get(i).getAncho(), listaDeCarros.get(i).getAlto(), this);
                            listaDeCarros.get(i).setImgAnterior0(false);
                            listaDeCarros.get(i).setImgAnterior1(false);
                            listaDeCarros.get(i).setImgAnterior2(true);
                            listaDeCarros.get(i).setImgAnterior3(false);
                        }
                        //para cuando x y y de la lista de carros son iguales  a la de los nodos 
                        if (listaDeCarros.get(i).getY() == frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(0).getY() && listaDeCarros.get(i).getX() == frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(0).getX()) {
                            g.drawImage(listaDeCarros.get(i).getImagen().get(2).getImage(), listaDeCarros.get(i).getX() - 1, listaDeCarros.get(i).getY() - 0, listaDeCarros.get(i).getAncho(), listaDeCarros.get(i).getAlto(), this);
                            listaDeCarros.get(i).setImgAnterior0(false);
                            listaDeCarros.get(i).setImgAnterior1(false);
                            listaDeCarros.get(i).setImgAnterior2(true);
                            listaDeCarros.get(i).setImgAnterior3(false);

                        }
                    }
                    if ("XUR".equals(frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(1).getSentido())
                            || "xUR".equals(frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(1).getSentido())
                            || "XDL".equals(frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(1).getSentido())
                            || "xDL".equals(frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(1).getSentido())) {
                        ///para cuando 0    
                        //cuando Y de lista de carros es mayor o menor que el Y del nodo de esa calle en XUL y XDR y en X se mantiene igual.
                        if ((listaDeCarros.get(i).getY() > frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(1).getY() || listaDeCarros.get(i).getY() < frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(1).getY()) && listaDeCarros.get(i).getX() == frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(1).getX()) {
                            g.drawImage(listaDeCarros.get(i).getImagen().get(1).getImage(), listaDeCarros.get(i).getX() - 1, listaDeCarros.get(i).getY() - 0, listaDeCarros.get(i).getAncho(), listaDeCarros.get(i).getAlto(), this);
                            listaDeCarros.get(i).setImgAnterior0(false);
                            listaDeCarros.get(i).setImgAnterior1(true);
                            listaDeCarros.get(i).setImgAnterior2(false);
                            listaDeCarros.get(i).setImgAnterior3(false);
                        }
                        //cuando X de lista de carros es mayor o menor que el X del nodo de esa calle en XUL y XDR y en X se mantiene igual.
                        if ((listaDeCarros.get(i).getX() > frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(1).getX() || listaDeCarros.get(i).getX() < frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(1).getX()) && listaDeCarros.get(i).getY() == frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(1).getY()) {
                            g.drawImage(listaDeCarros.get(i).getImagen().get(3).getImage(), listaDeCarros.get(i).getX() - 1, listaDeCarros.get(i).getY() - 0, listaDeCarros.get(i).getAncho(), listaDeCarros.get(i).getAlto(), this);
                            listaDeCarros.get(i).setImgAnterior0(false);
                            listaDeCarros.get(i).setImgAnterior1(false);
                            listaDeCarros.get(i).setImgAnterior2(false);
                            listaDeCarros.get(i).setImgAnterior3(true);
                        }
                        //para cuando x y y de la lista de carros son iguales  a la de los nodos 
                        if (listaDeCarros.get(i).getY() == frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(1).getY() && listaDeCarros.get(i).getX() == frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(1).getX()) {
                            g.drawImage(listaDeCarros.get(i).getImagen().get(3).getImage(), listaDeCarros.get(i).getX() - 1, listaDeCarros.get(i).getY() - 0, listaDeCarros.get(i).getAncho(), listaDeCarros.get(i).getAlto(), this);
                            listaDeCarros.get(i).setImgAnterior0(false);
                            listaDeCarros.get(i).setImgAnterior1(false);
                            listaDeCarros.get(i).setImgAnterior2(false);
                            listaDeCarros.get(i).setImgAnterior3(true);
                        }

                        ///para cuando 1   
                        //cuando Y de lista de carros es mayor o menor que el Y del nodo de esa calle en XUL y XDR y en X se mantiene igual.
                        if ((listaDeCarros.get(i).getY() > frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(0).getY() || listaDeCarros.get(i).getY() < frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(0).getY()) && listaDeCarros.get(i).getX() == frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(0).getX()) {
                            g.drawImage(listaDeCarros.get(i).getImagen().get(0).getImage(), listaDeCarros.get(i).getX() - 1, listaDeCarros.get(i).getY() - 0, listaDeCarros.get(i).getAncho(), listaDeCarros.get(i).getAlto(), this);
                            listaDeCarros.get(i).setImgAnterior0(true);
                            listaDeCarros.get(i).setImgAnterior1(false);
                            listaDeCarros.get(i).setImgAnterior2(false);
                            listaDeCarros.get(i).setImgAnterior3(false);

                        }
                        //cuando X de lista de carros es mayor o menor que el X del nodo de esa calle en XUL y XDR y en X se mantiene igual.
                        if ((listaDeCarros.get(i).getX() > frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(0).getX() || listaDeCarros.get(i).getX() < frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(0).getX()) && listaDeCarros.get(i).getY() == frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(0).getY()) {
                            g.drawImage(listaDeCarros.get(i).getImagen().get(2).getImage(), listaDeCarros.get(i).getX() - 1, listaDeCarros.get(i).getY() - 0, listaDeCarros.get(i).getAncho(), listaDeCarros.get(i).getAlto(), this);
                            listaDeCarros.get(i).setImgAnterior0(false);
                            listaDeCarros.get(i).setImgAnterior1(false);
                            listaDeCarros.get(i).setImgAnterior2(true);
                            listaDeCarros.get(i).setImgAnterior3(false);
                        }
                        //para cuando x y y de la lista de carros son iguales  a la de los nodos 
                        if (listaDeCarros.get(i).getY() == frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(0).getY() && listaDeCarros.get(i).getX() == frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(0).getX()) {
                            g.drawImage(listaDeCarros.get(i).getImagen().get(2).getImage(), listaDeCarros.get(i).getX() - 1, listaDeCarros.get(i).getY() - 0, listaDeCarros.get(i).getAncho(), listaDeCarros.get(i).getAlto(), this);
                            listaDeCarros.get(i).setImgAnterior0(false);
                            listaDeCarros.get(i).setImgAnterior1(false);
                            listaDeCarros.get(i).setImgAnterior2(true);
                            listaDeCarros.get(i).setImgAnterior3(false);

                        }
                    }

                    //para izquierda o derecha se verifica es con las posiciones Y de los nodos si coinciden Y con 0
                    //esta hacia la izquierda y si coincide con 1 esta hacia la derecha
                    if ("H".equals(frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(0).getSentido())
                            || "h".equals(frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(0).getSentido())) {
                        if (listaDeCarros.get(i).getY() == frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(0).getY()) {
                            g.drawImage(listaDeCarros.get(i).getImagen().get(2).getImage(), listaDeCarros.get(i).getX() - 0, listaDeCarros.get(i).getY() + 0, listaDeCarros.get(i).getAlto(), listaDeCarros.get(i).getAncho(), this);
                            listaDeCarros.get(i).setImgAnterior0(false);
                            listaDeCarros.get(i).setImgAnterior1(false);
                            listaDeCarros.get(i).setImgAnterior2(true);
                            listaDeCarros.get(i).setImgAnterior3(false);

                        }
                        if (listaDeCarros.get(i).getX() == frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(0).getX() && listaDeCarros.get(i).getY() > frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(0).getY()) {
                            g.drawImage(listaDeCarros.get(i).getImagen().get(1).getImage(), listaDeCarros.get(i).getX() - 0, listaDeCarros.get(i).getY() + 0, listaDeCarros.get(i).getAlto(), listaDeCarros.get(i).getAncho(), this);
                            listaDeCarros.get(i).setImgAnterior0(false);
                            listaDeCarros.get(i).setImgAnterior1(true);
                            listaDeCarros.get(i).setImgAnterior2(false);
                            listaDeCarros.get(i).setImgAnterior3(false);

                        }
                        if (listaDeCarros.get(i).getY() == frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(1).getY()) {
                            g.drawImage(listaDeCarros.get(i).getImagen().get(3).getImage(), listaDeCarros.get(i).getX() - 1, listaDeCarros.get(i).getY() - 0, listaDeCarros.get(i).getAncho(), listaDeCarros.get(i).getAlto(), this);
                            listaDeCarros.get(i).setImgAnterior0(false);
                            listaDeCarros.get(i).setImgAnterior1(false);
                            listaDeCarros.get(i).setImgAnterior2(false);
                            listaDeCarros.get(i).setImgAnterior3(true);

                        }
                        if (listaDeCarros.get(i).getX() == frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(1).getX() && listaDeCarros.get(i).getY() < frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(1).getY()) {
                            g.drawImage(listaDeCarros.get(i).getImagen().get(0).getImage(), listaDeCarros.get(i).getX() - 0, listaDeCarros.get(i).getY() + 0, listaDeCarros.get(i).getAlto(), listaDeCarros.get(i).getAncho(), this);
                            listaDeCarros.get(i).setImgAnterior0(true);
                            listaDeCarros.get(i).setImgAnterior1(false);
                            listaDeCarros.get(i).setImgAnterior2(false);
                            listaDeCarros.get(i).setImgAnterior3(false);

                        }

                    }

                    //para arriba o abajo se verifica es con las posiciones x de los nodos si coincide x con nodo 0 
                    //esta subiendo y si coincide con x  nodo 1 esta bajando se coloca la imagen respectiva a ese movimiento.
                    if ("V".equals(frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(0).getSentido())
                            || "v".equals(frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(0).getSentido())) {
                        if (listaDeCarros.get(i).getX() == frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(0).getX()) {
                            g.drawImage(listaDeCarros.get(i).getImagen().get(0).getImage(), listaDeCarros.get(i).getX() - 0, listaDeCarros.get(i).getY() + 0, listaDeCarros.get(i).getAlto(), listaDeCarros.get(i).getAncho(), this);
                            listaDeCarros.get(i).setImgAnterior0(true);
                            listaDeCarros.get(i).setImgAnterior1(false);
                            listaDeCarros.get(i).setImgAnterior2(false);
                            listaDeCarros.get(i).setImgAnterior3(false);
                        }
                        if (listaDeCarros.get(i).getX() == frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(1).getX()) {
                            g.drawImage(listaDeCarros.get(i).getImagen().get(1).getImage(), listaDeCarros.get(i).getX() - 0, listaDeCarros.get(i).getY() + 0, listaDeCarros.get(i).getAlto(), listaDeCarros.get(i).getAncho(), this);
                            listaDeCarros.get(i).setImgAnterior0(false);
                            listaDeCarros.get(i).setImgAnterior1(true);
                            listaDeCarros.get(i).setImgAnterior2(false);
                            listaDeCarros.get(i).setImgAnterior3(false);
                        }
                        if (listaDeCarros.get(i).getY() == frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(0).getY() && listaDeCarros.get(i).getX() < frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(0).getX()) {
                            g.drawImage(listaDeCarros.get(i).getImagen().get(3).getImage(), listaDeCarros.get(i).getX() - 0, listaDeCarros.get(i).getY() + 0, listaDeCarros.get(i).getAlto(), listaDeCarros.get(i).getAncho(), this);
                            listaDeCarros.get(i).setImgAnterior0(false);
                            listaDeCarros.get(i).setImgAnterior1(false);
                            listaDeCarros.get(i).setImgAnterior2(false);
                            listaDeCarros.get(i).setImgAnterior3(true);
                        }
                        if (listaDeCarros.get(i).getY() == frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(1).getY() && listaDeCarros.get(i).getX() > frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(1).getX()) {
                            g.drawImage(listaDeCarros.get(i).getImagen().get(2).getImage(), listaDeCarros.get(i).getX() - 0, listaDeCarros.get(i).getY() + 0, listaDeCarros.get(i).getAlto(), listaDeCarros.get(i).getAncho(), this);
                            listaDeCarros.get(i).setImgAnterior0(false);
                            listaDeCarros.get(i).setImgAnterior1(false);
                            listaDeCarros.get(i).setImgAnterior2(true);
                            listaDeCarros.get(i).setImgAnterior3(false);
                        }

                    }

                    ///para XX o xx cuando concuerda x y Y con la del nodo no pinta.
                    if ("XX".equals(frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(0).getSentido())
                            || "xx".equals(frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(0).getSentido())) {

                        //para izquierda
                        if ((listaDeCarros.get(i).getY() == frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(0).getY() || listaDeCarros.get(i).getY() == frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(1).getY())
                                && (listaDeCarros.get(i).getX() != frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(1).getX())) {
                            g.drawImage(listaDeCarros.get(i).getImagen().get(2).getImage(), listaDeCarros.get(i).getX() - 0, listaDeCarros.get(i).getY() + 0, listaDeCarros.get(i).getAlto(), listaDeCarros.get(i).getAncho(), this);
                            listaDeCarros.get(i).setImgAnterior0(false);
                            listaDeCarros.get(i).setImgAnterior1(false);
                            listaDeCarros.get(i).setImgAnterior2(true);
                            listaDeCarros.get(i).setImgAnterior3(false);
                            //System.out.println("1");
                        }

                        //para derecha
                        if ((listaDeCarros.get(i).getY() == frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(2).getY() || listaDeCarros.get(i).getY() == frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(3).getY())
                                && (listaDeCarros.get(i).getX() != frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(2).getX())) {
                            g.drawImage(listaDeCarros.get(i).getImagen().get(3).getImage(), listaDeCarros.get(i).getX() - 0, listaDeCarros.get(i).getY() + 0, listaDeCarros.get(i).getAlto(), listaDeCarros.get(i).getAncho(), this);

                            listaDeCarros.get(i).setImgAnterior0(false);
                            listaDeCarros.get(i).setImgAnterior1(false);
                            listaDeCarros.get(i).setImgAnterior2(false);
                            listaDeCarros.get(i).setImgAnterior3(true);
                            //System.out.println("2");
                        }

                        //para abajo
                        if ((listaDeCarros.get(i).getX() == frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(0).getX() || listaDeCarros.get(i).getX() == frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(2).getX())
                                && (listaDeCarros.get(i).getY() != frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(0).getY())) {
                            g.drawImage(listaDeCarros.get(i).getImagen().get(1).getImage(), listaDeCarros.get(i).getX() - 0, listaDeCarros.get(i).getY() + 0, listaDeCarros.get(i).getAlto(), listaDeCarros.get(i).getAncho(), this);
                            listaDeCarros.get(i).setImgAnterior0(false);
                            listaDeCarros.get(i).setImgAnterior1(true);
                            listaDeCarros.get(i).setImgAnterior2(false);
                            listaDeCarros.get(i).setImgAnterior3(false);
                            //System.out.println("3");

                        }

                        //para arriba
                        if ((listaDeCarros.get(i).getX() == frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(1).getX() || listaDeCarros.get(i).getX() == frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(3).getX())
                                && (listaDeCarros.get(i).getY() != frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(3).getY())) {
                            g.drawImage(listaDeCarros.get(i).getImagen().get(0).getImage(), listaDeCarros.get(i).getX() - 0, listaDeCarros.get(i).getY() + 0, listaDeCarros.get(i).getAlto(), listaDeCarros.get(i).getAncho(), this);
                            listaDeCarros.get(i).setImgAnterior0(true);
                            listaDeCarros.get(i).setImgAnterior1(false);
                            listaDeCarros.get(i).setImgAnterior2(false);
                            listaDeCarros.get(i).setImgAnterior3(false);
                            //System.out.println("4");

                        }
                        //para cuando son iguales en 0
                        if (listaDeCarros.get(i).getX() == frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(0).getX() && listaDeCarros.get(i).getY() == frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(0).getY()) {

                            if (listaDeCarros.get(i).isImgAnterior1() == true) {
                                g.drawImage(listaDeCarros.get(i).getImagen().get(1).getImage(), listaDeCarros.get(i).getX() - 0, listaDeCarros.get(i).getY() + 0, listaDeCarros.get(i).getAlto(), listaDeCarros.get(i).getAncho(), this);
                                //System.out.println("5");
                            }
                            if (listaDeCarros.get(i).isImgAnterior2() == true) {
                                g.drawImage(listaDeCarros.get(i).getImagen().get(2).getImage(), listaDeCarros.get(i).getX() - 0, listaDeCarros.get(i).getY() + 0, listaDeCarros.get(i).getAlto(), listaDeCarros.get(i).getAncho(), this);
                                //System.out.println("6");
                            }
                        }
                        //para cuando son iguales en 1
                        if (listaDeCarros.get(i).getX() == frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(1).getX() && listaDeCarros.get(i).getY() == frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(1).getY()) {

                            if (listaDeCarros.get(i).isImgAnterior0() == true) {
                                g.drawImage(listaDeCarros.get(i).getImagen().get(0).getImage(), listaDeCarros.get(i).getX() - 0, listaDeCarros.get(i).getY() + 0, listaDeCarros.get(i).getAlto(), listaDeCarros.get(i).getAncho(), this);
                                //System.out.println("7");
                            }
                            if (listaDeCarros.get(i).isImgAnterior2() == true) {
                                g.drawImage(listaDeCarros.get(i).getImagen().get(2).getImage(), listaDeCarros.get(i).getX() - 0, listaDeCarros.get(i).getY() + 0, listaDeCarros.get(i).getAlto(), listaDeCarros.get(i).getAncho(), this);
                                //System.out.println("8");
                            }
                        }
                        //para cuando son iguales en 2
                        if (listaDeCarros.get(i).getX() == frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(2).getX() && listaDeCarros.get(i).getY() == frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(2).getY()) {

                            if (listaDeCarros.get(i).isImgAnterior1() == true) {
                                g.drawImage(listaDeCarros.get(i).getImagen().get(1).getImage(), listaDeCarros.get(i).getX() - 0, listaDeCarros.get(i).getY() + 0, listaDeCarros.get(i).getAlto(), listaDeCarros.get(i).getAncho(), this);
                                //System.out.println("9");
                            }
                            if (listaDeCarros.get(i).isImgAnterior3() == true) {
                                g.drawImage(listaDeCarros.get(i).getImagen().get(3).getImage(), listaDeCarros.get(i).getX() - 0, listaDeCarros.get(i).getY() + 0, listaDeCarros.get(i).getAlto(), listaDeCarros.get(i).getAncho(), this);
                                //System.out.println("10");
                            }
                        }
                        //para cuando son iguales en 3
                        if (listaDeCarros.get(i).getX() == frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(3).getX() && listaDeCarros.get(i).getY() == frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(3).getY()) {

                            if (listaDeCarros.get(i).isImgAnterior0() == true) {
                                g.drawImage(listaDeCarros.get(i).getImagen().get(0).getImage(), listaDeCarros.get(i).getX() - 0, listaDeCarros.get(i).getY() + 0, listaDeCarros.get(i).getAlto(), listaDeCarros.get(i).getAncho(), this);
                                //System.out.println("11");
                            }
                            if (listaDeCarros.get(i).isImgAnterior3() == true) {
                                g.drawImage(listaDeCarros.get(i).getImagen().get(3).getImage(), listaDeCarros.get(i).getX() - 0, listaDeCarros.get(i).getY() + 0, listaDeCarros.get(i).getAlto(), listaDeCarros.get(i).getAncho(), this);
                                //System.out.println("12");
                            }
                        }
                        //para 0 cuando es primera vez 
                        if (listaDeCarros.get(i).getX() == frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(0).getX() && listaDeCarros.get(i).getY() == frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(0).getY()) {
                            if (listaDeCarros.get(i).isImgAnterior0() == false && listaDeCarros.get(i).isImgAnterior1() == false && listaDeCarros.get(i).isImgAnterior2() == false && listaDeCarros.get(i).isImgAnterior3() == false) {
                                g.drawImage(listaDeCarros.get(i).getImagen().get(3).getImage(), listaDeCarros.get(i).getX() - 0, listaDeCarros.get(i).getY() + 0, listaDeCarros.get(i).getAlto(), listaDeCarros.get(i).getAncho(), this);
                                //System.out.println("13");
                            }
                        }

                        //para 1 cuando es primera vez 
                        if (listaDeCarros.get(i).getX() == frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(1).getX() && listaDeCarros.get(i).getY() == frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(1).getY()) {
                            if (listaDeCarros.get(i).isImgAnterior0() == false && listaDeCarros.get(i).isImgAnterior1() == false && listaDeCarros.get(i).isImgAnterior2() == false && listaDeCarros.get(i).isImgAnterior3() == false) {
                                g.drawImage(listaDeCarros.get(i).getImagen().get(3).getImage(), listaDeCarros.get(i).getX() - 0, listaDeCarros.get(i).getY() + 0, listaDeCarros.get(i).getAlto(), listaDeCarros.get(i).getAncho(), this);
                                //System.out.println("14");
                            }
                        }
                        //para 2 cuando es primera vez 
                        if (listaDeCarros.get(i).getX() == frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(2).getX() && listaDeCarros.get(i).getY() == frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(2).getY()) {
                            if (listaDeCarros.get(i).isImgAnterior0() == false && listaDeCarros.get(i).isImgAnterior1() == false && listaDeCarros.get(i).isImgAnterior2() == false && listaDeCarros.get(i).isImgAnterior3() == false) {
                                g.drawImage(listaDeCarros.get(i).getImagen().get(2).getImage(), listaDeCarros.get(i).getX() - 0, listaDeCarros.get(i).getY() + 0, listaDeCarros.get(i).getAlto(), listaDeCarros.get(i).getAncho(), this);
                                //System.out.println("15");
                            }
                        }
                        //para 3 cuando es primera vez 
                        if (listaDeCarros.get(i).getX() == frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(3).getX() && listaDeCarros.get(i).getY() == frame.getCalles().get(idCalle).getListaDeNodosEnCalle().get(3).getY()) {
                            if (listaDeCarros.get(i).isImgAnterior0() == false && listaDeCarros.get(i).isImgAnterior1() == false && listaDeCarros.get(i).isImgAnterior2() == false && listaDeCarros.get(i).isImgAnterior3() == false) {
                                g.drawImage(listaDeCarros.get(i).getImagen().get(2).getImage(), listaDeCarros.get(i).getX() - 0, listaDeCarros.get(i).getY() + 0, listaDeCarros.get(i).getAlto(), listaDeCarros.get(i).getAncho(), this);
                                //System.out.println("16");
                            }
                        }

                    }

                }

            }

        }

        repaint();

    }

    @Override
    public void mouseClicked(MouseEvent e) {
        formularioConfiguararRutaCarro configuararRutaCarro = new formularioConfiguararRutaCarro();
        if (this.clickEnUnCarro(e.getX(), e.getY(), listaDeCarros) == false && validarClic == false) {
            ///toca que sacar un primer formulario para identificar que desea hacer 
            ///o en el mismo formulario se identifica carros o pues ruta 

            FormularioParaAnimacionCarro formulario = new FormularioParaAnimacionCarro();

            int x = (int) e.getPoint().getX();
            int y = (int) e.getPoint().getY();

            int[] cuadroSeleccionado = new int[2];
            cuadroSeleccionado = retornarPosicionCuadriculaSeleccionada(x, y);

            formulario.recibirPanel(this, cuadroSeleccionado[0], cuadroSeleccionado[1], x, y);
            formulario.setVisible(true);
        }
        if (this.clickEnUnCarro(e.getX(), e.getY(), listaDeCarros) == true && validarClic == false) {
            int idCarro = this.retornarCarroCLikeado(e.getX(), e.getY(), listaDeCarros);
            if (idCarro != -1) {
                while (this.carroEstaEnUnNodo(listaDeCarros.get(idCarro)) == false) {
                    System.out.println("Esperando A llegar Al Nodo");
                }
                listaDeCarros.get(idCarro).setMover(false);

                configuararRutaCarro.recibirPanel(this, idCarro);
                configuararRutaCarro.ingresarPrimerNodoAlalista(this.retornarNodoClickeado(listaDeCarros.get(idCarro).getX(), listaDeCarros.get(idCarro).getY()));
                configuararRutaCarro.setVisible(true);
            }
        }

        if (validarClic == true) {
            int nodo = this.retornarNodoClickeado((int) e.getPoint().getX(), (int) e.getPoint().getY());
            
            if (nodo != -1) {
                listaAuxiliarParaTomarRutaDeCarros.add(nodo);
            } else {
                JOptionPane.showMessageDialog(this, "El nodo clickeado no es correcto" + nodo);
            }

        }
    }

    //recibe el frameAnimacionMapa para tener los atributos de este.
    public void recibirFrameCrearMapa(FrameAnimacionMapa frameRecibido) {
        this.frame = frameRecibido;
    }

    //este metodo crea un carro de tipo Automovil y lo agrega a la lista de coches.
    public void crearCarro(LinkedList<ImageIcon> lista, int x, int y, int xNodoPosClick, int yNodoPosClick) {
        //recibe x y y de la matriz para saber en que posicion lo creo.
        int iCalle = matrizCuadriculaMapaIdCalles[x][y];

        if (iCalle != -1) {
            if (frame.getCalles().get(iCalle).getSentido().equals("Derecha")
                    || frame.getCalles().get(iCalle).getSentido().equals("Izquierda")
                    || frame.getCalles().get(iCalle).getSentido().equals("Arriba")
                    || frame.getCalles().get(iCalle).getSentido().equals("Abajo")) {
                //lo agrego en el nodo 0 de cada calle
                int xNodo = frame.getCalles().get(iCalle).getListaDeNodosEnCalle().get(0).getX();
                int yNodo = frame.getCalles().get(iCalle).getListaDeNodosEnCalle().get(0).getY();

                Automovil auto = new Automovil(listaDeCarros.size(), xNodo, yNodo, 15, 15, true);
                auto.setImagen(lista);//aqui recibe un tipo imageIcon

                listaDeCarros.add(auto);

            }
            if (frame.getCalles().get(iCalle).getSentido().equals("Doble sentido")) {
                if (matrizLetrasElementosInternosCuadriculaMapa[x][y].equals("XX") || matrizLetrasElementosInternosCuadriculaMapa[x][y].equals("xx")) {

                    if (xNodoPosClick > frame.getCalles().get(iCalle).getListaDeNodosEnCalle().get(0).getX()
                            && xNodoPosClick < frame.getCalles().get(iCalle).getListaDeNodosEnCalle().get(0).getX() + 6
                            && yNodoPosClick > frame.getCalles().get(iCalle).getListaDeNodosEnCalle().get(0).getY()
                            && yNodoPosClick < frame.getCalles().get(iCalle).getListaDeNodosEnCalle().get(0).getY() + 6) {
                        //lo agrego en el nodo 0 de cada calle
                        int xNodo = frame.getCalles().get(iCalle).getListaDeNodosEnCalle().get(0).getX();
                        int yNodo = frame.getCalles().get(iCalle).getListaDeNodosEnCalle().get(0).getY();

                        Automovil auto = new Automovil(listaDeCarros.size(), xNodo, yNodo, 15, 15, true);
                        auto.setImagen(lista);//aqui recibe un tipo imageIcon

                        listaDeCarros.add(auto);
                    }
                    if (xNodoPosClick > frame.getCalles().get(iCalle).getListaDeNodosEnCalle().get(1).getX()
                            && xNodoPosClick < frame.getCalles().get(iCalle).getListaDeNodosEnCalle().get(1).getX() + 6
                            && yNodoPosClick > frame.getCalles().get(iCalle).getListaDeNodosEnCalle().get(1).getY()
                            && yNodoPosClick < frame.getCalles().get(iCalle).getListaDeNodosEnCalle().get(1).getY() + 6) {
                        //lo agrego en el nodo 1 de cada calle
                        int xNodo = frame.getCalles().get(iCalle).getListaDeNodosEnCalle().get(1).getX();
                        int yNodo = frame.getCalles().get(iCalle).getListaDeNodosEnCalle().get(1).getY();

                        Automovil auto = new Automovil(listaDeCarros.size(), xNodo, yNodo, 15, 15, true);
                        auto.setImagen(lista);//aqui recibe un tipo imageIcon

                        listaDeCarros.add(auto);
                    }
                    if (xNodoPosClick > frame.getCalles().get(iCalle).getListaDeNodosEnCalle().get(2).getX()
                            && xNodoPosClick < frame.getCalles().get(iCalle).getListaDeNodosEnCalle().get(2).getX() + 6
                            && yNodoPosClick > frame.getCalles().get(iCalle).getListaDeNodosEnCalle().get(2).getY()
                            && yNodoPosClick < frame.getCalles().get(iCalle).getListaDeNodosEnCalle().get(2).getY() + 6) {
                        //lo agrego en el nodo 2 de cada calle
                        int xNodo = frame.getCalles().get(iCalle).getListaDeNodosEnCalle().get(2).getX();
                        int yNodo = frame.getCalles().get(iCalle).getListaDeNodosEnCalle().get(2).getY();

                        Automovil auto = new Automovil(listaDeCarros.size(), xNodo, yNodo, 15, 15, true);
                        auto.setImagen(lista);//aqui recibe un tipo imageIcon

                        listaDeCarros.add(auto);
                    }
                    if (xNodoPosClick > frame.getCalles().get(iCalle).getListaDeNodosEnCalle().get(3).getX()
                            && xNodoPosClick < frame.getCalles().get(iCalle).getListaDeNodosEnCalle().get(3).getX() + 6
                            && yNodoPosClick > frame.getCalles().get(iCalle).getListaDeNodosEnCalle().get(3).getY()
                            && yNodoPosClick < frame.getCalles().get(iCalle).getListaDeNodosEnCalle().get(3).getY() + 6) {
                        //lo agrego en el nodo 3 de cada calle
                        int xNodo = frame.getCalles().get(iCalle).getListaDeNodosEnCalle().get(3).getX();
                        int yNodo = frame.getCalles().get(iCalle).getListaDeNodosEnCalle().get(3).getY();

                        Automovil auto = new Automovil(listaDeCarros.size(), xNodo, yNodo, 15, 15, true);
                        auto.setImagen(lista);//aqui recibe un tipo imageIcon

                        listaDeCarros.add(auto);
                    }

                } else {
                    if (xNodoPosClick > frame.getCalles().get(iCalle).getListaDeNodosEnCalle().get(0).getX()
                            && xNodoPosClick < frame.getCalles().get(iCalle).getListaDeNodosEnCalle().get(0).getX() + 6
                            && yNodoPosClick > frame.getCalles().get(iCalle).getListaDeNodosEnCalle().get(0).getY()
                            && yNodoPosClick < frame.getCalles().get(iCalle).getListaDeNodosEnCalle().get(0).getY() + 6) {
                        //lo agrego en el nodo 0 de cada calle
                        int xNodo = frame.getCalles().get(iCalle).getListaDeNodosEnCalle().get(0).getX();
                        int yNodo = frame.getCalles().get(iCalle).getListaDeNodosEnCalle().get(0).getY();

                        Automovil auto = new Automovil(listaDeCarros.size(), xNodo, yNodo, 15, 15, true);
                        auto.setImagen(lista);//aqui recibe un tipo imageIcon

                        listaDeCarros.add(auto);
                    } else {
                        //lo agrego en el nodo 1 de cada calle
                        int xNodo = frame.getCalles().get(iCalle).getListaDeNodosEnCalle().get(1).getX();
                        int yNodo = frame.getCalles().get(iCalle).getListaDeNodosEnCalle().get(1).getY();

                        Automovil auto = new Automovil(listaDeCarros.size(), xNodo, yNodo, 15, 15, true);
                        auto.setImagen(lista);//aqui recibe un tipo imageIcon

                        listaDeCarros.add(auto);
                    }
                }
            }

        }
    }

    ///metodo para verificar si hay algun elemento en esa posicion de la matriz de elementos 
    public boolean hayAlgunElemento() {
        for (int i = 0; i < 10; i++) {
            for (int j = 0; j < 20; j++) {
                if (!"".equals(matrizLetrasElementosInternosCuadriculaMapa[j][i])) {
                    return true;
                } else {
                    return false;
                }
            }
        }
        return false;
    }

    //metodo para mostrar las matricez por consola. 
    public void mostrarMatricezEnConsola() {
        //ciclo para mostrar las matrices de elementos 
        String cadena2;

        //System.out.println("");
        //System.out.println("        00       01       02       03       04       05       06       07       08       09       10       11       12       13       14       15       16       17       18       19       20 ");
        for (int i = 0; i < 10; i++) {
            cadena2 = i + " ";
            for (int j = 0; j < 20; j++) {
                cadena2 = cadena2 + "    " + matrizLetrasElementosInternosCuadriculaMapa[j][i];
            }
            //System.out.println(cadena2);
        }
        //ciclo para mostrar las matrices de id calles 
        String cadena1;

        //System.out.println("");
        //System.out.println("        00       01       02       03       04       05       06       07       08       09       10       11       12       13       14       15       16       17       18       19       20 ");
        for (int i = 0; i < 10; i++) {
            cadena1 = i + " ";
            for (int j = 0; j < 20; j++) {
                cadena1 = cadena1 + "       " + matrizCuadriculaMapaIdCalles[j][i];
            }
            //System.out.println(cadena1);
        }
    }

    //metodo para que retorna en una vector de dos posiciones con  las posiciones X y Y  
    //que selecciono  de la matriz con el evento mouseClicke  
    public int[] retornarPosicionCuadriculaSeleccionada(int x, int y) {

        ////System.out.println("X " + x + " Y " + y);
        boolean encontroX = false;
        boolean encontroY = false;
        int i = 0;
        int j = 0;
        int[] datosXY = new int[2];
        //para encontrar limites en x 
        while (i < 20 && encontroX == false) {

            if (matrizPuntosLimitesCuadriculaMapa[i][j].getX1() <= x && matrizPuntosLimitesCuadriculaMapa[i][j].getX2() >= x) {
                encontroX = true;
                datosXY[0] = i;
            }
            i++;
        }
        //para encontrar limites en y despues de haber encontrado x
        if (encontroX == true) {
            while (j < 10 && encontroY == false) {
                if (matrizPuntosLimitesCuadriculaMapa[datosXY[0]][j].getY1() <= y && matrizPuntosLimitesCuadriculaMapa[datosXY[0]][j].getY2() >= y) {
                    encontroY = true;
                    datosXY[1] = j;
                }
                j++;
            }
        } else {
            //System.out.println("verifique posiciones seleccionadas");
        }
        if (encontroY == true) {
            return datosXY;
        }
        return null;
    }

    public void moverCarros() {
        this.moverCarrosAleatoriamente = true;
    }

    public void detenerCarros() {
        this.moverCarrosAleatoriamente = false;
    }

    public NodoGrafoMapa retornarAleatoriamenteUnNodoB(NodoGrafoMapa nodoA) {
        LinkedList<NodoGrafoMapa> listaPosiblesB = new LinkedList<>();
        ////System.out.println("nodoa----"+ nodoA.getId());
        for (int i = 0; i < frame.getAristasGrafoMapa().size(); i++) {
            //System.out.println("");
            if (frame.getAristasGrafoMapa().get(i).getNodoA().getId() == nodoA.getId()) {
                listaPosiblesB.add(frame.getAristasGrafoMapa().get(i).getNodoB());
            }
        }
        if (listaPosiblesB.size() > 0) {
            return listaPosiblesB.get((int) Math.floor(Math.random() * listaPosiblesB.size()));
        }
        return null;

    }

    public NodoGrafoMapa retornarNodoEnElqueSeEstaParadoParaElCarro(Automovil carro) {

        for (int i = 0; i < frame.getListaNodosMapa().size(); i++) {
            if (frame.getListaNodosMapa().get(i).getX() == carro.getX() && frame.getListaNodosMapa().get(i).getY() == carro.getY()) {
                return frame.getListaNodosMapa().get(i);
            }
        }

        return null;
    }

    public boolean saberSiHayTransicionDeNodoAaNodoB(NodoGrafoMapa nodoA, NodoGrafoMapa nodoB) {
        for (int i = 0; i < frame.getAristasGrafoMapa().size(); i++) {
            if (frame.getAristasGrafoMapa().get(i).getNodoA().getId() == nodoA.getId() && frame.getAristasGrafoMapa().get(i).getNodoB().getId() == nodoB.getId()) {
                return true;
            }
        }

        return false;
    }

    @Override
    public void run() {
        //aca se mueven los carros aleatoriamente 
        while (true) {

            System.out.println("Estado " + this.moverCarrosAleatoriamente);
            if (this.moverCarrosAleatoriamente == true) {

                for (int i = 0; i < listaDeCarros.size(); i++) {
                    //Se verifica si el carro se puede mover aleatoriamente 

                    //para mover carro con una ruta 
                    if (listaDeCarros.get(i).isMover() == false && this.retornarNodoEnElqueSeEstaParadoParaElCarro(listaDeCarros.get(i)) != null) {

                        if (listaDeCarros.get(i).getRutaIdNodos().size() > 0) {
                            ///tendria el mismo problema se moveria primero este en su ruta y los otros no 
                            if (listaDeCarros.get(i).getNodoA() == null && listaDeCarros.get(i).getNodoB() == null) {
                                NodoGrafoMapa nodoA = frame.getListaNodosMapa().get(listaDeCarros.get(i).getRutaIdNodos().get(listaDeCarros.get(i).getContarNodoRuta()));
                                NodoGrafoMapa nodoB = frame.getListaNodosMapa().get(listaDeCarros.get(i).getRutaIdNodos().get(listaDeCarros.get(i).getContarNodoRuta() + 1));

                                listaDeCarros.get(i).setNodoA(nodoA);
                                listaDeCarros.get(i).setNodoB(nodoB);
                                listaDeCarros.get(i).setContarNodoRuta(listaDeCarros.get(i).getContarNodoRuta() + 1);
                            }

                            if (listaDeCarros.get(i).getNodoB() != null) {
                                if (saberSiHayTransicionDeNodoAaNodoB(listaDeCarros.get(i).getNodoA(), listaDeCarros.get(i).getNodoB()) == true) {
                                    //System.out.println("tiene transicion");

                                    if (listaDeCarros.get(i).getX() != listaDeCarros.get(i).getNodoB().getX()
                                            || listaDeCarros.get(i).getY() != listaDeCarros.get(i).getNodoB().getY()) {
                                        //System.out.println("es diferente");
                                        if (listaDeCarros.get(i).getNodoA().getX() < listaDeCarros.get(i).getNodoB().getX()
                                                && listaDeCarros.get(i).getNodoA().getY() == listaDeCarros.get(i).getNodoB().getY()) {
                                            if (this.hayAlgunCarroAdelanteEnXmasUno(listaDeCarros.get(i)) == false) {
                                                // //System.out.println("nodoa menor a nodo b con y igual");
                                                listaDeCarros.get(i).setX(listaDeCarros.get(i).getX() + 1);
                                            }

                                        }
                                        if (listaDeCarros.get(i).getNodoA().getX() > listaDeCarros.get(i).getNodoB().getX()
                                                && listaDeCarros.get(i).getNodoA().getY() == listaDeCarros.get(i).getNodoB().getY()) {
                                            if (this.hayAlgunCarroAdelanteEnXmenosUno(listaDeCarros.get(i)) == false) {
                                                ///  //System.out.println("nodoa mayor a nodo b con y igual");
                                                listaDeCarros.get(i).setX(listaDeCarros.get(i).getX() - 1);
                                            }

                                        }
                                        if (listaDeCarros.get(i).getNodoA().getY() < listaDeCarros.get(i).getNodoB().getY()
                                                && listaDeCarros.get(i).getNodoA().getX() == listaDeCarros.get(i).getNodoB().getX()) {
                                            if (this.hayAlgunCarroAdelanteEnYmasUno(listaDeCarros.get(i)) == false) {
                                                //  //System.out.println("nodoa menor a nodo b con X igual");
                                                listaDeCarros.get(i).setY(listaDeCarros.get(i).getY() + 1);

                                            }

                                        }
                                        if (listaDeCarros.get(i).getNodoA().getY() > listaDeCarros.get(i).getNodoB().getY()
                                                && listaDeCarros.get(i).getNodoA().getX() == listaDeCarros.get(i).getNodoB().getX()) {
                                            if (this.hayAlgunCarroAdelanteEnYmenosUno(listaDeCarros.get(i)) == false) {
                                                //  //System.out.println("nodoa menor a nodo b con X igual");
                                                listaDeCarros.get(i).setY(listaDeCarros.get(i).getY() - 1);
                                            }

                                        }
                                    }
                                    if (listaDeCarros.get(i).getX() == listaDeCarros.get(i).getNodoB().getX()
                                            && listaDeCarros.get(i).getY() == listaDeCarros.get(i).getNodoB().getY()) {
                                        listaDeCarros.get(i).setNodoA(null);
                                        listaDeCarros.get(i).setNodoB(null);
                                    }

                                }
                            }
                            if (listaDeCarros.get(i).getNodoB() == null) {
                                listaDeCarros.get(i).setNodoA(null);
                                listaDeCarros.get(i).setNodoB(null);
                            }

                            //esta es por si llega al nodo final de la ruta entonces reinicia la lista y el contador
                            if (listaDeCarros.get(i).getX() == frame.getListaNodosMapa().get(listaDeCarros.get(i).getRutaIdNodos().getLast()).getX()
                                    && listaDeCarros.get(i).getY() == frame.getListaNodosMapa().get(listaDeCarros.get(i).getRutaIdNodos().getLast()).getY()) {

                                listaDeCarros.get(i).getRutaIdNodos().clear();
                                listaDeCarros.get(i).setContarNodoRuta(0);

                            }
                        }
                    }

                    ///para mover carros aleatoriamente
                    if ((listaDeCarros.get(i).isMover() == true && this.retornarNodoEnElqueSeEstaParadoParaElCarro(listaDeCarros.get(i)) == null)
                            || (listaDeCarros.get(i).isMover() == true && this.retornarNodoEnElqueSeEstaParadoParaElCarro(listaDeCarros.get(i)) != null)
                            || (listaDeCarros.get(i).isMover() == false && this.retornarNodoEnElqueSeEstaParadoParaElCarro(listaDeCarros.get(i)) == null)) {

                        if (listaDeCarros.get(i).getNodoA() == null && listaDeCarros.get(i).getNodoB() == null) {
                            NodoGrafoMapa nodoA = this.retornarNodoEnElqueSeEstaParadoParaElCarro(listaDeCarros.get(i));
                            NodoGrafoMapa nodoB = this.retornarAleatoriamenteUnNodoB(nodoA);

                            listaDeCarros.get(i).setNodoA(nodoA);
                            listaDeCarros.get(i).setNodoB(nodoB);
                        }

                        if (listaDeCarros.get(i).getNodoB() != null) {
                            if (saberSiHayTransicionDeNodoAaNodoB(listaDeCarros.get(i).getNodoA(), listaDeCarros.get(i).getNodoB()) == true) {
                                //System.out.println("tiene transicion");

                                if (listaDeCarros.get(i).getX() != listaDeCarros.get(i).getNodoB().getX()
                                        || listaDeCarros.get(i).getY() != listaDeCarros.get(i).getNodoB().getY()) {
                                    //System.out.println("es diferente");
                                    if (listaDeCarros.get(i).getNodoA().getX() < listaDeCarros.get(i).getNodoB().getX()
                                            && listaDeCarros.get(i).getNodoA().getY() == listaDeCarros.get(i).getNodoB().getY()) {
                                        if (this.hayAlgunCarroAdelanteEnXmasUno(listaDeCarros.get(i)) == false) {
                                            // //System.out.println("nodoa menor a nodo b con y igual");
                                            listaDeCarros.get(i).setX(listaDeCarros.get(i).getX() + 1);
                                        }

                                    }
                                    if (listaDeCarros.get(i).getNodoA().getX() > listaDeCarros.get(i).getNodoB().getX()
                                            && listaDeCarros.get(i).getNodoA().getY() == listaDeCarros.get(i).getNodoB().getY()) {
                                        if (this.hayAlgunCarroAdelanteEnXmenosUno(listaDeCarros.get(i)) == false) {
                                            ///  //System.out.println("nodoa mayor a nodo b con y igual");
                                            listaDeCarros.get(i).setX(listaDeCarros.get(i).getX() - 1);
                                        }

                                    }
                                    if (listaDeCarros.get(i).getNodoA().getY() < listaDeCarros.get(i).getNodoB().getY()
                                            && listaDeCarros.get(i).getNodoA().getX() == listaDeCarros.get(i).getNodoB().getX()) {
                                        if (this.hayAlgunCarroAdelanteEnYmasUno(listaDeCarros.get(i)) == false) {
                                            //  //System.out.println("nodoa menor a nodo b con X igual");
                                            listaDeCarros.get(i).setY(listaDeCarros.get(i).getY() + 1);

                                        }

                                    }
                                    if (listaDeCarros.get(i).getNodoA().getY() > listaDeCarros.get(i).getNodoB().getY()
                                            && listaDeCarros.get(i).getNodoA().getX() == listaDeCarros.get(i).getNodoB().getX()) {
                                        if (this.hayAlgunCarroAdelanteEnYmenosUno(listaDeCarros.get(i)) == false) {
                                            //  //System.out.println("nodoa menor a nodo b con X igual");
                                            listaDeCarros.get(i).setY(listaDeCarros.get(i).getY() - 1);
                                        }

                                    }
                                }
                                if (listaDeCarros.get(i).getX() == listaDeCarros.get(i).getNodoB().getX()
                                        && listaDeCarros.get(i).getY() == listaDeCarros.get(i).getNodoB().getY()) {
                                    listaDeCarros.get(i).setNodoA(null);
                                    listaDeCarros.get(i).setNodoB(null);
                                }

                            }
                        } else {
                            listaDeCarros.get(i).setNodoA(null);
                            listaDeCarros.get(i).setNodoB(null);
                        }
                    }
                }
                try {
                    Thread.sleep(30);
                } catch (Exception e) {
                }
            }
        }

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    public PuntosLimiteCuadricula[][] getMatrizPuntosLimitesCuadriculaMapa() {
        return matrizPuntosLimitesCuadriculaMapa;
    }

    public boolean isValidarClic() {
        return validarClic;
    }

    void setValidarClic(boolean validarClic) {
        this.validarClic = validarClic;
    }

    public void setValidarClic(boolean validarClic, LinkedList<Integer> listaDeIdNodosAvisitar) {
        this.validarClic = validarClic;
        this.listaAuxiliarParaTomarRutaDeCarros = listaDeIdNodosAvisitar;
    }

    public String[][] getMatrizLetrasElementosInternosCuadriculaMapa() {
        return matrizLetrasElementosInternosCuadriculaMapa;
    }

    public int[][] getMatrizCuadriculaMapaIdCalles() {
        return matrizCuadriculaMapaIdCalles;
    }

    public int[][] getMatrizCuadriculaMapaIdEdificios() {
        return matrizCuadriculaMapaIdEdificios;
    }

    public int[][] getMatrizCuadriculaMapaIdArboles() {
        return matrizCuadriculaMapaIdArboles;
    }

    public FrameAnimacionMapa getFrame() {
        return frame;
    }

    public void setMatrizPuntosLimitesCuadriculaMapa(PuntosLimiteCuadricula[][] matrizPuntosLimitesCuadriculaMapa) {
        this.matrizPuntosLimitesCuadriculaMapa = matrizPuntosLimitesCuadriculaMapa;
    }

    public void setMatrizLetrasElementosInternosCuadriculaMapa(String[][] matrizLetrasElementosInternosCuadriculaMapa) {
        this.matrizLetrasElementosInternosCuadriculaMapa = matrizLetrasElementosInternosCuadriculaMapa;
    }

    public void setMatrizCuadriculaMapaIdCalles(int[][] matrizCuadriculaMapaIdCalles) {
        this.matrizCuadriculaMapaIdCalles = matrizCuadriculaMapaIdCalles;
    }

    public void setMatrizCuadriculaMapaIdArboles(int[][] matrizCuadriculaMapaIdArboles) {
        this.matrizCuadriculaMapaIdArboles = matrizCuadriculaMapaIdArboles;
    }

    public void setMatrizCuadriculaMapaIdEdificios(int[][] matrizCuadriculaMapaIdEdificios) {
        this.matrizCuadriculaMapaIdEdificios = matrizCuadriculaMapaIdEdificios;
    }

    public void setFrame(FrameAnimacionMapa frame) {
        this.frame = frame;

    }

    @Override
    public void mousePressed(MouseEvent me) {
    }

    @Override
    public void mouseReleased(MouseEvent me) {
    }

    @Override
    public void mouseEntered(MouseEvent e) {
    }

    @Override
    public void mouseExited(MouseEvent me) {
    }

    @Override
    public void keyTyped(KeyEvent ke) {
    }

    @Override
    public void keyPressed(KeyEvent ke) {
    }

    @Override
    public void keyReleased(KeyEvent ke) {
    }

    @Override
    public void mouseDragged(MouseEvent e) {
    }

    @Override
    public void mouseMoved(MouseEvent e) {
    }

    private boolean hayAlgunCarroAdelanteEnXmasUno(Automovil carroV) {
        for (int i = 0; i < listaDeCarros.size(); i++) {
            if ((carroV.getX() < listaDeCarros.get(i).getX() && carroV.getX() + 35 > listaDeCarros.get(i).getX())
                    && (carroV.getY() - 10 < listaDeCarros.get(i).getY() && carroV.getY() + 20 > listaDeCarros.get(i).getY())
                    && carroV.getId() != listaDeCarros.get(i).getId()) {
                return true;
            }
        }
        return false;
    }

    private boolean hayAlgunCarroAdelanteEnXmenosUno(Automovil carroV) {
        for (int i = 0; i < listaDeCarros.size(); i++) {
            if ((listaDeCarros.get(i).getX() < carroV.getX() && listaDeCarros.get(i).getX() + 35 > carroV.getX())
                    && (carroV.getY() - 10 < listaDeCarros.get(i).getY() && carroV.getY() + 20 > listaDeCarros.get(i).getY())
                    && carroV.getId() != listaDeCarros.get(i).getId()) {
                return true;
            }
        }
        return false;
    }

    private boolean hayAlgunCarroAdelanteEnYmasUno(Automovil carroV) {
        for (int i = 0; i < listaDeCarros.size(); i++) {
            if (carroV.getY() < listaDeCarros.get(i).getY() && carroV.getY() + 35 > listaDeCarros.get(i).getY()
                    && (carroV.getX() - 10 < listaDeCarros.get(i).getX() && carroV.getX() + 20 > listaDeCarros.get(i).getX())
                    && carroV.getId() != listaDeCarros.get(i).getId()) {
                return true;
            }
        }
        return false;

    }

    private boolean hayAlgunCarroAdelanteEnYmenosUno(Automovil carroV) {

        for (int i = 0; i < listaDeCarros.size(); i++) {
            if (listaDeCarros.get(i).getY() < carroV.getY() && listaDeCarros.get(i).getY() + 35 > carroV.getY()
                    && (carroV.getX() - 10 < listaDeCarros.get(i).getX() && carroV.getX() + 20 > listaDeCarros.get(i).getX())
                    && carroV.getId() != listaDeCarros.get(i).getId()) {
                return true;
            }
        }
        return false;
    }

    private boolean clickEnUnCarro(int x, int y, LinkedList<Automovil> listaDeCarros) {

        for (int i = 0; i < listaDeCarros.size(); i++) {
            if (listaDeCarros.get(i).getX() < x && listaDeCarros.get(i).getX() + 15 > x
                    && listaDeCarros.get(i).getY() < y && listaDeCarros.get(i).getY() + 15 > y) {
                return true;
            }
        }
        return false;
    }

    private int retornarCarroCLikeado(int x, int y, LinkedList<Automovil> listaDeCarros) {
        for (int i = 0; i < listaDeCarros.size(); i++) {
            if (listaDeCarros.get(i).getX() < x && listaDeCarros.get(i).getX() + 15 > x
                    && listaDeCarros.get(i).getY() < y && listaDeCarros.get(i).getY() + 15 > y) {
                return i;
            }
        }
        return -1;
    }

    void crearSuceso(ImageIcon imageIcon, int x, int y, String suceso) {
        int contador = 0;
        NodoGrafoMapa nodoA1 = null;
        NodoGrafoMapa nodoB1 = null;
        NodoGrafoMapa nodoA2 = null;
        NodoGrafoMapa nodoB2 = null;
        Calle calle = null;

        if (matrizCuadriculaMapaIdCalles[x][y] != -1) {

            if (!frame.getCalles().get(matrizCuadriculaMapaIdCalles[x][y]).getListaDeNodosEnCalle().get(0).getSentido().startsWith("x") && !frame.getCalles().get(matrizCuadriculaMapaIdCalles[x][y]).getListaDeNodosEnCalle().get(0).getSentido().startsWith("X")) {

                frame.getCalles().get(matrizCuadriculaMapaIdCalles[x][y]).setSuceso(new Suceso(suceso, frame.getCalles().get(matrizCuadriculaMapaIdCalles[x][y]).getX() + 14, frame.getCalles().get(matrizCuadriculaMapaIdCalles[x][y]).getY() + 14, 30, 30, imageIcon));

                for (int i = 0; i < frame.getAristasGrafoMapa().size(); i++) {
                    if (matrizCuadriculaMapaIdCalles[x][y] == frame.getAristasGrafoMapa().get(i).getArista().getId()) {
                        frame.getCalles().get(matrizCuadriculaMapaIdCalles[x][y]).getSuceso().getAristasAEliminar().add(frame.getAristasGrafoMapa().get(i));
                    }
                }

                System.out.println("lista size" + frame.getCalles().get(matrizCuadriculaMapaIdCalles[x][y]).getSuceso().getAristasAEliminar().size());
                for (int j = 0; j < frame.getCalles().get(matrizCuadriculaMapaIdCalles[x][y]).getSuceso().getAristasAEliminar().size(); j++) {
                    for (int i = 0; i < frame.getAristasGrafoMapa().size(); i++) {
                        if (frame.getCalles().get(matrizCuadriculaMapaIdCalles[x][y]).getSuceso().getAristasAEliminar().get(j).getArista().getId() == frame.getAristasGrafoMapa().get(i).getArista().getId()) {
                            if (contador == 1) {
                                nodoA2 = frame.getAristasGrafoMapa().get(i).getNodoA();
                                nodoB2 = frame.getAristasGrafoMapa().get(i).getNodoB();
                                calle = frame.getAristasGrafoMapa().get(i).getArista();
                            }
                            if (contador == 0) {
                                nodoA1 = frame.getAristasGrafoMapa().get(i).getNodoA();
                                nodoB1 = frame.getAristasGrafoMapa().get(i).getNodoB();
                                contador++;
                            }

                            frame.getAristasGrafoMapa().remove(i);

                        }
                    }
                }
                if (nodoA1 != null && nodoB2 != null && calle != null && nodoA2 != null && nodoB1 != null) {
                    AristaGrafoMapa ar1 = new AristaGrafoMapa(nodoA1, calle, nodoB2);
                    AristaGrafoMapa ar2 = new AristaGrafoMapa(nodoA2, calle, nodoB1);
                    frame.getAristasGrafoMapa().add(ar1);
                    frame.getAristasGrafoMapa().add(ar2);
                    frame.getCalles().get(matrizCuadriculaMapaIdCalles[x][y]).getSuceso().getAristasNuevasAEliminar().add(ar1);
                    frame.getCalles().get(matrizCuadriculaMapaIdCalles[x][y]).getSuceso().getAristasNuevasAEliminar().add(ar2);
                }
            }

            //para las que son intersecciones se hacen con los nodos de la calle
        }

    }

    public void eliminarSuceso(int x, int y) {

        if (matrizCuadriculaMapaIdCalles[x][y] != -1) {
            if (!frame.getCalles().get(matrizCuadriculaMapaIdCalles[x][y]).getListaDeNodosEnCalle().get(0).getSentido().startsWith("x") && !frame.getCalles().get(matrizCuadriculaMapaIdCalles[x][y]).getListaDeNodosEnCalle().get(0).getSentido().startsWith("X")) {
                LinkedList<AristaGrafoMapa> aristasCopia = new LinkedList<>();
                LinkedList<AristaGrafoMapa> aristaCopia2 = new LinkedList<>();
                //generar codigo para volver a agregar transicioon
                for (int i = 0; i < frame.getCalles().get(matrizCuadriculaMapaIdCalles[x][y]).getSuceso().getAristasAEliminar().size(); i++) {
                    if (frame.getCalles().get(matrizCuadriculaMapaIdCalles[x][y]).getSuceso().getAristasAEliminar().get(i).getArista().getId() == matrizCuadriculaMapaIdCalles[x][y]) {
                        frame.getAristasGrafoMapa().add(frame.getCalles().get(matrizCuadriculaMapaIdCalles[x][y]).getSuceso().getAristasAEliminar().get(i));
                        aristasCopia.add(frame.getCalles().get(matrizCuadriculaMapaIdCalles[x][y]).getSuceso().getAristasAEliminar().get(i));
                    }
                }
                for (int i = 0; i < aristasCopia.size(); i++) {
                    if (frame.getCalles().get(matrizCuadriculaMapaIdCalles[x][y]).getSuceso().getAristasAEliminar().contains(aristasCopia.get(i))) {
                        frame.getCalles().get(matrizCuadriculaMapaIdCalles[x][y]).getSuceso().getAristasAEliminar().remove(aristasCopia.get(i));
                    }
                }

                //para eliminar  la lista de las nuevas transiciones/
                for (int i = 0; i < frame.getCalles().get(matrizCuadriculaMapaIdCalles[x][y]).getSuceso().getAristasNuevasAEliminar().size(); i++) {
                    if (frame.getCalles().get(matrizCuadriculaMapaIdCalles[x][y]).getSuceso().getAristasNuevasAEliminar().get(i).getArista().getId() == matrizCuadriculaMapaIdCalles[x][y]) {
                        frame.getAristasGrafoMapa().remove(frame.getCalles().get(matrizCuadriculaMapaIdCalles[x][y]).getSuceso().getAristasNuevasAEliminar().get(i));
                        aristaCopia2.add(frame.getCalles().get(matrizCuadriculaMapaIdCalles[x][y]).getSuceso().getAristasNuevasAEliminar().get(i));
                    }
                }
                for (int i = 0; i < aristaCopia2.size(); i++) {
                    if (frame.getCalles().get(matrizCuadriculaMapaIdCalles[x][y]).getSuceso().getAristasNuevasAEliminar().contains(aristaCopia2.get(i))) {
                        frame.getCalles().get(matrizCuadriculaMapaIdCalles[x][y]).getSuceso().getAristasNuevasAEliminar().remove(aristaCopia2.get(i));
                    }
                }

                frame.getCalles().get(matrizCuadriculaMapaIdCalles[x][y]).setSuceso(null);
            }

            //para las que son intersecciones se hacen con los nodos de la calle
        }
    }

    void eliminarCarro(int idCarro) {
        for (int i = 0; i < listaDeCarros.size(); i++) {
            if (listaDeCarros.get(i).getId() == idCarro) {
                listaDeCarros.remove(listaDeCarros.get(i));
            }
        }
    }

    private int retornarNodoClickeado(int x, int y) {
        for (int j = 0; j < frame.getListaNodosMapa().size(); j++) {
            if (x >= frame.getListaNodosMapa().get(j).getX() && x < frame.getListaNodosMapa().get(j).getX() + 10
                    && y >= frame.getListaNodosMapa().get(j).getY() && y < frame.getListaNodosMapa().get(j).getY() + 10) {
                return j;
            }
        }
        return -1;
    }

    void recibirListaDeNodosAVisitarPorCarro(int idCarro, LinkedList<Integer> listaDeIdNodosAvisitar) {
        int id = -1;
        for (int i = 0; i < listaDeCarros.size(); i++) {
            if (listaDeCarros.get(i).getId() == idCarro) {
                id = i;
            }
        }
        listaDeCarros.get(id).setRutaIdNodos(listaDeIdNodosAvisitar);
        
        for (int i = 0; i < listaDeCarros.get(id).getRutaIdNodos().size(); i++) {
            System.out.println("lista de nodos " + listaDeCarros.get(id).getRutaIdNodos().get(i) + " --------------------------------------");
        }
        //se hace el dijkstra
        

    }

    private boolean carroEstaEnUnNodo(Automovil carro) {
        for (int i = 0; i < frame.getListaNodosMapa().size(); i++) {
            if (carro.getX() == frame.getListaNodosMapa().get(i).getX() && carro.getY() == frame.getListaNodosMapa().get(i).getY()) {

                return true;
            }
        }
        return false;
    }

    void enviarListaEnElMismo(int idCarro) {
        this.recibirListaDeNodosAVisitarPorCarro(idCarro, this.listaAuxiliarParaTomarRutaDeCarros);
        this.listaAuxiliarParaTomarRutaDeCarros.clear();
    }

}
